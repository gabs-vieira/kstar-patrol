Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 1
MAIN.ASM



      1	0000			     .model small
      2	0000			     .stack
      3
      4	0000			     .data
      5	0000  00			 menu db 0
      6					 ; 0 - Menu
      7					 ; 1 - Setor
      8					 ; 2 - Jogo
      9					 ; 3 - Game Over
     10	0001  00			 screen	db 0
     11	0002  01			 sector	db 1
     12	0003  00			 timeout db 0
     13	0004  3C			 time db 60
     14	0005  0000			 score dw 0
     15
     16	0007  30 30 30 30 30		 score_buffer db '00000'
     17	      =0005			 score_buffer_len equ $-score_buffer
     18
     19	000C  30 30			 time_buffer db	'00'
     20	      =0002			 time_buffer_len equ $-time_buffer
     21
     22	000E  0005			 ship_speed dw 5
     23
     24	0010  03			 shot_count db 3
     25	0011  23BE 23BE	23BE		 shot_array_pos	dw 305*30,305*30,305*30
     26	0017  00 00 00			 shot_array_shoot db 0,0,0
     27	001A  23BE			 enemy_pos dw 305*30
     28
     29					 ; Re-renders
     30	001C  01			 rerender_ship db 1
     31	001D  01			 rerender_allies db 1
     32	001E  01			 rerender_score	db 1
     33
     34					 ; For pseudo random number generation
     35	001F  0000			 seed dw 0
     36
     37					 ; Strings para	o título e botões
     38	0021  07*(20) 20 5F 20 20 +	 string	 db 7 dup(" ")," _  __	 ___ _		  ",13,10
     39	      5F 5F 20 20 20 5F	5F+
     40	      5F 20 5F 20 20 20	20+
     41	      20 20 20 20 20 20	20+
     42	      20 0D 0A
     43	0044  07*(20) 7C 20 7C 2F +		 db 7 dup(" "),"| |/ /__/ __| |_ __ _ _	_ ",13,10
     44	      20 2F 5F 5F 2F 20	5F+
     45	      5F 7C 20 7C 5F 20	5F+
     46	      5F 20 5F 20 5F 20	5F+
     47	      20 0D 0A
     48	0067  07*(20) 7C 20 27 20 +		 db 7 dup(" "),"| ' <___\__ \  _/ _` | '_|",13,10
     49	      3C 5F 5F 5F 5C 5F	5F+
     50	      20 5C 20 20 5F 2F	20+
     51	      5F 60 20 7C 20 27	5F+
     52	      7C 0D 0A
     53	008A  07*(20) 7C 5F 7C 5C +		 db 7 dup(" "),"|_|\_\	|___/\__\__,_|_|  ",13,10
     54	      5F 5C 20 20 7C 5F	5F+
     55	      5F 2F 5C 5F 5F 5C	5F+
     56	      5F 2C 5F 7C 5F 7C	20+
     57	      20 0D 0A
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 2
MAIN.ASM



     58	00AD  07*(20) 7C 20 5F 20 +		 db 7 dup(" "),"| _ \__	_| |_ _	_ ___| |  ",13,10
     59	      5C 5F 5F 20 5F 7C	20+
     60	      7C 5F 20 5F 20 5F	20+
     61	      5F 5F 5F 7C 20 7C	20+
     62	      20 0D 0A
     63	00D0  07*(20) 7C 20 20 5F +		 db 7 dup(" "),"|  _/ _` |  _| '_/ _ \ |  ",13,10
     64	      2F 20 5F 60 20 7C	20+
     65	      20 5F 7C 20 27 5F	2F+
     66	      20 5F 20 5C 20 7C	20+
     67	      20 0D 0A
     68	00F3  07*(20) 7C 5F 7C 20 +		 db 7 dup(" "),"|_| \__,_|\__|_| \___/_|  ",13,10
     69	      5C 5F 5F 2C 5F 7C	5C+
     70	      5F 5F 7C 5F 7C 20	5C+
     71	      5F 5F 5F 2F 5F 7C	20+
     72	      20 0D 0A
     73
     74	      =00F5			 string_length equ $-string
     75
     76	0116  53 43 4F 52 45 3A		 score_str db "SCORE:"
     77	      =0006			 score_str_len equ $-score_str
     78
     79	011C  54 45 4D 50 4F 3A		 time_str db "TEMPO:"
     80	      =0006			 time_str_len equ $-time_str
     81
     82	0122  05*(20) 20 5F 5F 5F +	 sector_one  db	5 dup("	"), " ___	_	       _    ",13,10
     83	      20 20 20 20 20 20	20+
     84	      5F 20 20 20 20 20	20+
     85	      20 20 20 20 20 20	20+
     86	      20 5F 20 20 20 20	0D+
     87	      0A
     88	0148  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   /	|   ",13,10
     89	      7C 20 5F 5F 5F 20	7C+
     90	      20 7C 5F 20 5F 5F	5F+
     91	      20 5F 20 5F 20 20	20+
     92	      2F 20 7C 20 20 20	0D+
     93	      0A
     94	016E  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|  |	|   ",13,10
     95	      5C 2F 20 2D 5F 29	7C+
     96	      20 20 5F 2F 20 5F	20+
     97	      5C 20 27 5F 7C 20	20+
     98	      7C 20 7C 20 20 20	0D+
     99	      0A
    100	0194  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    |_|   ",13,10
    101	      2F 5C 5F 5F 5F 5C	20+
    102	      5C 5F 5F 5C 5F 5F	5F+
    103	      2F 5F 7C 20 20 20	20+
    104	      7C 5F 7C 20 20 20	0D+
    105	      0A
    106
    107	01BA  05*(20) 20 5F 5F 5F +	 sector_two  db	5 dup("	"), " ___	_	       ___  ",13,10
    108	      20 20 20 20 20 20	20+
    109	      5F 20 20 20 20 20	20+
    110	      20 20 20 20 20 20	20+
    111	      20 5F 5F 5F 20 20	0D+
    112	      0A
    113	01E0  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   |_  ) ",13,10
    114	      7C 20 5F 5F 5F 20	7C+
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 3
MAIN.ASM



    115	      20 7C 5F 20 5F 5F	5F+
    116	      20 5F 20 5F 20 20	20+
    117	      7C 5F 20 20 29 20	0D+
    118	      0A
    119	0206  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|   / /  ",13,10
    120	      5C 2F 20 2D 5F 29	7C+
    121	      20 20 5F 2F 20 5F	20+
    122	      5C 20 27 5F 7C 20	20+
    123	      20 2F 20 2F 20 20	0D+
    124	      0A
    125	022C  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    /___| ",13,10
    126	      2F 5C 5F 5F 5F 5C	20+
    127	      5C 5F 5F 5C 5F 5F	5F+
    128	      2F 5F 7C 20 20 20	20+
    129	      2F 5F 5F 5F 7C 20	0D+
    130	      0A
    131
    132	0252  05*(20) 20 5F 5F 5F +	 sector_three	 db 5 dup(" "),	" ___	    _		   ____	",13,10
    133	      20 20 20 20 20 20	20+
    134	      5F 20 20 20 20 20	20+
    135	      20 20 20 20 20 20	20+
    136	      20 5F 5F 5F 5F 20	0D+
    137	      0A
    138	0278  05*(20) 2F 20 5F 5F +			 db 5 dup(" "),	"/ __| ___ | |_	___ _ _	  |__ /	",13,10
    139	      7C 20 5F 5F 5F 20	7C+
    140	      20 7C 5F 20 5F 5F	5F+
    141	      20 5F 20 5F 20 20	20+
    142	      7C 5F 5F 20 2F 20	0D+
    143	      0A
    144	029E  05*(20) 5C 5F 5F 20 +			 db 5 dup(" "),	"\__ \/	-_)|  _/ _ \ '_|   |_ \	",13,10
    145	      5C 2F 20 2D 5F 29	7C+
    146	      20 20 5F 2F 20 5F	20+
    147	      5C 20 27 5F 7C 20	20+
    148	      20 7C 5F 20 5C 20	0D+
    149	      0A
    150	02C4  05*(20) 7C 5F 5F 5F +			 db 5 dup(" "),	"|___/\___\ \__\___/_|	  |___/	",13,10
    151	      2F 5C 5F 5F 5F 5C	20+
    152	      5C 5F 5F 5C 5F 5F	5F+
    153	      2F 5F 7C 20 20 20	20+
    154	      7C 5F 5F 5F 2F 20	0D+
    155	      0A
    156
    157	      =0098			 sector_len equ	$-sector_three
    158
    159	02EA  0A*(20) 20 20 5F 5F +	 game_over   db	10 dup(" "), "	___		   ",13,10
    160	      5F 20 20 20 20 20	20+
    161	      20 20 20 20 20 20	20+
    162	      20 20 20 0D 0A
    163	030B  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / __|__ _ _ __  ___ ",13,10
    164	      5F 7C 5F 5F 20 5F	20+
    165	      5F 20 5F 5F 20 20	5F+
    166	      5F 5F 20 0D 0A
    167	032C  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_ / _`	| '  \/	-_)",13,10
    168	      20 2F 20 5F 60 20	7C+
    169	      20 27 20 20 5C 2F	20+
    170	      2D 5F 29 0D 0A
    171	034D  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___\__,_|_|_|_\___|",13,10
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 4
MAIN.ASM



    172	      5F 5C 5F 5F 2C 5F	7C+
    173	      5F 7C 5F 7C 5F 5C	5F+
    174	      5F 5F 7C 0D 0A
    175	036E  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / _ \__ _____ _ _   ",13,10
    176	      20 5C 5F 5F 20 5F	5F+
    177	      5F 5F 5F 20 5F 20	5F+
    178	      20 20 20 0D 0A
    179	038F  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_) \ V	/ -_) '_|  ",13,10
    180	      29 20 5C 20 56 20	2F+
    181	      20 2D 5F 29 20 27	5F+
    182	      7C 20 20 0D 0A
    183	03B0  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___/ \_/\___|_|	   ",13,10
    184	      5F 2F 20 5C 5F 2F	5C+
    185	      5F 5F 5F 7C 5F 7C	20+
    186	      20 20 20 0D 0A
    187
    188	      =00E7			 game_over_len equ $-game_over
    189
    190	03D1  20 5F 5F 20 20 20	5F+	 you_win db " __   __		       _	 _ ",13,10
    191	      5F 20 20 20 20 20	20+
    192	      20 20 20 20 20 20	20+
    193	      20 20 20 20 20 5F	20+
    194	      20 20 20 20 20 20	20+
    195	      20 5F 20 0D 0A
    196	03F9  20 5C 20 5C 20 2F	20+		 db " \	\ / /__	_ _  __	___ __|	|___ _ _| |",13,10
    197	      2F 5F 5F 20 5F 20	5F+
    198	      20 20 5F 5F 20 5F	5F+
    199	      5F 20 5F 5F 7C 20	7C+
    200	      5F 5F 5F 20 5F 20	5F+
    201	      7C 20 7C 0D 0A
    202	0421  20 20 5C 20 56 20	2F+		 db "  \ V / -_) ' \/ _/ -_) _`	/ _ \ '_|_|",13,10
    203	      20 2D 5F 29 20 27	20+
    204	      5C 2F 20 5F 2F 20	2D+
    205	      5F 29 20 5F 60 20	2F+
    206	      20 5F 20 5C 20 27	5F+
    207	      7C 5F 7C 0D 0A
    208	0449  20 20 20 5C 5F 2F	5C+		 db "	\_/\___|_||_\__\___\__,_\___/_|	(_)",13,10
    209	      5F 5F 5F 7C 5F 7C	7C+
    210	      5F 5C 5F 5F 5C 5F	5F+
    211	      5F 5C 5F 5F 2C 5F	5C+
    212	      5F 5F 5F 2F 5F 7C	20+
    213	      28 5F 29 0D 0A
    214
    215	      =00A0			 you_win_len equ $-you_win
    216
    217	0471  0122r 01BAr 0252r		 sector_vec dw offset sector_one, offset sector_two, offset sector_three
    218
    219	0477  0E*(20) DA C4 C4 C4 +	 btn_iniciar db	 14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    220	      C4 C4 C4 C4 C4 C4	BF+
    221	      0D 0A
    222	0492  0E*(20) B3 20 49 4E +		      db 14 dup(" "),179," INICIAR ",179,10,13
    223	      49 43 49 41 52 20	B3+
    224	      0A 0D
    225	04AD  0E*(20) C0 C4 C4 C4 +		      db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    226	      C4 C4 C4 C4 C4 C4	D9+
    227	      0D 0A
    228
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 5
MAIN.ASM



    229	      =0051			 btn_iniciar_length equ	$-btn_iniciar
    230
    231	04C8  0E*(20) DA C4 C4 C4 +	 btn_sair db  14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    232	      C4 C4 C4 C4 C4 C4	BF+
    233	      0D 0A
    234	04E3  0E*(20) B3 20 20 53 +		   db 14 dup(" "),179,"	 SAIR	",179,10,13
    235	      41 49 52 20 20 20	B3+
    236	      0A 0D
    237	04FE  0E*(20) C0 C4 C4 C4 +		   db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    238	      C4 C4 C4 C4 C4 C4	D9+
    239	      0D 0A
    240
    241	      =0051			 btn_sair_length equ $-btn_sair
    242
    243	0519  0140*(00)			 terrain db 320	dup(0)
    244	0659  0140*(00)			     db	320 dup(0)
    245	0799  A8*(00) 03*(06) 95* +	     db	168 dup(0),3 dup (6),149 dup(0)
    246	      (00)
    247	08D9  A6*(00) 06*(06) 94* +	     db	166 dup(0),6 dup (6),148 dup(0)
    248	      (00)
    249	0A19  22*(00) 04*(06) 07* +	     db	34 dup(0),4 dup	(6),7 dup(0),6 dup (6),63 dup(0),2 dup (6),25 dup(0),6 dup (6),18   +
    250	      (00) 06*(06) 3F*(00)+  dup(0),8 dup (6),87 dup(0),9 dup (6),51 dup(0)
    251	      02*(06) 19*(00) 06* +
    252	      (06) 12*(00) 08*(06)+
    253	      57*(00) 09*(06) 33* +
    254	      (00)
    255	0B59  21*(00) 06*(06) 05* +	     db	33 dup(0),6 dup	(6),5 dup(0),9 dup (6),37 dup(0),9 dup (6),12 dup(0),7 dup (6),20   +
    256	      (00) 09*(06) 25*(00)+  dup(0),10 dup (6),17 dup(0),9 dup (6),15 dup(0),5 dup (6),40 dup(0),5 dup (6),19 dup(0),11	dup +
    257	      09*(06) 0C*(00) 07* +  (6),15 dup(0),4 dup (6),32	dup(0)
    258	      (06) 14*(00) 0A*(06)+
    259	      11*(00) 09*(06) 0F* +
    260	      (00) 05*(06) 28*(00)+
    261	      05*(06) 13*(00) 0B* +
    262	      (06) 0F*(00) 04*(06)+
    263	      20*(00)
    264	0C99  0C*(00) 04*(06) 10* +	     db	12 dup(0),4 dup	(6),16 dup(0),7	dup (6),4 dup(0),11 dup	(6),17 dup(0),3	dup (6),15  +
    265	      (00) 07*(06) 04*(00)+  dup(0),11 dup (6),10 dup(0),10 dup	(6),15 dup(0),14 dup (6),15 dup(0),11 dup (6),13 dup(0),7   +
    266	      0B*(06) 11*(00) 03* +  dup (6),8 dup(0),6	dup (6),23 dup(0),9 dup	(6),15 dup(0),15 dup (6),12 dup(0),7 dup (6),30	dup +
    267	      (06) 0F*(00) 0B*(06)+  (0)
    268	      0A*(00) 0A*(06) 0F* +
    269	      (00) 0E*(06) 0F*(00)+
    270	      0B*(06) 0D*(00) 07* +
    271	      (06) 08*(00) 06*(06)+
    272	      17*(00) 09*(06) 0F* +
    273	      (00) 0F*(06) 0C*(00)+
    274	      07*(06) 1E*(00)
    275	0DD9  0B*(0B) 07*(06) 0E* +	     db	11 dup(0BH),7 dup (6),14 dup(0BH),23 dup (6),16	dup(0BH),3 dup (6),15 dup(0BH),11   +
    276	      (0B) 17*(06) 10*(0B)+  dup (6),9 dup(0BH),11 dup (6),13 dup(0BH),17 dup (6),14 dup(0BH),12 dup (6),11 dup(0BH),9 dup  +
    277	      03*(06) 0F*(0B) 0B* +  (6),5 dup(0BH),9 dup (6),20 dup(0BH),12 dup (6),13	dup(0BH),17 dup	(6),10 dup(0BH),9 dup (6),29+
    278	      (06) 09*(0B) 0B*(06)+  dup(0BH)
    279	      0D*(0B) 11*(06) 0E* +
    280	      (0B) 0C*(06) 0B*(0B)+
    281	      09*(06) 05*(0B) 09* +
    282	      (06) 14*(0B) 0C*(06)+
    283	      0D*(0B) 11*(06) 0A* +
    284	      (0B) 09*(06) 1D*(0B)
    285	0F19  01*(06) 09*(0B) 0A* +	     db	1 dup (6),9 dup(0BH),10	dup (6),10 dup(0BH),26 dup (6),15 dup(0BH),5 dup (6),12	dup +
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 6
MAIN.ASM



    286	      (06) 0A*(0B) 1A*(06)+  (0BH),34 dup (6),8	dup(0BH),21 dup	(6),12 dup(0BH),14 dup (6),9 dup(0BH),11 dup (6),2 dup(0BH),+
    287	      0F*(0B) 05*(06) 0C* +  13	dup (6),16 dup(0BH),17 dup (6),8 dup(0BH),20 dup (6),8 dup(0BH),11 dup (6),8 dup(0BH),3	dup +
    288	      (0B) 22*(06) 08*(0B)+  (6),8 dup(0BH),6 dup (6),2	dup(0BH),1 dup (6)
    289	      15*(06) 0C*(0B) 0E* +
    290	      (06) 09*(0B) 0B*(06)+
    291	      02*(0B) 0D*(06) 10* +
    292	      (0B) 11*(06) 08*(0B)+
    293	      14*(06) 08*(0B) 0B* +
    294	      (06) 08*(0B) 03*(06)+
    295	      08*(0B) 06*(06) 02* +
    296	      (0B) 01*(06)
    297	1059  02*(06) 07*(0B) 0C* +	     db	2 dup (6),7 dup(0BH),12	dup (6),8 dup(0BH),31 dup (6),10 dup(0BH),6 dup	(6),10 dup  +
    298	      (06) 08*(0B) 1F*(06)+  (0BH),65 dup (6),11 dup(0BH),17 dup (6),7 dup(0BH),28 dup (6),12 dup(0BH),49 dup (6),5 dup	    +
    299	      0A*(0B) 06*(06) 0A* +  (0BH),13 dup (6),5	dup(0BH),7 dup (6),4 dup(0BH),11 dup (6)
    300	      (0B) 41*(06) 0B*(0B)+
    301	      11*(06) 07*(0B) 1C* +
    302	      (06) 0C*(0B) 31*(06)+
    303	      05*(0B) 0D*(06) 05* +
    304	      (0B) 07*(06) 04*(0B)+
    305	      0B*(06)
    306	1199  03*(06) 05*(0B) 0E* +	     db	3 dup (6),5 dup(0BH),14	dup (6),4 dup(0BH),36 dup (6),6	dup(0BH),10 dup	(6),6 dup   +
    307	      (06) 04*(0B) 24*(06)+  (0BH),68 dup (6),9	dup(0BH),19 dup	(6),5 dup(0BH),109 dup (6),3 dup(0BH),8	dup (6),3 dup(0BH), +
    308	      06*(0B) 0A*(06) 06* +  12	dup (6)
    309	      (0B) 44*(06) 09*(0B)+
    310	      13*(06) 05*(0B) 6D* +
    311	      (06) 03*(0B) 08*(06)+
    312	      03*(0B) 0C*(06)
    313	12D9  3F*(06) 04*(0B) 0B* +	     db	63 dup (6),4 dup(0BH),11 dup (6),4 dup(0BH),71 dup (6),7 dup(0BH),23 dup (6),1 dup  +
    314	      (06) 04*(0B) 47*(06)+  (0BH),122 dup (6),1 dup(0BH),13 dup (6)
    315	      07*(0B) 17*(06) 01* +
    316	      (0B) 7A*(06) 01*(0B)+
    317	      0D*(06)
    318	1419  0140*(06)			     db	320 dup	(6)
    319	1559  0140*(06)			     db	320 dup	(6)
    320	1699  0140*(06)			     db	320 dup	(6)
    321	17D9  0140*(06)			     db	320 dup	(6)
    322	1919  0140*(06)			     db	320 dup	(6)
    323	1A59  0140*(06)			     db	320 dup	(6)
    324	1B99  0140*(06)			     db	320 dup	(6)
    325	1CD9  0140*(06)			     db	320 dup	(6)
    326
    327	1E19  E100			 terrain_pos dw	320 * 180
    328
    329	1E1B  0F 0F 0F 0F 0F 0F	0F+	 ship	     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    330	      0F 0F 0F 0F 0F 00	00+
    331	      00
    332	1E2A  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    333	      00 00 00 00 00 00	00+
    334	      00
    335	1E39  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    336	      00 00 00 00 00 00	00+
    337	      00
    338	1E48  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    339	      0F 00 00 00 00 00	00+
    340	      00
    341	1E57  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,15,15,15,15,15,15,15
    342	      0F 0F 0F 0F 0F 0F	0F+
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 7
MAIN.ASM



    343	      0F
    344	1E66  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    345	      0F 00 00 00 00 00	00+
    346	      00
    347	1E75  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    348	      00 00 00 00 00 00	00+
    349	      00
    350	1E84  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    351	      00 00 00 00 00 00	00+
    352	      00
    353	1E93  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    354	      0F 0F 0F 0F 0F 00	00+
    355	      00
    356
    357	1EA2  0000			 ship_pos dw 0
    358	1EA4  0F			 ship_color db 0FH
    359	1EA5  00			 is_ship_colliding db 0
    360
    361	1EA6  1900 3200	4B00 6400 +	 allies_pos_vec	dw 320 * 20, 320 * 40, 320 * 60, 320 * 80, 320 * 100, 320 * 120, 320 * 140, +
    362	      7D00 9600	AF00 C800    320 * 160
    363
    364					 ; each	bit represents an ally ship
    365	1EB6  FF			 allies_db db 0FFH ; 1111_1111b
    366	1EB7  08			 allies_count db 8
    367
    368	1EB8  00 00 00 00 00 00	00+	 alien_ship  db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    369	      00 09 09 09 09 09	09+
    370	      09
    371	1EC7  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    372	      00 09 09 00 00 00	00+
    373	      00
    374	1ED6  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    375	      00 00 00 00 00 00	00+
    376	      00
    377	1EE5  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    378	      09 00 00 00 00 00	00+
    379	      00
    380	1EF4  09 09 09 09 09 09	09+		     db	9,9,9,9,9,9,9,9,9,9,9,9,0,0,0
    381	      09 09 09 09 09 00	00+
    382	      00
    383	1F03  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    384	      09 00 00 00 00 00	00+
    385	      00
    386	1F12  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    387	      00 00 00 00 00 00	00+
    388	      00
    389	1F21  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    390	      00 09 09 00 00 00	00+
    391	      00
    392	1F30  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    393	      00 09 09 09 09 09	09+
    394	      09
    395
    396	1F3F  0000			 alien_ship_pos	dw 0
    397
    398	1F41  0F 0F 0F 0F 0F 0F	0F+	 shot	     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    399	      0F 0F 00 00 00 00	00+
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 8
MAIN.ASM



    400	      00
    401	1F50  0F*(00)				     db	15 dup (0)
    402	1F5F  0F*(00)				     db	15 dup (0)
    403	1F6E  0F*(00)				     db	15 dup (0)
    404	1F7D  00 00 00 00 00 00	0F+		     db	0,0,0,0,0,0,15,15,15,15,15,15,15,15,15
    405	      0F 0F 0F 0F 0F 0F	0F+
    406	      0F
    407	1F8C  0F*(00)				     db	15 dup (0)
    408	1F9B  0F*(00)				     db	15 dup (0)
    409	1FAA  0F*(00)				     db	15 dup (0)
    410	1FB9  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    411	      0F 0F 00 00 00 00	00+
    412	      00
    413
    414	1FC8			     .code
    415				     ; Procedimento para navegação no	menu usando as setas
    416	0000			     HANDLE_INPUT PROC
    417	0000  80 FC 48			 cmp ah, 48H
    418	0003  74 08			 je ARROW_UP
    419
    420	0005  80 FC 50			 cmp ah, 50H
    421	0008  74 0C			 je ARROW_DOWN
    422
    423	000A  EB 1A 90			 jmp END_HANDLE
    424
    425	000D			     ARROW_UP:
    426	000D  32 E4			 xor ah, ah
    427	000F  88 26 0000r		 mov menu, ah
    428
    429	0013  EB 07 90			 jmp RENDER_BUTTONS
    430
    431	0016			     ARROW_DOWN:
    432	0016  B4 01			 mov ah, 1
    433	0018  88 26 0000r		 mov menu, ah
    434
    435	001C			     RENDER_BUTTONS:
    436	001C  80 3E 0001r 00		 cmp screen, 0
    437	0021  75 03			 jne END_HANDLE
    438	0023  E8 0119			 call PRINT_BUTTONS
    439
    440	0026			     END_HANDLE:
    441	0026  C3			 ret
    442	0027			     ENDP
    443
    444
    445
    446				     ; Proc para controle da nave
    447	0027			     HANDLE_CONTROLS proc
    448	0027  56			 push si
    449	0028  57			 push di
    450	0029  50			 push ax
    451	002A  53			 push bx
    452	002B  51			 push cx
    453
    454	002C  BE 1EA2r			 mov si, offset	ship_pos
    455	002F  8B 3C			 mov di, [si]
    456
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 9
MAIN.ASM



    457	0031  80 FC 48			 cmp ah, 48H
    458	0034  74 15			 je MOVE_UP
    459
    460	0036  80 FC 50			 cmp ah, 50H
    461	0039  74 2D			 je MOVE_DOWN
    462
    463	003B  80 FC 39			 cmp ah, 39H
    464	003E  74 45			 je FIRE
    465
    466	0040  3C 71			 cmp al, 'q'
    467	0042  75 44			 jne END_CONTROLS
    468
    469	0044  33 C0			 xor ax, ax
    470	0046  CD 16			 int 16h
    471	0048  E8 0672			 call END_GAME
    472
    473	004B			     MOVE_UP:
    474	004B  B0 01			 mov al, 1
    475	004D  E8 00A3			 call CLEAR_SPRITE
    476
    477	0050  8B 1E 1EA2r		 mov bx, [ship_pos]
    478	0054  81 FB 192F		 cmp bx, 320 * 20 + 47
    479	0058  72 2E			 jb END_CONTROLS
    480	005A  74 2C			 je END_CONTROLS
    481
    482	005C  B4 01			 mov ah, 1
    483	005E  8B 1E 000Er		 mov bx, ship_speed
    484	0062  E8 003B			 call MOVE_SPRITE
    485	0065  EB 21 90			 jmp END_CONTROLS
    486
    487	0068			     MOVE_DOWN:
    488	0068  B0 01			 mov al, 1
    489	006A  E8 0086			 call CLEAR_SPRITE
    490
    491	006D  8B 1E 1EA2r		 mov bx, [ship_pos]
    492	0071  81 FB C82F		 cmp bx, 320 * 160 + 47
    493	0075  74 11			 je END_CONTROLS
    494	0077  77 0F			 ja END_CONTROLS
    495
    496	0079  32 E4			 xor ah, ah
    497	007B  8B 1E 000Er		 mov bx, ship_speed
    498	007F  E8 001E			 call MOVE_SPRITE
    499	0082  EB 04 90			 jmp END_CONTROLS
    500
    501	0085			     FIRE:
    502	0085  E8 0516			 call SHOOT
    503
    504	0088			     END_CONTROLS:
    505	0088  59			 pop cx
    506	0089  5B			 pop bx
    507	008A  58			 pop ax
    508	008B  5F			 pop di
    509	008C  5E			 pop si
    510	008D  C3			 ret
    511	008E			     endp
    512
    513	008E			     PRINT_TITLE_MENU proc
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 10
MAIN.ASM



    514	008E  8C D8			 mov ax, ds
    515	0090  8E C0			 mov es, ax
    516
    517	0092  BD 0021r			 mov bp, offset	string
    518	0095  B9 00F5			 mov cx, string_length ; tamanho
    519	0098  B3 02			 mov bl, 02H ; Cor verde (se bit 1 de AL estiver limpo,	usamos BL)
    520	009A  33 D2			 xor dx, dx ;linha / coluna
    521	009C  E8 0028			 call PRINT_STRING
    522
    523	009F  C3			 ret
    524	00A0			     endp
    525
    526				     ; AL = axis (0 is X, 1 is Y)
    527				     ; AH = direction (0 is positive, 1	is negative)
    528				     ; SI = position pointer
    529				     ; BX = increment
    530	00A0			     MOVE_SPRITE proc
    531	00A0  56			 push si
    532	00A1  50			 push ax
    533	00A2  53			 push bx
    534
    535	00A3  8B 0C			 mov cx, [si]
    536	00A5  3C 00			 cmp al, 0
    537	00A7  75 03			 jne MOVE_Y_AXIS
    538	00A9  EB 0A 90			 jmp CHECK_DIRECTION
    539
    540	00AC			     MOVE_Y_AXIS:
    541	00AC  50			 push ax
    542	00AD  B8 0140			 mov ax, 320
    543	00B0  F7 E3			 mul bx
    544	00B2  8B D8			 mov bx, ax
    545	00B4  58			 pop ax
    546
    547	00B5			     CHECK_DIRECTION:
    548	00B5  80 FC 00			 cmp ah, 0
    549	00B8  75 05			 jne MOVE_NEGATIVE
    550	00BA  03 CB			 add cx, bx
    551	00BC  EB 03 90			 jmp SAVE_POS
    552
    553	00BF			     MOVE_NEGATIVE:
    554	00BF  2B CB			 sub cx, bx
    555
    556	00C1			     SAVE_POS:
    557	00C1  89 0C			 mov [si], cx
    558
    559	00C3  5B			 pop bx
    560	00C4  58			 pop ax
    561	00C5  5E			 pop si
    562	00C6  C3			 ret
    563	00C7			     endp
    564
    565	00C7			     PRINT_STRING PROC
    566	00C7  50			 push AX
    567	00C8  53			 push BX
    568	00C9  1E			 push DS
    569	00CA  06			 push ES
    570	00CB  56			 push SI
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 11
MAIN.ASM



    571	00CC  55			 push BP
    572
    573					 ; Configura os	parâmetros para a função 13h
    574	00CD  B4 13			 mov ah, 13h	     ; Função	para escrever string com atributos de cor
    575	00CF  B0 01			 mov al, 1	     ; Modo: atualiza cursor após a escrita
    576							     ; AL = 1 -> modo de atualização de cursor
    577	00D1  32 FF			 xor bh, bh	      ;	Página	de vídeo 0
    578	00D3  CD 10			 int 10h	     ; Chamada de interrupção	para exibir a string
    579
    580	00D5  5D			 pop BP
    581	00D6  5E			 pop SI
    582	00D7  07			 pop ES
    583	00D8  1F			 pop DS
    584	00D9  5B			 pop BX
    585	00DA  58			 pop AX
    586	00DB  C3			 ret
    587	00DC			     ENDP
    588
    589				     ; SI = sprite pointer
    590				     ; BL = color
    591	00DC			     CHANGE_SPRITE_COLOR proc
    592	00DC  50			 push ax
    593	00DD  53			 push bx
    594	00DE  51			 push cx
    595	00DF  56			 push si
    596
    597	00E0  B9 0087			 mov cx, 15*9
    598
    599	00E3			     PIXEL_LOOP:
    600	00E3  8A 04			 mov al, [si]
    601	00E5  3C 00			 cmp al, 0
    602	00E7  74 02			 jz SKIP_REPLACE
    603	00E9  88 1C			 mov [si], bl
    604
    605	00EB			     SKIP_REPLACE:
    606	00EB  46			 inc si
    607	00EC  E2 F5			 loop PIXEL_LOOP
    608
    609	00EE  5E			 pop si
    610	00EF  59			 pop cx
    611	00F0  5B			 pop bx
    612	00F1  58			 pop ax
    613	00F2  C3			 ret
    614	00F3			     endp
    615
    616				     ; DI = sprite position
    617	00F3			     CLEAR_SPRITE proc
    618	00F3  50			 push ax
    619	00F4  51			 push cx
    620	00F5  57			 push di
    621	00F6  06			 push es
    622
    623	00F7  B8 A000			 mov ax, 0A000H
    624	00FA  8E C0			 mov es, ax
    625	00FC  B9 0009			 mov cx, 9
    626
    627	00FF			     CLEAR_LINE:
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 12
MAIN.ASM



    628	00FF  51			 push cx
    629	0100  B9 000F			 mov cx, 15
    630	0103  33 C0			 xor ax, ax
    631	0105  F3> AA			 rep stosb
    632	0107  81 C7 0131		 add di, 305
    633	010B  59			 pop cx
    634	010C  E2 F1			 loop CLEAR_LINE
    635
    636	010E  07			 pop es
    637	010F  5F			 pop di
    638	0110  59			 pop cx
    639	0111  58			 pop ax
    640	0112  C3			 ret
    641	0113			     endp
    642
    643				     ; AX = sprite position
    644				     ; SI = sprite pointer
    645	0113			     RENDER_SPRITE proc
    646	0113  53			 push bx
    647	0114  51			 push cx
    648	0115  52			 push dx
    649	0116  57			 push di
    650	0117  06			 push es
    651	0118  1E			 push ds
    652	0119  50			 push ax
    653
    654	011A  B8 0000s			 mov ax, @data
    655	011D  8E D8			 mov ds, ax
    656
    657	011F  B8 A000			 mov ax, 0A000h
    658	0122  8E C0			 mov es, ax
    659
    660	0124  58			 pop ax
    661	0125  8B F8			 mov di, ax
    662	0127  BA 0009			 mov dx, 9
    663	012A  50			 push ax
    664
    665	012B			     DRAW_LINE:
    666	012B  B9 000F			 mov cx, 15
    667	012E  F3> A4			 rep movsb
    668	0130  81 C7 0131		 add di, 320 - 15
    669	0134  4A			 dec dx
    670	0135  75 F4			 jnz DRAW_LINE
    671
    672	0137  58			 pop ax
    673	0138  1F			 pop ds
    674	0139  07			 pop es
    675	013A  5F			 pop di
    676	013B  5A			 pop dx
    677	013C  59			 pop cx
    678	013D  5B			 pop bx
    679	013E  C3		     ret
    680	013F			     endp
    681
    682				     ; Procedimento para exibir	os botões INICIAR e SAIR
    683	013F			     PRINT_BUTTONS proc
    684	013F  50			 push ax
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 13
MAIN.ASM



    685	0140  B3 0F			 mov bl, 0FH
    686	0142  8A 26 0000r		 mov ah, menu
    687	0146  80 FC 00			 cmp ah, 0
    688	0149  75 02			 jne START_BTN
    689	014B  B3 0C			 mov bl, 0CH
    690
    691	014D			     START_BTN:
    692					 ; Exibe o botão INICIAR
    693	014D  BD 0477r			 mov bp, offset	btn_iniciar
    694	0150  B9 0051			 mov cx, btn_iniciar_length ; tamanho
    695	0153  32 D2			 xor dl, dl ; coluna
    696	0155  B6 12			 mov dh, 18 ; linha
    697	0157  E8 FF6D			 call PRINT_STRING
    698
    699	015A  B3 0F			 mov bl, 0FH
    700	015C  8A 26 0000r		 mov ah, menu
    701	0160  80 FC 01			 cmp ah, 1
    702	0163  75 02			 jne EXIT_BTN
    703	0165  B3 0C			 mov bl, 0CH
    704
    705	0167			     EXIT_BTN:
    706	0167  BD 04C8r			 mov bp, offset	btn_sair
    707	016A  B9 0051			 mov cx, btn_sair_length
    708	016D  32 D2			 xor dl, dl ; coluna
    709	016F  B6 15			 mov dh, 21 ; linha
    710	0171  E8 FF53			 call PRINT_STRING
    711
    712	0174  58			 pop ax
    713	0175  C3			 ret
    714	0176			     endp
    715
    716	0176			     RESET_CROSS_SHIP_POS proc
    717	0176  50			 push ax
    718
    719	0177  B8 7D00			 mov ax, 100 * 320
    720	017A  A3 1EA2r			 mov ship_pos, ax
    721	017D  05 0131			 add ax, 305
    722	0180  A3 1F3Fr			 mov alien_ship_pos, ax
    723
    724	0183  58			 pop ax
    725	0184  C3			 ret
    726	0185			     endp
    727
    728	0185			     CROSS_SHIPS proc
    729	0185  A1 1EA2r			 mov ax, ship_pos
    730	0188  8B F8			 mov di, ax
    731	018A  E8 FF66			 call CLEAR_SPRITE
    732
    733	018D  3D 7E31			 cmp ax, 101*320-15
    734	0190  74 17			 je MOVE_ALIEN_SHIP
    735
    736	0192  FF 06 1EA2r		 inc ship_pos
    737	0196  40			 inc ax
    738	0197  BE 1E1Br			 mov si, offset	ship
    739	019A  E8 FF76			 call RENDER_SPRITE
    740
    741	019D  33 C9			 xor cx, cx
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 14
MAIN.ASM



    742	019F  BA C350			 mov dx, 0C350H
    743	01A2  B4 86			 mov ah, 86H
    744	01A4  CD 15			 int 15h
    745	01A6  EB 2A 90			 jmp END_POS_UPDATE
    746
    747	01A9			     MOVE_ALIEN_SHIP:
    748	01A9  A1 1F3Fr			 mov ax, alien_ship_pos
    749	01AC  8B F8			 mov di, ax
    750
    751	01AE  50			 push ax
    752	01AF  3D 7D00			 cmp ax, 100*320
    753	01B2  58			 pop ax
    754
    755	01B3  74 1A			 je RESET_POS
    756	01B5  E8 FF3B			 call CLEAR_SPRITE
    757
    758	01B8  FF 0E 1F3Fr		 dec alien_ship_pos
    759	01BC  48			 dec ax
    760	01BD  BE 1EB8r			 mov si, offset	alien_ship
    761	01C0  E8 FF50			 call RENDER_SPRITE
    762
    763	01C3  33 C9			 xor cx, cx
    764	01C5  BA C350			 mov dx, 0C350H
    765	01C8  B4 86			 mov ah, 86H
    766	01CA  CD 15			 int 15h
    767	01CC  EB 04 90			 jmp END_POS_UPDATE
    768
    769	01CF			     RESET_POS:
    770	01CF  E8 FFA4			 call RESET_CROSS_SHIP_POS
    771
    772	01D2			     END_POS_UPDATE:
    773	01D2  C3			 ret
    774	01D3			     endp
    775
    776	01D3			     RENDER_ALLY_SHIPS proc
    777	01D3  56			 push si
    778	01D4  57			 push di
    779	01D5  52			 push dx
    780	01D6  51			 push cx
    781	01D7  53			 push bx
    782	01D8  50			 push ax
    783
    784	01D9  B9 0008			 mov cx, 8
    785	01DC  BB 1EA6r			 mov bx, offset	allies_pos_vec
    786	01DF  8A 16 1EB6r		 mov dl, allies_db
    787
    788	01E3			     RENDER_SINGLE:
    789	01E3  8B 07			 mov ax, [bx]
    790	01E5  BE 1E1Br			 mov si, offset	ship
    791
    792	01E8  51			 push cx
    793	01E9  53			 push bx
    794	01EA  50			 push ax
    795
    796					 ; get color based on iteration
    797	01EB  8A D9			 mov bl, cl
    798	01ED  80 C3 06			 add bl, 6
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 15
MAIN.ASM



    799
    800	01F0  FE C9			 dec cl
    801	01F2  B0 01			 mov al, 1
    802	01F4  D2 E0			 shl al, cl
    803	01F6  22 C2			 and al, dl
    804
    805	01F8  58			 pop ax
    806	01F9  75 08			 jnz NO_CLEAR
    807	01FB  8B F8			 mov di, ax
    808	01FD  E8 FEF3			 call CLEAR_SPRITE
    809	0200  EB 07 90			 jmp AFTER_CLEAR
    810
    811	0203			     NO_CLEAR:
    812	0203  E8 FED6			 call CHANGE_SPRITE_COLOR
    813	0206  E8 FF0A			 call RENDER_SPRITE
    814
    815	0209			     AFTER_CLEAR:
    816	0209  5B			 pop bx
    817	020A  59			 pop cx
    818	020B  83 C3 02			 add bx, 2
    819	020E  E2 D3			 loop RENDER_SINGLE
    820
    821	0210  58			 pop ax
    822	0211  5B			 pop bx
    823	0212  59			 pop cx
    824	0213  5A			 pop dx
    825	0214  5F			 pop di
    826	0215  5E			 pop si
    827	0216  C3			 ret
    828	0217			     endp
    829
    830	0217			     CLEAR_SCREEN proc
    831	0217  50			 push ax
    832	0218  51			 push cx
    833	0219  06			 push es
    834	021A  57			 push di
    835
    836	021B  B8 A000			 mov ax,0A000h
    837	021E  8E C0			 mov es,ax
    838	0220  33 FF			 xor di, di
    839	0222  B9 7D00			 mov cx, 32000d
    840	0225  FC			 cld
    841	0226  33 C0			 xor ax, ax
    842	0228  F3> AB			 rep stosw
    843
    844	022A  5F			 pop di
    845	022B  07			 pop es
    846	022C  59			 pop cx
    847	022D  58			 pop ax
    848	022E  C3			 ret
    849	022F			     endp
    850
    851	022F			     SHOW_YOU_WIN proc
    852	022F  E8 FFE5			 call CLEAR_SCREEN
    853
    854	0232  BD 03D1r			 mov bp, offset	you_win
    855	0235  B9 00A0			 mov cx, you_win_len
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 16
MAIN.ASM



    856	0238  B3 0A			 mov bl, 0AH
    857	023A  32 D2			 xor dl, dl
    858	023C  B6 07			 mov dh, 7
    859	023E  E8 FE86			 call PRINT_STRING
    860
    861	0241  B3 0F			 mov bl, 0FH ; color = white
    862
    863	0243  BD 0116r			 mov bp, offset	score_str
    864	0246  B9 0006			 mov cx, score_str_len
    865	0249  B2 0C			 mov dl, 12
    866	024B  B6 0D			 mov dh, 13
    867	024D  E8 FE77			 call PRINT_STRING
    868
    869	0250  BD 0007r			 mov bp, offset	score_buffer
    870	0253  B9 0005			 mov cx, score_buffer_len
    871	0256  B2 14			 mov dl, 20
    872	0258  B6 0D			 mov dh, 13
    873	025A  E8 FE6A			 call PRINT_STRING
    874
    875	025D  33 C0			 xor ax, ax
    876	025F  CD 16			 int 16h
    877	0261  E8 0459			 call END_GAME
    878
    879	0264  C3			 ret
    880	0265			     endp
    881
    882				     ; This proc uses LCG to generate a	random number.
    883				     ; returns in AX a random 16 bit unsigned integer
    884	0265			     RANDOM_UINT16 proc
    885	0265  52			 push dx
    886
    887	0266  B8 9A75			 mov ax, 39541
    888	0269  F7 26 001Fr		 mul seed
    889	026D  05 3F83			 add ax, 16259
    890	0270  A3 001Fr			 mov seed, ax
    891
    892	0273  5A			 pop dx
    893	0274  C3			 ret
    894	0275			     endp
    895
    896				     ; AH = range upper	boundary (max 255)
    897				     ; return random 8 bit unsigned interger to	AL, between 0 and 254
    898	0275			     RANDOM_UINT8_RANGE	proc
    899	0275  53			 push bx
    900	0276  51			 push cx
    901	0277  52			 push dx
    902	0278  50			 push ax
    903
    904	0279  33 C9			 xor cx, cx
    905	027B  8A CC			 mov cl, ah
    906
    907	027D  E8 FFE5			 call RANDOM_UINT16
    908
    909	0280  33 D2			 xor dx, dx
    910	0282  8B D9			 mov bx, cx
    911	0284  F7 F3			 div bx
    912
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 17
MAIN.ASM



    913	0286  58			 pop ax
    914
    915	0287  8A C2			 mov al, dl
    916
    917	0289  5A			 pop dx
    918	028A  59			 pop cx
    919	028B  5B			 pop bx
    920	028C  C3			 ret
    921	028D			     endp
    922
    923	028D			     SHOW_GAME_OVER proc
    924	028D  E8 FF87			 call CLEAR_SCREEN
    925
    926	0290  BD 02EAr			 mov bp, offset	game_over
    927	0293  B9 00E7			 mov cx, game_over_len
    928	0296  B3 0C			 mov bl, 0CH
    929	0298  32 D2			 xor dl, dl ; coluna
    930	029A  B6 08			 mov dh, 8 ; linha
    931	029C  E8 FE28			 call PRINT_STRING
    932
    933	029F  33 C0			 xor ax, ax
    934	02A1  CD 16			 int 16h
    935	02A3  E8 0417			 call END_GAME
    936	02A6  C3			 ret
    937	02A7			     endp
    938
    939				     ; SI = first position
    940				     ; DI = second position
    941				     ; return CL = 1 if	positions collide
    942	02A7			     CHECK_COLLISION proc
    943	02A7  55			 push bp
    944	02A8  50			 push ax
    945	02A9  53			 push bx
    946	02AA  52			 push dx
    947
    948	02AB  8B EC			 mov bp, sp
    949
    950	02AD  33 D2			 xor dx, dx
    951	02AF  32 C9			 xor cl, cl
    952	02B1  BB 0140			 mov bx, 320
    953
    954	02B4  8B C6			 mov ax, si
    955	02B6  33 D2			 xor dx, dx
    956	02B8  F7 F3			 div bx
    957
    958	02BA  52			 push dx ; value of X1 - [bp-2]
    959	02BB  50			 push ax ; value of Y1 - [bp-4]
    960
    961	02BC  8B C7			 mov ax, di
    962	02BE  33 D2			 xor dx, dx
    963	02C0  F7 F3			 div bx
    964
    965	02C2  52			 push dx ; value of X2 - [bp-6]
    966
    967	02C3			     CHECK_Y_IN_RANGE:
    968	02C3  05 0009			 add ax, 9
    969	02C6  73 03			 jnc SKIP_Y_MAX
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 18
MAIN.ASM



    970	02C8  B8 FFFF			 mov ax, 0FFFFH
    971
    972	02CB			     SKIP_Y_MAX:
    973	02CB  8B 56 FC			 mov dx, [bp - 4]
    974	02CE  3B D0			 cmp dx, ax
    975	02D0  77 2A			 ja END_COLLISION
    976
    977	02D2  2D 0012			 sub ax, 18
    978	02D5  73 02			 jnc SKIP_Y_MIN
    979	02D7  33 C0			 xor ax, ax
    980
    981	02D9			     SKIP_Y_MIN:
    982	02D9  3B D0			 cmp dx, ax
    983	02DB  72 1F			 jb END_COLLISION
    984
    985	02DD			     CHECK_X_IN_RANGE:
    986	02DD  8B 46 FE			 mov ax, [bp - 2]
    987	02E0  05 000F			 add ax, 15
    988	02E3  73 03			 jnc SKIP_X_MAX
    989	02E5  B8 FFFF			 mov ax, 0FFFFH
    990
    991	02E8			     SKIP_X_MAX:
    992	02E8  8B 56 FA			 mov dx, [bp - 6]
    993	02EB  3B D0			 cmp dx, ax
    994	02ED  77 0D			 ja END_COLLISION
    995
    996	02EF  2D 001E			 sub ax, 30
    997	02F2  73 02			 jnc SKIP_X_MIN
    998	02F4  33 C0			 xor ax, ax
    999
   1000	02F6			     SKIP_X_MIN:
   1001	02F6  3B D0			 cmp dx, ax
   1002	02F8  72 02			 jb END_COLLISION
   1003
   1004	02FA  B1 01			 mov cl, 1
   1005
   1006	02FC			     END_COLLISION:
   1007
   1008	02FC  8B E5			 mov sp, bp
   1009
   1010	02FE  5A			 pop dx
   1011	02FF  5B			 pop bx
   1012	0300  58			 pop ax
   1013	0301  5D			 pop bp
   1014	0302  C3			 ret
   1015	0303			     endp
   1016
   1017	0303			     RENDER_SECTOR proc
   1018	0303  50			 push ax
   1019	0304  53			 push bx
   1020	0305  51			 push cx
   1021	0306  52			 push dx
   1022	0307  55			 push bp
   1023
   1024	0308  E8 FF0C			 call CLEAR_SCREEN
   1025
   1026					 ; Print Sector
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 19
MAIN.ASM



   1027	030B  33 C0			 xor ax, ax
   1028	030D  A0 0002r			 mov al, sector
   1029
   1030	0310  3C 04			 cmp al, 4
   1031	0312  75 03			 jne SUM_POINTS
   1032	0314  E8 FF18			 call SHOW_YOU_WIN
   1033
   1034	0317			     SUM_POINTS:
   1035	0317  FE C8			 dec al	; number vector	index
   1036
   1037	0319  BB 03E8			 mov bx, 1000
   1038	031C  F7 E3			 mul bx
   1039	031E  33 DB			 xor bx, bx
   1040	0320  8A 1E 1EB7r		 mov bl, allies_count
   1041	0324  F7 E3			 mul bx
   1042	0326  01 06 0005r		 add score, ax
   1043
   1044	032A  33 C0			 xor ax, ax
   1045	032C  A0 0002r			 mov al, sector
   1046	032F  FE C8			 dec al	; number vector	index
   1047	0331  D0 E0			 shl al, 1 ; multiply by 2 (since num_vec values are dw)
   1048	0333  BB 0471r			 mov bx, offset	sector_vec ; get the vector
   1049	0336  03 D8			 add bx, ax ; add the index to the vector ptr
   1050	0338  8B 2F			 mov bp, [bx] ;	set BP to base address of number
   1051	033A  B9 0098			 mov cx, sector_len
   1052	033D  32 D2			 xor dl, dl; line
   1053	033F  B6 0A			 mov dh, 10
   1054
   1055	0341  B4 06			 mov ah, 6 ; random value from 0 to 5
   1056	0343  E8 FF2F			 call RANDOM_UINT8_RANGE
   1057	0346  8A D8			 mov bl, al
   1058	0348  80 C3 09			 add bl, 9H
   1059	034B  E8 FD79			 call PRINT_STRING
   1060
   1061					 ; Wait	4s
   1062	034E  B9 003D			 mov cx, 3DH
   1063	0351  BA 0900			 mov dx, 900H
   1064	0354  B4 86			 mov ah, 86H
   1065	0356  CD 15			 int 15h
   1066
   1067	0358  E8 FEBC			 call CLEAR_SCREEN
   1068
   1069	035B  5D			 pop bp
   1070	035C  5A			 pop dx
   1071	035D  59			 pop cx
   1072	035E  5B			 pop bx
   1073	035F  58			 pop ax
   1074	0360  C3			 ret
   1075	0361			     endp
   1076
   1077	0361			     RESET_ENEMY proc
   1078	0361  57			 push di
   1079	0362  50			 push ax
   1080	0363  53			 push bx
   1081	0364  52			 push dx
   1082
   1083	0365  8B 3E 001Ar		 mov di, enemy_pos
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 20
MAIN.ASM



   1084	0369  E8 FD87			 call CLEAR_SPRITE
   1085
   1086	036C  33 D2			 xor dx, dx
   1087	036E  B8 0140			 mov ax, 320
   1088
   1089	0371  50			 push ax
   1090
   1091	0372  B4 8C			 mov ah, 140
   1092	0374  E8 FEFE			 call RANDOM_UINT8_RANGE
   1093	0377  33 DB			 xor bx, bx
   1094	0379  8A D8			 mov bl, al
   1095	037B  80 C3 14			 add bl, 20
   1096
   1097	037E  58			 pop ax
   1098
   1099	037F  F7 E3			 mul bx
   1100	0381  05 010E			 add ax, 270
   1101	0384  A3 001Ar			 mov enemy_pos,	ax
   1102
   1103	0387  5A			 pop dx
   1104	0388  5B			 pop bx
   1105	0389  58			 pop ax
   1106	038A  5F			 pop di
   1107	038B  C3			 ret
   1108	038C			     endp
   1109
   1110	038C			     UPDATE_ENEMY proc
   1111	038C  56			 push si
   1112	038D  57			 push di
   1113	038E  50			 push ax
   1114	038F  53			 push bx
   1115
   1116	0390  B8 0100			 mov ax, 0100H
   1117	0393  BE 001Ar			 mov si, offset	enemy_pos
   1118
   1119	0396  8B 3C			 mov di, [si]
   1120	0398  E8 FD58			 call CLEAR_SPRITE
   1121	039B  BB 0001			 mov bx, 1
   1122	039E  E8 FCFF			 call MOVE_SPRITE
   1123	03A1  E8 00E7			 call RENDER_ENEMY
   1124
   1125					 ; cmp shot_count, 0
   1126	03A4  74 2C			 je CHECK_SHIP_COLLISION
   1127
   1128	03A6  33 C9			 xor cx, cx
   1129					 ; mov cl, shot_count
   1130
   1131	03A8			     CHECK_SHOTS_COLLISION:
   1132	03A8  BE 0011r			 mov si, offset	shot_array_pos
   1133	03AB  03 F1			 add si, cx
   1134	03AD  8B 34			 mov si, [si]
   1135	03AF  8B 3E 001Ar		 mov di, enemy_pos
   1136	03B3  51			 push cx
   1137	03B4  E8 FEF0			 call CHECK_COLLISION
   1138	03B7  80 F9 01			 cmp cl, 1
   1139	03BA  59			 pop cx
   1140	03BB  75 13			 jne SKIP_SHOT
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 21
MAIN.ASM



   1141	03BD  C6 06 001Er 01		 mov rerender_score, 1
   1142	03C2  83 06 0005r 64		 add score, 100
   1143	03C7  E8 FD29			 call CLEAR_SPRITE
   1144	03CA  E8 01F9			 call RESET_SHOT
   1145	03CD  E8 FF91			 call RESET_ENEMY
   1146
   1147	03D0			     SKIP_SHOT:
   1148	03D0  E2 D6			 loop CHECK_SHOTS_COLLISION
   1149
   1150
   1151	03D2			     CHECK_SHIP_COLLISION:
   1152	03D2  8B 36 1EA2r		 mov si, ship_pos
   1153	03D6  E8 FECE			 call CHECK_COLLISION
   1154	03D9  80 F9 01			 cmp cl, 1
   1155	03DC  75 3A			 jne RESET_SHIP_COLLISION
   1156
   1157	03DE  8A 26 1EA5r		 mov ah, is_ship_colliding
   1158	03E2  80 FC 01			 cmp ah, 1
   1159	03E5  74 68			 je END_ENEMY_UPDATE
   1160
   1161	03E7  80 3E 1EB6r 00		 cmp allies_db,	0
   1162	03EC  75 03			 jne CONTINUE_COLLISION
   1163	03EE  E8 FE9C			 call SHOW_GAME_OVER
   1164
   1165	03F1			     CONTINUE_COLLISION:
   1166	03F1  C6 06 1EA5r 01		 mov is_ship_colliding,	1
   1167	03F6  8A 26 1EB6r		 mov ah, allies_db
   1168	03FA  D0 EC			 shr ah, 1
   1169	03FC  88 26 1EB6r		 mov allies_db,	ah
   1170	0400  C6 06 001Dr 01		 mov rerender_allies, 1
   1171	0405  C6 06 001Cr 01		 mov rerender_ship, 1
   1172	040A  E8 FF54			 call RESET_ENEMY
   1173	040D  FE 0E 1EA4r		 dec ship_color
   1174	0411  FE 0E 1EB7r		 dec allies_count
   1175	0415  EB 38 90			 jmp END_ENEMY_UPDATE
   1176
   1177	0418			     RESET_SHIP_COLLISION:
   1178	0418  C6 06 1EA5r 00		 mov is_ship_colliding,	0
   1179
   1180	041D			     CHECK_EOS:	; end of screen
   1181	041D  33 D2			 xor dx, dx
   1182	041F  8B C7			 mov ax, di
   1183	0421  BB 0140			 mov bx, 320
   1184	0424  F7 F3			 div bx
   1185	0426  83 FA 00			 cmp dx, 0
   1186	0429  75 24			 jne END_ENEMY_UPDATE
   1187	042B  E8 FF33			 call RESET_ENEMY
   1188	042E  C6 06 001Dr 01		 mov rerender_allies, 1
   1189	0433  C6 06 001Er 01		 mov rerender_score, 1
   1190	0438  33 D2			 xor dx, dx
   1191	043A  B8 000A			 mov ax, 10
   1192	043D  8A 16 0002r		 mov dl, sector
   1193	0441  F7 E2			 mul dx
   1194	0443  29 06 0005r		 sub score, ax
   1195	0447  73 06			 jnc END_ENEMY_UPDATE
   1196	0449  C7 06 0005r 0000		 mov score, 0
   1197
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 22
MAIN.ASM



   1198	044F			     END_ENEMY_UPDATE:
   1199	044F  5B			 pop bx
   1200	0450  58			 pop ax
   1201	0451  5F			 pop di
   1202	0452  5E			 pop si
   1203	0453  C3			 ret
   1204	0454			     endp
   1205
   1206	0454			     RENDER_TERRAIN proc
   1207	0454  53			 push bx
   1208	0455  51			 push cx
   1209	0456  52			 push dx
   1210	0457  57			 push di
   1211	0458  06			 push es
   1212	0459  1E			 push ds
   1213	045A  50			 push ax
   1214
   1215	045B  B8 0000s			 mov ax, @data
   1216	045E  8E D8			 mov ds, ax
   1217
   1218	0460  B8 A000			 mov ax, 0A000h
   1219	0463  8E C0			 mov es, ax
   1220
   1221	0465  BE 0519r			 mov si, offset	terrain
   1222	0468  8B 3E 1E19r		 mov di, terrain_pos
   1223	046C  FF 0E 1E19r		 dec terrain_pos
   1224					 ; mov bx, terrain_pos
   1225	0470  81 3E 1E19r E0FF		 cmp terrain_pos, 320*180 - 1
   1226	0476  75 06			 jnz SKIP_POS_UPDATE
   1227	0478  C7 06 1E19r E23F		 mov terrain_pos, 320*181 - 1
   1228
   1229	047E			     SKIP_POS_UPDATE:
   1230	047E  B9 1900			 mov cx, 320*20
   1231	0481  F3> A4			 rep movsb
   1232
   1233	0483  58			 pop ax
   1234	0484  1F			 pop ds
   1235	0485  07			 pop es
   1236	0486  5F			 pop di
   1237	0487  5A			 pop dx
   1238	0488  59			 pop cx
   1239	0489  5B			 pop bx
   1240	048A  C3			 ret
   1241	048B			     endp
   1242
   1243	048B			     RENDER_ENEMY proc
   1244	048B  56			 push si
   1245	048C  50			 push ax
   1246
   1247	048D  A1 001Ar			 mov ax, enemy_pos
   1248	0490  BE 1EB8r			 mov si, offset	alien_ship
   1249	0493  E8 FC7D			 call RENDER_SPRITE
   1250
   1251	0496  58			 pop ax
   1252	0497  5E			 pop si
   1253	0498  C3			 ret
   1254	0499			     endp
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 23
MAIN.ASM



   1255
   1256	0499			     RESET_SHIP	proc
   1257	0499  C7 06 1EA2r 76E9		 mov ship_pos, 320 * 95	+ 41 ; Ship stating position
   1258	049F  C3			 ret
   1259	04A0			     endp
   1260
   1261	04A0			     RENDER_SHIP proc
   1262	04A0  56			 push si
   1263	04A1  57			 push di
   1264	04A2  53			 push bx
   1265	04A3  50			 push ax
   1266
   1267	04A4  A1 1EA2r			 mov ax, ship_pos
   1268	04A7  8B F8			 mov di, ax
   1269	04A9  E8 FC47			 call CLEAR_SPRITE
   1270
   1271	04AC  BE 1E1Br			 mov si, offset	ship
   1272	04AF  8A 1E 1EA4r		 mov bl, ship_color ; white
   1273	04B3  E8 FC26			 call CHANGE_SPRITE_COLOR
   1274	04B6  E8 FC5A			 call RENDER_SPRITE
   1275
   1276	04B9  58			 pop ax
   1277	04BA  5B			 pop bx
   1278	04BB  5F			 pop di
   1279	04BC  5E			 pop si
   1280	04BD  C3			 ret
   1281	04BE			     endp
   1282
   1283	04BE			     UPDATE_SHIP proc
   1284	04BE  56			 push si
   1285	04BF  57			 push di
   1286	04C0  50			 push ax
   1287	04C1  53			 push bx
   1288
   1289	04C2  B4 01			 mov ah, 1H
   1290	04C4  CD 16			 int 16H
   1291	04C6  74 0A			 jz END_SHIP_UPDATE
   1292
   1293	04C8  E8 FB5C			 call HANDLE_CONTROLS
   1294	04CB  32 E4			 xor ah, ah
   1295	04CD  CD 16			 int 16H
   1296
   1297	04CF  E8 FFCE			 call RENDER_SHIP
   1298
   1299	04D2			     END_SHIP_UPDATE:
   1300
   1301	04D2  5B			 pop bx
   1302	04D3  58			 pop ax
   1303	04D4  5F			 pop di
   1304	04D5  5E			 pop si
   1305	04D6  C3			 ret
   1306	04D7			     endp
   1307
   1308				     ; AX = uint16 value to output
   1309				     ; SI = offset of end off string buffer
   1310				     ; CX = number of digits to	write
   1311	04D7			     CONVERT_UINT16 proc
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 24
MAIN.ASM



   1312	04D7  56			 push si
   1313	04D8  50			 push ax
   1314	04D9  53			 push bx
   1315	04DA  51			 push cx
   1316	04DB  52			 push dx
   1317
   1318	04DC  BB 000A			 mov bx, 10
   1319
   1320	04DF			     LOOP_DIV:
   1321	04DF  33 D2			 xor dx, dx
   1322	04E1  F7 F3			 div bx
   1323
   1324	04E3  80 C2 30			 add dl, '0'
   1325	04E6  88 14			 mov byte ptr ds:[si], dl
   1326	04E8  4E			 dec si
   1327
   1328	04E9  3D 0000			 cmp ax, 0
   1329	04EC  49			 dec cx
   1330	04ED  75 F0			 jnz LOOP_DIV
   1331
   1332	04EF  83 F9 00			 cmp cx, 0
   1333	04F2  74 04			 je END_CONVERSION
   1334
   1335	04F4  B2 30			 mov dl, '0'
   1336	04F6  88 14			 mov byte ptr ds:[si], dl
   1337
   1338	04F8			     END_CONVERSION:
   1339	04F8  5A			 pop dx
   1340	04F9  59			 pop cx
   1341	04FA  5B			 pop bx
   1342	04FB  58			 pop ax
   1343	04FC  5E			 pop si
   1344	04FD  C3			 ret
   1345	04FE			     endp
   1346
   1347	04FE			     RENDER_SCORE proc
   1348	04FE  56			 push si
   1349	04FF  55			 push bp
   1350	0500  50			 push ax
   1351	0501  53			 push bx
   1352	0502  51			 push cx
   1353	0503  52			 push dx
   1354
   1355	0504  BD 0116r			 mov bp, offset	score_str
   1356	0507  B9 0006			 mov cx, score_str_len
   1357	050A  B3 0F			 mov bl, 0FH ; white
   1358	050C  33 D2			 xor dx, dx
   1359	050E  E8 FBB6			 call PRINT_STRING
   1360
   1361	0511  A1 0005r			 mov ax, score
   1362	0514  BE 0007r			 mov si, offset	score_buffer
   1363	0517  83 C6 04			 add si, score_buffer_len - 1
   1364	051A  B9 0005			 mov cx, score_buffer_len
   1365	051D  E8 FFB7			 call CONVERT_UINT16
   1366
   1367	0520  BD 0007r			 mov bp, offset	score_buffer
   1368	0523  B3 02			 mov bl, 02H ; green
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 25
MAIN.ASM



   1369	0525  32 F6			 xor dh, dh
   1370	0527  B2 08			 mov dl, 8
   1371	0529  E8 FB9B			 call PRINT_STRING
   1372
   1373	052C  5A			 pop dx
   1374	052D  59			 pop cx
   1375	052E  5B			 pop bx
   1376	052F  58			 pop ax
   1377	0530  5D			 pop bp
   1378	0531  5E			 pop si
   1379
   1380	0532  C3			 ret
   1381	0533			     endp
   1382
   1383	0533			     RENDER_TIME proc
   1384	0533  55			 push bp
   1385	0534  53			 push bx
   1386	0535  51			 push cx
   1387	0536  52			 push dx
   1388
   1389	0537  BD 011Cr			 mov bp, offset	time_str
   1390	053A  B9 0006			 mov cx, time_str_len
   1391	053D  B3 0F			 mov bl, 0FH ; white
   1392	053F  32 F6			 xor dh, dh
   1393	0541  B2 19			 mov dl, 25
   1394	0543  E8 FB81			 call PRINT_STRING
   1395
   1396	0546  33 C0			 xor ax, ax
   1397	0548  A0 0004r			 mov al, time
   1398	054B  BE 000Cr			 mov si, offset	time_buffer
   1399	054E  83 C6 01			 add si, time_buffer_len - 1
   1400	0551  B9 0002			 mov cx, 2
   1401	0554  E8 FF80			 call CONVERT_UINT16
   1402
   1403	0557  BD 000Cr			 mov bp, offset	time_buffer
   1404	055A  B9 0002			 mov cx, time_buffer_len
   1405	055D  B3 02			 mov bl, 02H ; green
   1406	055F  32 F6			 xor dh, dh
   1407	0561  B2 20			 mov dl, 32
   1408	0563  E8 FB61			 call PRINT_STRING
   1409
   1410	0566  5A			 pop dx
   1411	0567  59			 pop cx
   1412	0568  5B			 pop bx
   1413	0569  5D			 pop bp
   1414
   1415	056A  C3			 ret
   1416	056B			     endp
   1417
   1418	056B			     UPDATE_TIME proc
   1419	056B  50			 push ax
   1420
   1421	056C  8A 26 0003r		 mov ah, timeout
   1422	0570  FE C4			 inc ah
   1423	0572  80 FC 64			 cmp ah, 100
   1424	0575  75 21			 jne SAVE_TIMEOUT
   1425
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 26
MAIN.ASM



   1426	0577  8A 26 0004r		 mov ah, time
   1427	057B  FE CC			 dec ah
   1428	057D  75 13			 jnz SAVE_TIME
   1429
   1430	057F  8A 26 0002r		 mov ah, sector
   1431	0583  FE C4			 inc ah
   1432	0585  88 26 0002r		 mov sector, ah
   1433
   1434	0589  E8 FD77			 call RENDER_SECTOR
   1435	058C  E8 00DE			 call RESET
   1436
   1437	058F  EB 0B 90			 jmp END_TIME
   1438
   1439	0592			     SAVE_TIME:
   1440	0592  88 26 0004r		 mov time, ah
   1441	0596  32 E4			 xor ah, ah
   1442
   1443	0598			     SAVE_TIMEOUT:
   1444	0598  88 26 0003r		 mov timeout, ah
   1445
   1446	059C			     END_TIME:
   1447	059C  58			 pop ax
   1448	059D  C3			 ret
   1449	059E			     endp
   1450
   1451	059E			     SHOOT proc
   1452	059E  56			 push si
   1453	059F  53			 push bx
   1454	05A0  51			 push cx
   1455
   1456					 ; Find	a shot that was	not fired yet
   1457	05A1  33 C9			 xor cx, cx
   1458	05A3  8A 0E 0010r		 mov cl, shot_count
   1459	05A7  BE 0017r			 mov si, offset	shot_array_shoot
   1460	05AA  03 F1			 add si, cx
   1461	05AC  4E			 dec si
   1462
   1463	05AD			     FIND_SHOT:
   1464	05AD  8A 1C			 mov bl, [si]
   1465	05AF  80 FB 00			 cmp bl, 0
   1466	05B2  74 08			 je FOUND_SHOT
   1467	05B4  4E			 dec si
   1468	05B5  E2 F6			 loop FIND_SHOT
   1469
   1470	05B7  83 F9 00			 cmp cx, 0
   1471	05BA  74 06			 je END_SHOOT
   1472
   1473	05BC			     FOUND_SHOT:
   1474	05BC  E8 0007			 call RESET_SHOT
   1475	05BF  C6 04 01			 mov byte ptr [si], 1 ;	Set shot as fired
   1476
   1477	05C2			     END_SHOOT:
   1478	05C2  59			 pop cx
   1479	05C3  5B			 pop bx
   1480	05C4  5E			 pop si
   1481	05C5  C3			 ret
   1482	05C6			     endp
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 27
MAIN.ASM



   1483
   1484				     ; CX = shot id
   1485	05C6			     RESET_SHOT	proc
   1486	05C6  51			 push cx
   1487	05C7  56			 push si
   1488	05C8  57			 push di
   1489	05C9  53			 push bx
   1490
   1491	05CA  49			 dec cx	; Get shot index
   1492	05CB  51			 push cx
   1493	05CC  D1 E1			 shl cx, 1 ; Multiply index by 2 (for word)
   1494	05CE  BE 0011r			 mov si, offset	shot_array_pos ; Get shot position array
   1495	05D1  03 F1			 add si, cx ; Find shot	in array
   1496
   1497	05D3  8B 1E 1EA2r		 mov bx, ship_pos
   1498	05D7  83 C3 0F			 add bx, 15
   1499	05DA  89 1C			 mov [si], bx
   1500
   1501	05DC  8B FB			 mov di, bx ; Set DI to	shot position
   1502	05DE  E8 FB12			 call CLEAR_SPRITE ; Clear shot
   1503
   1504	05E1  BE 0017r			 mov si, offset	shot_array_shoot ; Get shot fired array
   1505	05E4  59			 pop cx
   1506	05E5  03 F1			 add si, cx ; Find shot	in array
   1507	05E7  C6 04 00			 mov byte ptr [si], 0 ;	Set shot as not	fired
   1508
   1509	05EA  5B			 pop bx
   1510	05EB  5F			 pop di
   1511	05EC  5E			 pop si
   1512	05ED  59			 pop cx
   1513	05EE  C3			 ret
   1514	05EF			     endp
   1515
   1516	05EF			     UPDATE_SHOT proc
   1517	05EF  57			 push di
   1518	05F0  56			 push si
   1519	05F1  50			 push ax
   1520	05F2  53			 push bx
   1521	05F3  51			 push cx
   1522	05F4  52			 push dx
   1523
   1524	05F5  33 C9			 xor cx, cx
   1525	05F7  8A 0E 0010r		 mov cl, shot_count
   1526	05FB			     SINGLE_SHOT:
   1527	05FB  8B EC			 mov bp, sp
   1528	05FD  51			 push cx ; [bp - 2]
   1529
   1530					 ; Find	shot index
   1531	05FE  49			 dec cx
   1532	05FF  BE 0017r			 mov si, offset	shot_array_shoot
   1533	0602  03 F1			 add si, cx
   1534	0604  80 3C 01			 cmp byte ptr [si], 1
   1535	0607  75 36			 jne NO_UPDATE
   1536
   1537					 ; Clear shot
   1538	0609  D1 E1			 shl cx, 1 ; Multiply index by 2 (for word array)
   1539	060B  BE 0011r			 mov si, offset	shot_array_pos
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 28
MAIN.ASM



   1540	060E  03 F1			 add si, cx
   1541	0610  8B 3C			 mov di, [si]
   1542	0612  E8 FADE			 call CLEAR_SPRITE
   1543
   1544					 ; Reset shot
   1545	0615  33 D2			 xor dx, dx
   1546	0617  8B C7			 mov ax, di
   1547	0619  05 000F			 add ax, 15
   1548	061C  BB 0140			 mov bx, 320
   1549	061F  F7 F3			 div bx
   1550	0621  83 FA 00			 cmp dx, 0
   1551	0624  75 09			 jne MOVE_SHOT
   1552	0626  8B 4E FE			 mov cx, [bp - 2]
   1553	0629  E8 FF9A			 call RESET_SHOT
   1554	062C  EB 11 90			 jmp NO_UPDATE
   1555
   1556	062F			     MOVE_SHOT:
   1557					 ; Move	shot
   1558	062F  33 C0			 xor ax, ax
   1559	0631  BB 0003			 mov bx, 3
   1560	0634  E8 FA69			 call MOVE_SPRITE
   1561
   1562					 ; Render shot
   1563	0637  8B 04			 mov ax, [si]
   1564	0639  BE 1F41r			 mov si, offset	shot
   1565	063C  E8 FAD4			 call RENDER_SPRITE
   1566
   1567	063F			     NO_UPDATE:
   1568	063F  59			 pop cx
   1569	0640  E2 B9			 loop SINGLE_SHOT
   1570
   1571	0642  8B E5			 mov sp, bp
   1572
   1573	0644  5A			 pop dx
   1574	0645  59			 pop cx
   1575	0646  5B			 pop bx
   1576	0647  58			 pop ax
   1577	0648  5E			 pop si
   1578	0649  5F			 pop di
   1579	064A  C3			 ret
   1580	064B			     endp
   1581
   1582	064B			     RESET_TIME	proc
   1583	064B  50			 push ax
   1584
   1585	064C  32 E4			 xor ah, ah
   1586	064E  88 26 0003r		 mov timeout, ah
   1587	0652  B4 01			 mov ah, 1
   1588	0654  88 26 0004r		 mov time, ah
   1589
   1590	0658  58			 pop ax
   1591	0659			     endp
   1592
   1593	0659			     RESET_RERENDERS proc
   1594	0659  50			 push ax
   1595
   1596	065A  B4 01			 mov ah, 1
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 29
MAIN.ASM



   1597	065C  C6 06 001Cr 01		 mov rerender_ship, 1
   1598	0661  C6 06 001Dr 01		 mov rerender_allies, 1
   1599	0666  C6 06 001Er 01		 mov rerender_score, 1
   1600
   1601	066B  58			 pop ax
   1602	066C  C3			 ret
   1603	066D			     endp
   1604
   1605	066D			     RESET proc	; Contains all procedures for reseting values
   1606	066D  E8 FE29			 call RESET_SHIP
   1607	0670  E8 FCEE			 call RESET_ENEMY
   1608	0673  E8 FFD5			 call RESET_TIME
   1609	0676  E8 FFE0			 call RESET_RERENDERS
   1610	0679  C3			 ret
   1611	067A			     endp
   1612
   1613	067A			     UPDATE proc ; Contains all	procedures for updating	game state
   1614	067A  E8 FE41			 call UPDATE_SHIP
   1615	067D  E8 FEEB			 call UPDATE_TIME
   1616	0680  E8 FF6C			 call UPDATE_SHOT
   1617	0683  E8 FD06			 call UPDATE_ENEMY
   1618	0686  C3			 ret
   1619	0687			     endp
   1620
   1621	0687			     RENDER proc ; Contains all	procedures for rendering game objects
   1622	0687  50			 push ax
   1623	0688  E8 FEA8			 call RENDER_TIME
   1624	068B  E8 FDC6			 call RENDER_TERRAIN
   1625
   1626					 ; should re-render ship?
   1627	068E  A0 001Cr			 mov al, rerender_ship
   1628	0691  3C 00			 cmp al, 0
   1629	0693  74 08			 je SKIP_2_ALLIES
   1630	0695  E8 FE08			 call RENDER_SHIP
   1631	0698  C6 06 001Cr 00		 mov rerender_ship, 0
   1632
   1633	069D			     SKIP_2_ALLIES:
   1634					 ; should re-render allies?
   1635	069D  A0 001Dr			 mov al, rerender_allies
   1636	06A0  3C 01			 cmp al, 1
   1637	06A2  75 08			 jne SKIP_2_SCORE
   1638	06A4  E8 FB2C			 call RENDER_ALLY_SHIPS
   1639	06A7  C6 06 001Dr 00		 mov rerender_allies, 0
   1640
   1641	06AC			     SKIP_2_SCORE:
   1642					 ; should re-render score?
   1643	06AC  A0 001Er			 mov al, rerender_score
   1644	06AF  3C 01			 cmp al, 1
   1645	06B1  75 08			 jne END_RENDER
   1646	06B3  E8 FE48			 call RENDER_SCORE
   1647	06B6  C6 06 001Er 00		 mov rerender_score, 0
   1648
   1649	06BB			     END_RENDER:
   1650	06BB  58			 pop ax
   1651	06BC  C3			 ret
   1652	06BD			     endp
   1653
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 30
MAIN.ASM



   1654	06BD			     END_GAME proc
   1655					 ; Back	to text	mode
   1656	06BD  32 E4			 xor ah, ah
   1657	06BF  B0 03			 mov al, 3h
   1658	06C1  CD 10			 int 10h
   1659
   1660					 ; Ends	program
   1661	06C3  B4 4C			 mov ah, 4ch
   1662	06C5  32 C0			 xor al, al
   1663	06C7  CD 21			 int 21h
   1664	06C9  C3			 ret
   1665	06CA			     endp
   1666
   1667	06CA			     THROTTLE proc
   1668	06CA  50			 push ax
   1669	06CB  51			 push cx
   1670	06CC  52			 push dx
   1671
   1672	06CD  33 C9			 xor cx, cx
   1673	06CF  BA 2710			 mov dx, 2710H
   1674	06D2  B4 86			 mov ah, 86H
   1675	06D4  CD 15			 int 15h
   1676
   1677	06D6  5A			 pop dx
   1678	06D7  59			 pop cx
   1679	06D8  58			 pop ax
   1680	06D9  C3			 ret
   1681	06DA			     endp
   1682
   1683	06DA			     SYSTIME_SEED proc
   1684	06DA  50			 push ax
   1685	06DB  51			 push cx
   1686	06DC  52			 push dx
   1687
   1688	06DD  33 C0			 xor ax, ax
   1689	06DF  CD 1A			 int 1AH
   1690	06E1  89 16 001Fr		 mov seed, dx
   1691
   1692	06E5  5A			 pop dx
   1693	06E6  59			 pop cx
   1694	06E7  58			 pop ax
   1695	06E8  C3			 ret
   1696	06E9			     endp
   1697
   1698	06E9			     MAIN proc
   1699	06E9  B8 0000s			 mov AX, @data
   1700	06EC  8E D8			 mov DS, AX
   1701	06EE  B8 A000			 mov AX, 0A000H
   1702	06F1  8E C0			 mov ES, AX
   1703	06F3  33 FF			 xor DI, DI
   1704
   1705	06F5  E8 FFE2			 call SYSTIME_SEED
   1706
   1707					 ; Define o modo de video
   1708	06F8  32 E4			 xor ah, ah
   1709	06FA  32 FF			 xor bh, bh
   1710	06FC  B0 13			 mov al, 13h
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 31
MAIN.ASM



   1711	06FE  CD 10			 int 10h
   1712
   1713					 ; Exibe título e botões do menu
   1714	0700  E8 F98B			 call PRINT_TITLE_MENU
   1715	0703  E8 FA39			 call PRINT_BUTTONS
   1716	0706  E8 FA6D			 call RESET_CROSS_SHIP_POS
   1717
   1718	0709			     MENU_LOOP:
   1719	0709  E8 FA79			 call CROSS_SHIPS
   1720
   1721					 ; Recebe entrada do usuário
   1722	070C  B4 01			 mov ah, 1H
   1723	070E  CD 16			 int 16H
   1724	0710  74 F7			 jz MENU_LOOP
   1725
   1726					 ; Chama a função de navegação
   1727	0712  E8 F8EB			 call HANDLE_INPUT
   1728
   1729					 ; Condição para iniciar o jogo
   1730	0715  80 FC 1C			 cmp ah, 1CH
   1731	0718  74 06			 je SELECT_OPTION
   1732
   1733					 ; Retorno ao loop do menu
   1734	071A  32 E4			 xor ah, ah
   1735	071C  CD 16			 int 16H
   1736	071E  EB E9			 jmp MENU_LOOP
   1737
   1738	0720			     SELECT_OPTION:
   1739	0720  32 E4			 xor ah, ah
   1740	0722  CD 16			 int 16H
   1741
   1742	0724  8A 26 0000r		 mov ah, menu
   1743	0728  80 FC 01			 cmp ah, 1
   1744	072B  74 14			 je FINISH
   1745
   1746	072D  E8 FBD3			 call RENDER_SECTOR
   1747
   1748	0730  E8 FF3A			 call RESET
   1749	0733  E8 FD6A			 call RENDER_SHIP
   1750
   1751	0736			     GAME_LOOP:
   1752	0736  E8 FF91			 call THROTTLE
   1753	0739  E8 FF3E			 call UPDATE
   1754	073C  E8 FF48			 call RENDER
   1755
   1756	073F  EB F5			 jmp GAME_LOOP
   1757
   1758	0741			     FINISH:
   1759	0741  E8 FF79			 CALL END_GAME
   1760
   1761	0744  C3			 ret
   1762	0745			     endp
   1763
   1764				     end MAIN
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 32
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/12/24"
??FILENAME			  Text	 "MAIN	  "
??TIME				  Text	 "00:48:43"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
AFTER_CLEAR			  Near	 _TEXT:0209
ALIEN_SHIP			  Byte	 DGROUP:1EB8
ALIEN_SHIP_POS			  Word	 DGROUP:1F3F
ALLIES_COUNT			  Byte	 DGROUP:1EB7
ALLIES_DB			  Byte	 DGROUP:1EB6
ALLIES_POS_VEC			  Word	 DGROUP:1EA6
ARROW_DOWN			  Near	 _TEXT:0016
ARROW_UP			  Near	 _TEXT:000D
BTN_INICIAR			  Byte	 DGROUP:0477
BTN_INICIAR_LENGTH		  Number 0051
BTN_SAIR			  Byte	 DGROUP:04C8
BTN_SAIR_LENGTH			  Number 0051
CHANGE_SPRITE_COLOR		  Near	 _TEXT:00DC
CHECK_COLLISION			  Near	 _TEXT:02A7
CHECK_DIRECTION			  Near	 _TEXT:00B5
CHECK_EOS			  Near	 _TEXT:041D
CHECK_SHIP_COLLISION		  Near	 _TEXT:03D2
CHECK_SHOTS_COLLISION		  Near	 _TEXT:03A8
CHECK_X_IN_RANGE		  Near	 _TEXT:02DD
CHECK_Y_IN_RANGE		  Near	 _TEXT:02C3
CLEAR_LINE			  Near	 _TEXT:00FF
CLEAR_SCREEN			  Near	 _TEXT:0217
CLEAR_SPRITE			  Near	 _TEXT:00F3
CONTINUE_COLLISION		  Near	 _TEXT:03F1
CONVERT_UINT16			  Near	 _TEXT:04D7
CROSS_SHIPS			  Near	 _TEXT:0185
DRAW_LINE			  Near	 _TEXT:012B
END_COLLISION			  Near	 _TEXT:02FC
END_CONTROLS			  Near	 _TEXT:0088
END_CONVERSION			  Near	 _TEXT:04F8
END_ENEMY_UPDATE		  Near	 _TEXT:044F
END_GAME			  Near	 _TEXT:06BD
END_HANDLE			  Near	 _TEXT:0026
END_POS_UPDATE			  Near	 _TEXT:01D2
END_RENDER			  Near	 _TEXT:06BB
END_SHIP_UPDATE			  Near	 _TEXT:04D2
END_SHOOT			  Near	 _TEXT:05C2
END_TIME			  Near	 _TEXT:059C
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 33
Symbol Table



ENEMY_POS			  Word	 DGROUP:001A
EXIT_BTN			  Near	 _TEXT:0167
FIND_SHOT			  Near	 _TEXT:05AD
FINISH				  Near	 _TEXT:0741
FIRE				  Near	 _TEXT:0085
FOUND_SHOT			  Near	 _TEXT:05BC
GAME_LOOP			  Near	 _TEXT:0736
GAME_OVER			  Byte	 DGROUP:02EA
GAME_OVER_LEN			  Number 00E7
HANDLE_CONTROLS			  Near	 _TEXT:0027
HANDLE_INPUT			  Near	 _TEXT:0000
IS_SHIP_COLLIDING		  Byte	 DGROUP:1EA5
LOOP_DIV			  Near	 _TEXT:04DF
MAIN				  Near	 _TEXT:06E9
MENU				  Byte	 DGROUP:0000
MENU_LOOP			  Near	 _TEXT:0709
MOVE_ALIEN_SHIP			  Near	 _TEXT:01A9
MOVE_DOWN			  Near	 _TEXT:0068
MOVE_NEGATIVE			  Near	 _TEXT:00BF
MOVE_SHOT			  Near	 _TEXT:062F
MOVE_SPRITE			  Near	 _TEXT:00A0
MOVE_UP				  Near	 _TEXT:004B
MOVE_Y_AXIS			  Near	 _TEXT:00AC
NO_CLEAR			  Near	 _TEXT:0203
NO_UPDATE			  Near	 _TEXT:063F
PIXEL_LOOP			  Near	 _TEXT:00E3
PRINT_BUTTONS			  Near	 _TEXT:013F
PRINT_STRING			  Near	 _TEXT:00C7
PRINT_TITLE_MENU		  Near	 _TEXT:008E
RANDOM_UINT16			  Near	 _TEXT:0265
RANDOM_UINT8_RANGE		  Near	 _TEXT:0275
RENDER				  Near	 _TEXT:0687
RENDER_ALLY_SHIPS		  Near	 _TEXT:01D3
RENDER_BUTTONS			  Near	 _TEXT:001C
RENDER_ENEMY			  Near	 _TEXT:048B
RENDER_SCORE			  Near	 _TEXT:04FE
RENDER_SECTOR			  Near	 _TEXT:0303
RENDER_SHIP			  Near	 _TEXT:04A0
RENDER_SINGLE			  Near	 _TEXT:01E3
RENDER_SPRITE			  Near	 _TEXT:0113
RENDER_TERRAIN			  Near	 _TEXT:0454
RENDER_TIME			  Near	 _TEXT:0533
RERENDER_ALLIES			  Byte	 DGROUP:001D
RERENDER_SCORE			  Byte	 DGROUP:001E
RERENDER_SHIP			  Byte	 DGROUP:001C
RESET				  Near	 _TEXT:066D
RESET_CROSS_SHIP_POS		  Near	 _TEXT:0176
RESET_ENEMY			  Near	 _TEXT:0361
RESET_POS			  Near	 _TEXT:01CF
RESET_RERENDERS			  Near	 _TEXT:0659
RESET_SHIP			  Near	 _TEXT:0499
RESET_SHIP_COLLISION		  Near	 _TEXT:0418
RESET_SHOT			  Near	 _TEXT:05C6
RESET_TIME			  Near	 _TEXT:064B
SAVE_POS			  Near	 _TEXT:00C1
SAVE_TIME			  Near	 _TEXT:0592
SAVE_TIMEOUT			  Near	 _TEXT:0598
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 34
Symbol Table



SCORE				  Word	 DGROUP:0005
SCORE_BUFFER			  Byte	 DGROUP:0007
SCORE_BUFFER_LEN		  Number 0005
SCORE_STR			  Byte	 DGROUP:0116
SCORE_STR_LEN			  Number 0006
SCREEN				  Byte	 DGROUP:0001
SECTOR				  Byte	 DGROUP:0002
SECTOR_LEN			  Number 0098
SECTOR_ONE			  Byte	 DGROUP:0122
SECTOR_THREE			  Byte	 DGROUP:0252
SECTOR_TWO			  Byte	 DGROUP:01BA
SECTOR_VEC			  Word	 DGROUP:0471
SEED				  Word	 DGROUP:001F
SELECT_OPTION			  Near	 _TEXT:0720
SHIP				  Byte	 DGROUP:1E1B
SHIP_COLOR			  Byte	 DGROUP:1EA4
SHIP_POS			  Word	 DGROUP:1EA2
SHIP_SPEED			  Word	 DGROUP:000E
SHOOT				  Near	 _TEXT:059E
SHOT				  Byte	 DGROUP:1F41
SHOT_ARRAY_POS			  Word	 DGROUP:0011
SHOT_ARRAY_SHOOT		  Byte	 DGROUP:0017
SHOT_COUNT			  Byte	 DGROUP:0010
SHOW_GAME_OVER			  Near	 _TEXT:028D
SHOW_YOU_WIN			  Near	 _TEXT:022F
SINGLE_SHOT			  Near	 _TEXT:05FB
SKIP_2_ALLIES			  Near	 _TEXT:069D
SKIP_2_SCORE			  Near	 _TEXT:06AC
SKIP_POS_UPDATE			  Near	 _TEXT:047E
SKIP_REPLACE			  Near	 _TEXT:00EB
SKIP_SHOT			  Near	 _TEXT:03D0
SKIP_X_MAX			  Near	 _TEXT:02E8
SKIP_X_MIN			  Near	 _TEXT:02F6
SKIP_Y_MAX			  Near	 _TEXT:02CB
SKIP_Y_MIN			  Near	 _TEXT:02D9
START_BTN			  Near	 _TEXT:014D
STRING				  Byte	 DGROUP:0021
STRING_LENGTH			  Number 00F5
SUM_POINTS			  Near	 _TEXT:0317
SYSTIME_SEED			  Near	 _TEXT:06DA
TERRAIN				  Byte	 DGROUP:0519
TERRAIN_POS			  Word	 DGROUP:1E19
THROTTLE			  Near	 _TEXT:06CA
TIME				  Byte	 DGROUP:0004
TIMEOUT				  Byte	 DGROUP:0003
TIME_BUFFER			  Byte	 DGROUP:000C
TIME_BUFFER_LEN			  Number 0002
TIME_STR			  Byte	 DGROUP:011C
TIME_STR_LEN			  Number 0006
UPDATE				  Near	 _TEXT:067A
UPDATE_ENEMY			  Near	 _TEXT:038C
UPDATE_SHIP			  Near	 _TEXT:04BE
UPDATE_SHOT			  Near	 _TEXT:05EF
UPDATE_TIME			  Near	 _TEXT:056B
YOU_WIN				  Byte	 DGROUP:03D1
YOU_WIN_LEN			  Number 00A0
Turbo Assembler	 Version 4.1	    12/12/24 00:48:44	    Page 35
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0400 Para	  Stack	  STACK
  _DATA				  16  1FC8 Word	  Public  DATA
_TEXT				  16  0745 Word	  Public  CODE
