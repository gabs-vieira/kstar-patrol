Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 1
MAIN.ASM



      1	0000			     .model small
      2	0000			     .stack
      3
      4	0000			     .data
      5	0000  00			 menu db 0
      6					 ; 0 - Menu
      7					 ; 1 - Setor
      8					 ; 2 - Jogo
      9					 ; 3 - Game Over
     10	0001  00			 screen	db 0
     11	0002  01			 sector	db 1
     12	0003  00			 did_shoot db 0
     13	0004  00			 timeout db 0
     14	0005  3C			 time db 60
     15	0006  0000			 score dw 0
     16
     17	0008  30 30 30 30 30		 score_buffer db '00000'
     18	      =0005			 score_buffer_len equ $-score_buffer
     19
     20	000D  30 30			 time_buffer db	'00'
     21	      =0002			 time_buffer_len equ $-time_buffer
     22
     23	000F  0005			 ship_speed dw 5
     24
     25	0011  23BE			 shot_pos dw 305*30
     26	0013  23BE			 enemy_pos dw 305*30
     27
     28					 ; Re-renders
     29	0015  01			 rerender_ship db 1
     30	0016  01			 rerender_allies db 1
     31	0017  01			 rerender_score	db 1
     32
     33					 ; Strings para	o título e botões
     34	0018  07*(20) 20 5F 20 20 +	 string	 db 7 dup(" ")," _  __	 ___ _		  ",13,10
     35	      5F 5F 20 20 20 5F	5F+
     36	      5F 20 5F 20 20 20	20+
     37	      20 20 20 20 20 20	20+
     38	      20 0D 0A
     39	003B  07*(20) 7C 20 7C 2F +		 db 7 dup(" "),"| |/ /__/ __| |_ __ _ _	_ ",13,10
     40	      20 2F 5F 5F 2F 20	5F+
     41	      5F 7C 20 7C 5F 20	5F+
     42	      5F 20 5F 20 5F 20	5F+
     43	      20 0D 0A
     44	005E  07*(20) 7C 20 27 20 +		 db 7 dup(" "),"| ' <___\__ \  _/ _` | '_|",13,10
     45	      3C 5F 5F 5F 5C 5F	5F+
     46	      20 5C 20 20 5F 2F	20+
     47	      5F 60 20 7C 20 27	5F+
     48	      7C 0D 0A
     49	0081  07*(20) 7C 5F 7C 5C +		 db 7 dup(" "),"|_|\_\	|___/\__\__,_|_|  ",13,10
     50	      5F 5C 20 20 7C 5F	5F+
     51	      5F 2F 5C 5F 5F 5C	5F+
     52	      5F 2C 5F 7C 5F 7C	20+
     53	      20 0D 0A
     54	00A4  07*(20) 7C 20 5F 20 +		 db 7 dup(" "),"| _ \__	_| |_ _	_ ___| |  ",13,10
     55	      5C 5F 5F 20 5F 7C	20+
     56	      7C 5F 20 5F 20 5F	20+
     57	      5F 5F 5F 7C 20 7C	20+
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 2
MAIN.ASM



     58	      20 0D 0A
     59	00C7  07*(20) 7C 20 20 5F +		 db 7 dup(" "),"|  _/ _` |  _| '_/ _ \ |  ",13,10
     60	      2F 20 5F 60 20 7C	20+
     61	      20 5F 7C 20 27 5F	2F+
     62	      20 5F 20 5C 20 7C	20+
     63	      20 0D 0A
     64	00EA  07*(20) 7C 5F 7C 20 +		 db 7 dup(" "),"|_| \__,_|\__|_| \___/_|  ",13,10
     65	      5C 5F 5F 2C 5F 7C	5C+
     66	      5F 5F 7C 5F 7C 20	5C+
     67	      5F 5F 5F 2F 5F 7C	20+
     68	      20 0D 0A
     69
     70	      =00F5			 string_length equ $-string
     71
     72	010D  53 43 4F 52 45 3A		 score_str db "SCORE:"
     73	      =0006			 score_str_len equ $-score_str
     74
     75	0113  54 45 4D 50 4F 3A		 time_str db "TEMPO:"
     76	      =0006			 time_str_len equ $-time_str
     77
     78	0119  05*(20) 20 5F 5F 5F +	 sector_one  db	5 dup("	"), " ___	_	       _    ",13,10
     79	      20 20 20 20 20 20	20+
     80	      5F 20 20 20 20 20	20+
     81	      20 20 20 20 20 20	20+
     82	      20 5F 20 20 20 20	0D+
     83	      0A
     84	013F  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   /	|   ",13,10
     85	      7C 20 5F 5F 5F 20	7C+
     86	      20 7C 5F 20 5F 5F	5F+
     87	      20 5F 20 5F 20 20	20+
     88	      2F 20 7C 20 20 20	0D+
     89	      0A
     90	0165  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|  |	|   ",13,10
     91	      5C 2F 20 2D 5F 29	7C+
     92	      20 20 5F 2F 20 5F	20+
     93	      5C 20 27 5F 7C 20	20+
     94	      7C 20 7C 20 20 20	0D+
     95	      0A
     96	018B  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    |_|   ",13,10
     97	      2F 5C 5F 5F 5F 5C	20+
     98	      5C 5F 5F 5C 5F 5F	5F+
     99	      2F 5F 7C 20 20 20	20+
    100	      7C 5F 7C 20 20 20	0D+
    101	      0A
    102
    103	01B1  05*(20) 20 5F 5F 5F +	 sector_two  db	5 dup("	"), " ___	_	       ___  ",13,10
    104	      20 20 20 20 20 20	20+
    105	      5F 20 20 20 20 20	20+
    106	      20 20 20 20 20 20	20+
    107	      20 5F 5F 5F 20 20	0D+
    108	      0A
    109	01D7  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   |_  ) ",13,10
    110	      7C 20 5F 5F 5F 20	7C+
    111	      20 7C 5F 20 5F 5F	5F+
    112	      20 5F 20 5F 20 20	20+
    113	      7C 5F 20 20 29 20	0D+
    114	      0A
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 3
MAIN.ASM



    115	01FD  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|   / /  ",13,10
    116	      5C 2F 20 2D 5F 29	7C+
    117	      20 20 5F 2F 20 5F	20+
    118	      5C 20 27 5F 7C 20	20+
    119	      20 2F 20 2F 20 20	0D+
    120	      0A
    121	0223  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    /___| ",13,10
    122	      2F 5C 5F 5F 5F 5C	20+
    123	      5C 5F 5F 5C 5F 5F	5F+
    124	      2F 5F 7C 20 20 20	20+
    125	      2F 5F 5F 5F 7C 20	0D+
    126	      0A
    127
    128	0249  05*(20) 20 5F 5F 5F +	 sector_three	 db 5 dup(" "),	" ___	    _		   ____	",13,10
    129	      20 20 20 20 20 20	20+
    130	      5F 20 20 20 20 20	20+
    131	      20 20 20 20 20 20	20+
    132	      20 5F 5F 5F 5F 20	0D+
    133	      0A
    134	026F  05*(20) 2F 20 5F 5F +			 db 5 dup(" "),	"/ __| ___ | |_	___ _ _	  |__ /	",13,10
    135	      7C 20 5F 5F 5F 20	7C+
    136	      20 7C 5F 20 5F 5F	5F+
    137	      20 5F 20 5F 20 20	20+
    138	      7C 5F 5F 20 2F 20	0D+
    139	      0A
    140	0295  05*(20) 5C 5F 5F 20 +			 db 5 dup(" "),	"\__ \/	-_)|  _/ _ \ '_|   |_ \	",13,10
    141	      5C 2F 20 2D 5F 29	7C+
    142	      20 20 5F 2F 20 5F	20+
    143	      5C 20 27 5F 7C 20	20+
    144	      20 7C 5F 20 5C 20	0D+
    145	      0A
    146	02BB  05*(20) 7C 5F 5F 5F +			 db 5 dup(" "),	"|___/\___\ \__\___/_|	  |___/	",13,10
    147	      2F 5C 5F 5F 5F 5C	20+
    148	      5C 5F 5F 5C 5F 5F	5F+
    149	      2F 5F 7C 20 20 20	20+
    150	      7C 5F 5F 5F 2F 20	0D+
    151	      0A
    152
    153	      =0098			 sector_len equ	$-sector_three
    154
    155	02E1  0119r 01B1r 0249r		 sector_vec dw offset sector_one, offset sector_two, offset sector_three
    156
    157	02E7  0E*(20) DA C4 C4 C4 +	 btn_iniciar db	 14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    158	      C4 C4 C4 C4 C4 C4	BF+
    159	      0D 0A
    160	0302  0E*(20) B3 20 49 4E +		      db 14 dup(" "),179," INICIAR ",179,10,13
    161	      49 43 49 41 52 20	B3+
    162	      0A 0D
    163	031D  0E*(20) C0 C4 C4 C4 +		      db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    164	      C4 C4 C4 C4 C4 C4	D9+
    165	      0D 0A
    166
    167	      =0051			 btn_iniciar_length equ	$-btn_iniciar
    168
    169	0338  0E*(20) DA C4 C4 C4 +	 btn_sair db  14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    170	      C4 C4 C4 C4 C4 C4	BF+
    171	      0D 0A
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 4
MAIN.ASM



    172	0353  0E*(20) B3 20 20 53 +		   db 14 dup(" "),179,"	 SAIR	",179,10,13
    173	      41 49 52 20 20 20	B3+
    174	      0A 0D
    175	036E  0E*(20) C0 C4 C4 C4 +		   db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    176	      C4 C4 C4 C4 C4 C4	D9+
    177	      0D 0A
    178
    179	      =0051			 btn_sair_length equ $-btn_sair
    180
    181	0389  0F 0F 0F 0F 0F 0F	0F+	 ship	     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    182	      0F 0F 0F 0F 0F 00	00+
    183	      00
    184	0398  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    185	      00 00 00 00 00 00	00+
    186	      00
    187	03A7  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    188	      00 00 00 00 00 00	00+
    189	      00
    190	03B6  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    191	      0F 00 00 00 00 00	00+
    192	      00
    193	03C5  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,15,15,15,15,15,15,15
    194	      0F 0F 0F 0F 0F 0F	0F+
    195	      0F
    196	03D4  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    197	      0F 00 00 00 00 00	00+
    198	      00
    199	03E3  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    200	      00 00 00 00 00 00	00+
    201	      00
    202	03F2  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    203	      00 00 00 00 00 00	00+
    204	      00
    205	0401  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    206	      0F 0F 0F 0F 0F 00	00+
    207	      00
    208
    209	0410  0000			 ship_pos dw 0
    210	0412  0F			 ship_color db 0FH
    211	0413  00			 is_ship_colliding db 0
    212
    213	0414  1900 3200	4B00 6400 +	 allies_pos_vec	dw 320 * 20, 320 * 40, 320 * 60, 320 * 80, 320 * 100, 320 * 120, 320 * 140, +
    214	      7D00 9600	AF00 C800    320 * 160
    215
    216					 ; each	bit represents an ally ship
    217	0424  FF			 allies_db db 0FFH ; 1111_1111b
    218
    219	0425  00 00 00 00 00 00	00+	 alien_ship  db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    220	      00 09 09 09 09 09	09+
    221	      09
    222	0434  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    223	      00 09 09 00 00 00	00+
    224	      00
    225	0443  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    226	      00 00 00 00 00 00	00+
    227	      00
    228	0452  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 5
MAIN.ASM



    229	      09 00 00 00 00 00	00+
    230	      00
    231	0461  09 09 09 09 09 09	09+		     db	9,9,9,9,9,9,9,9,9,9,9,9,0,0,0
    232	      09 09 09 09 09 00	00+
    233	      00
    234	0470  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    235	      09 00 00 00 00 00	00+
    236	      00
    237	047F  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    238	      00 00 00 00 00 00	00+
    239	      00
    240	048E  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    241	      00 09 09 00 00 00	00+
    242	      00
    243	049D  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    244	      00 09 09 09 09 09	09+
    245	      09
    246
    247	04AC  0000			 alien_ship_pos	dw 0
    248
    249	04AE  0F 0F 0F 0F 0F 0F	0F+	 shot	     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    250	      0F 0F 00 00 00 00	00+
    251	      00
    252	04BD  0F*(00)				     db	15 dup (0)
    253	04CC  0F*(00)				     db	15 dup (0)
    254	04DB  0F*(00)				     db	15 dup (0)
    255	04EA  00 00 00 00 00 00	0F+		     db	0,0,0,0,0,0,15,15,15,15,15,15,15,15,15
    256	      0F 0F 0F 0F 0F 0F	0F+
    257	      0F
    258	04F9  0F*(00)				     db	15 dup (0)
    259	0508  0F*(00)				     db	15 dup (0)
    260	0517  0F*(00)				     db	15 dup (0)
    261	0526  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    262	      0F 0F 00 00 00 00	00+
    263	      00
    264
    265	0535			     .code
    266				     ; Procedimento para navegação no	menu usando as setas
    267	0000			     HANDLE_INPUT PROC
    268	0000  80 FC 48			 cmp ah, 48H
    269	0003  74 08			 je ARROW_UP
    270
    271	0005  80 FC 50			 cmp ah, 50H
    272	0008  74 0C			 je ARROW_DOWN
    273
    274	000A  EB 1A 90			 jmp END_HANDLE
    275
    276	000D			     ARROW_UP:
    277	000D  32 E4			 xor ah, ah
    278	000F  88 26 0000r		 mov menu, ah
    279
    280	0013  EB 07 90			 jmp RENDER_BUTTONS
    281
    282	0016			     ARROW_DOWN:
    283	0016  B4 01			 mov ah, 1
    284	0018  88 26 0000r		 mov menu, ah
    285
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 6
MAIN.ASM



    286	001C			     RENDER_BUTTONS:
    287	001C  A0 0001r			 mov al, screen
    288	001F  3C 00			 cmp al, 0
    289	0021  75 03			 jne END_HANDLE
    290	0023  E8 0125			 call PRINT_BUTTONS
    291
    292	0026			     END_HANDLE:
    293	0026  C3			 ret
    294	0027			     ENDP
    295
    296
    297
    298				     ; Proc para controle da nave
    299	0027			     HANDLE_CONTROLS proc
    300	0027  56			 push si
    301	0028  57			 push di
    302	0029  50			 push ax
    303	002A  53			 push bx
    304
    305	002B  BE 0410r			 mov si, offset	ship_pos
    306	002E  8B 3C			 mov di, [si]
    307
    308	0030  80 FC 48			 cmp ah, 48H
    309	0033  74 15			 je MOVE_UP
    310
    311	0035  80 FC 50			 cmp ah, 50H
    312	0038  74 2D			 je MOVE_DOWN
    313
    314	003A  80 FC 39			 cmp ah, 39H
    315	003D  74 45			 je SHOOT
    316
    317	003F  3C 71			 cmp al, 'q'
    318	0041  75 52			 jne END_CONTROLS
    319
    320	0043  33 C0			 xor ax, ax
    321	0045  CD 16			 int 16h
    322	0047  E8 0509			 call END_GAME
    323
    324	004A			     MOVE_UP:
    325	004A  B0 01			 mov al, 1
    326	004C  E8 00B0			 call CLEAR_SPRITE
    327
    328	004F  8B 1E 0410r		 mov bx, [ship_pos]
    329	0053  81 FB 192F		 cmp bx, 320 * 20 + 47
    330	0057  72 3C			 jb END_CONTROLS
    331	0059  74 3A			 je END_CONTROLS
    332
    333	005B  B4 01			 mov ah, 1
    334	005D  8B 1E 000Fr		 mov bx, ship_speed
    335	0061  E8 0048			 call MOVE_SPRITE
    336	0064  EB 2F 90			 jmp END_CONTROLS
    337
    338	0067			     MOVE_DOWN:
    339	0067  B0 01			 mov al, 1
    340	0069  E8 0093			 call CLEAR_SPRITE
    341
    342	006C  8B 1E 0410r		 mov bx, [ship_pos]
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 7
MAIN.ASM



    343	0070  81 FB C82F		 cmp bx, 320 * 160 + 47
    344	0074  74 1F			 je END_CONTROLS
    345	0076  77 1D			 ja END_CONTROLS
    346
    347	0078  32 E4			 xor ah, ah
    348	007A  8B 1E 000Fr		 mov bx, ship_speed
    349	007E  E8 002B			 call MOVE_SPRITE
    350	0081  EB 12 90			 jmp END_CONTROLS
    351
    352	0084			     SHOOT:
    353	0084  8A 26 0003r		 mov ah, did_shoot
    354	0088  80 FC 01			 cmp ah, 1
    355	008B  74 08			 je END_CONTROLS
    356
    357	008D  E8 03F1			 call RESET_SHOT
    358	0090  C6 06 0003r 01		 mov did_shoot,	1
    359
    360	0095			     END_CONTROLS:
    361	0095  5B			 pop bx
    362	0096  58			 pop ax
    363	0097  5F			 pop di
    364	0098  5E			 pop si
    365	0099  C3			 ret
    366	009A			     endp
    367
    368	009A			     PRINT_TITLE_MENU proc
    369	009A  8C D8			 mov ax, ds
    370	009C  8E C0			 mov es, ax
    371
    372	009E  BD 0018r			 mov bp, offset	string
    373	00A1  B9 00F5			 mov cx, string_length ; tamanho
    374	00A4  B3 02			 mov bl, 02H ; Cor verde (se bit 1 de AL estiver limpo,	usamos BL)
    375	00A6  33 D2			 xor dx, dx ;linha / coluna
    376	00A8  E8 0028			 call PRINT_STRING
    377
    378	00AB  C3			 ret
    379	00AC			     endp
    380
    381				     ; AL = axis (0 is X, 1 is Y)
    382				     ; AH = direction (0 is positive, 1	is negative)
    383				     ; SI = position pointer
    384				     ; BX = increment
    385	00AC			     MOVE_SPRITE proc
    386	00AC  56			 push si
    387	00AD  50			 push ax
    388	00AE  53			 push bx
    389
    390	00AF  8B 0C			 mov cx, [si]
    391	00B1  3C 00			 cmp al, 0
    392	00B3  75 03			 jne MOVE_Y_AXIS
    393	00B5  EB 0A 90			 jmp CHECK_DIRECTION
    394
    395	00B8			     MOVE_Y_AXIS:
    396	00B8  50			 push ax
    397	00B9  B8 0140			 mov ax, 320
    398	00BC  F7 E3			 mul bx
    399	00BE  8B D8			 mov bx, ax
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 8
MAIN.ASM



    400	00C0  58			 pop ax
    401
    402	00C1			     CHECK_DIRECTION:
    403	00C1  80 FC 00			 cmp ah, 0
    404	00C4  75 05			 jne MOVE_NEGATIVE
    405	00C6  03 CB			 add cx, bx
    406	00C8  EB 03 90			 jmp SAVE_POS
    407
    408	00CB			     MOVE_NEGATIVE:
    409	00CB  2B CB			 sub cx, bx
    410
    411	00CD			     SAVE_POS:
    412	00CD  89 0C			 mov [si], cx
    413
    414	00CF  5B			 pop bx
    415	00D0  58			 pop ax
    416	00D1  5E			 pop si
    417	00D2  C3			 ret
    418	00D3			     endp
    419
    420	00D3			     PRINT_STRING PROC
    421	00D3  50			 push AX
    422	00D4  53			 push BX
    423	00D5  1E			 push DS
    424	00D6  06			 push ES
    425	00D7  56			 push SI
    426	00D8  55			 push BP
    427
    428					 ; Configura os	parâmetros para a função 13h
    429	00D9  B4 13			 mov ah, 13h	     ; Função	para escrever string com atributos de cor
    430	00DB  B0 01			 mov al, 1	     ; Modo: atualiza cursor após a escrita
    431							     ; AL = 1 -> modo de atualização de cursor
    432	00DD  32 FF			 xor bh, bh	      ;	Página	de vídeo 0
    433	00DF  CD 10			 int 10h	     ; Chamada de interrupção	para exibir a string
    434
    435	00E1  5D			 pop BP
    436	00E2  5E			 pop SI
    437	00E3  07			 pop ES
    438	00E4  1F			 pop DS
    439	00E5  5B			 pop BX
    440	00E6  58			 pop AX
    441	00E7  C3			 ret
    442	00E8			     ENDP
    443
    444				     ; SI = sprite pointer
    445				     ; BL = color
    446	00E8			     CHANGE_SPRITE_COLOR proc
    447	00E8  50			 push ax
    448	00E9  53			 push bx
    449	00EA  51			 push cx
    450	00EB  56			 push si
    451
    452	00EC  B9 0087			 mov cx, 15*9
    453
    454	00EF			     PIXEL_LOOP:
    455	00EF  8A 04			 mov al, [si]
    456	00F1  3C 00			 cmp al, 0
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 9
MAIN.ASM



    457	00F3  74 02			 jz SKIP_REPLACE
    458	00F5  88 1C			 mov [si], bl
    459
    460	00F7			     SKIP_REPLACE:
    461	00F7  46			 inc si
    462	00F8  E2 F5			 loop PIXEL_LOOP
    463
    464	00FA  5E			 pop si
    465	00FB  59			 pop cx
    466	00FC  5B			 pop bx
    467	00FD  58			 pop ax
    468	00FE  C3			 ret
    469	00FF			     endp
    470
    471				     ; DI = sprite position
    472	00FF			     CLEAR_SPRITE proc
    473	00FF  50			 push ax
    474	0100  51			 push cx
    475	0101  57			 push di
    476	0102  06			 push es
    477
    478	0103  B8 A000			 mov ax, 0A000H
    479	0106  8E C0			 mov es, ax
    480	0108  B9 0009			 mov cx, 9
    481
    482	010B			     CLEAR_LINE:
    483	010B  51			 push cx
    484	010C  B9 000F			 mov cx, 15
    485	010F  33 C0			 xor ax, ax
    486	0111  F3> AA			 rep stosb
    487	0113  81 C7 0131		 add di, 305
    488	0117  59			 pop cx
    489	0118  E2 F1			 loop CLEAR_LINE
    490
    491	011A  07			 pop es
    492	011B  5F			 pop di
    493	011C  59			 pop cx
    494	011D  58			 pop ax
    495	011E  C3			 ret
    496	011F			     endp
    497
    498				     ; AX = sprite position
    499				     ; SI = sprite pointer
    500	011F			     RENDER_SPRITE proc
    501	011F  53			 push bx
    502	0120  51			 push cx
    503	0121  52			 push dx
    504	0122  57			 push di
    505	0123  06			 push es
    506	0124  1E			 push ds
    507	0125  50			 push ax
    508
    509	0126  B8 0000s			 mov ax, @data
    510	0129  8E D8			 mov ds, ax
    511
    512	012B  B8 A000			 mov ax, 0A000h
    513	012E  8E C0			 mov es, ax
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 10
MAIN.ASM



    514
    515	0130  58			 pop ax
    516	0131  8B F8			 mov di, ax
    517	0133  BA 0009			 mov dx, 9
    518	0136  50			 push ax
    519
    520	0137			     DRAW_LINE:
    521	0137  B9 000F			 mov cx, 15
    522	013A  F3> A4			 rep movsb
    523	013C  81 C7 0131		 add di, 320 - 15
    524	0140  4A			 dec dx
    525	0141  75 F4			 jnz DRAW_LINE
    526
    527	0143  58			 pop ax
    528	0144  1F			 pop ds
    529	0145  07			 pop es
    530	0146  5F			 pop di
    531	0147  5A			 pop dx
    532	0148  59			 pop cx
    533	0149  5B			 pop bx
    534	014A  C3		     ret
    535	014B			     endp
    536
    537				     ; Procedimento para exibir	os botões INICIAR e SAIR
    538	014B			     PRINT_BUTTONS proc
    539	014B  50			 push ax
    540	014C  B3 0F			 mov bl, 0FH
    541	014E  8A 26 0000r		 mov ah, menu
    542	0152  80 FC 00			 cmp ah, 0
    543	0155  75 02			 jne START_BTN
    544	0157  B3 0C			 mov bl, 0CH
    545
    546	0159			     START_BTN:
    547					 ; Exibe o botão INICIAR
    548	0159  BD 02E7r			 mov bp, offset	btn_iniciar
    549	015C  B9 0051			 mov cx, btn_iniciar_length ; tamanho
    550	015F  32 D2			 xor dl, dl ; coluna
    551	0161  B6 12			 mov dh, 18 ; linha
    552	0163  E8 FF6D			 call PRINT_STRING
    553
    554	0166  B3 0F			 mov bl, 0FH
    555	0168  8A 26 0000r		 mov ah, menu
    556	016C  80 FC 01			 cmp ah, 1
    557	016F  75 02			 jne EXIT_BTN
    558	0171  B3 0C			 mov bl, 0CH
    559
    560	0173			     EXIT_BTN:
    561	0173  BD 0338r			 mov bp, offset	btn_sair
    562	0176  B9 0051			 mov cx, btn_sair_length
    563	0179  32 D2			 xor dl, dl ; coluna
    564	017B  B6 15			 mov dh, 21 ; linha
    565	017D  E8 FF53			 call PRINT_STRING
    566
    567	0180  58			 pop ax
    568	0181  C3			 ret
    569	0182			     endp
    570
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 11
MAIN.ASM



    571	0182			     RESET_CROSS_SHIP_POS proc
    572	0182  50			 push ax
    573
    574	0183  B8 7D00			 mov ax, 100 * 320
    575	0186  A3 0410r			 mov ship_pos, ax
    576	0189  05 0131			 add ax, 305
    577	018C  A3 04ACr			 mov alien_ship_pos, ax
    578
    579	018F  58			 pop ax
    580	0190  C3			 ret
    581	0191			     endp
    582
    583	0191			     CROSS_SHIPS proc
    584	0191  A1 0410r			 mov ax, ship_pos
    585	0194  8B F8			 mov di, ax
    586	0196  E8 FF66			 call CLEAR_SPRITE
    587
    588	0199  3D 7E31			 cmp ax, 101*320-15
    589	019C  74 17			 je MOVE_ALIEN_SHIP
    590
    591	019E  FF 06 0410r		 inc ship_pos
    592	01A2  40			 inc ax
    593	01A3  BE 0389r			 mov si, offset	ship
    594	01A6  E8 FF76			 call RENDER_SPRITE
    595
    596	01A9  33 C9			 xor cx, cx
    597	01AB  BA C350			 mov dx, 0C350H
    598	01AE  B4 86			 mov ah, 86H
    599	01B0  CD 15			 int 15h
    600	01B2  EB 2A 90			 jmp END_POS_UPDATE
    601
    602	01B5			     MOVE_ALIEN_SHIP:
    603	01B5  A1 04ACr			 mov ax, alien_ship_pos
    604	01B8  8B F8			 mov di, ax
    605
    606	01BA  50			 push ax
    607	01BB  3D 7D00			 cmp ax, 100*320
    608	01BE  58			 pop ax
    609
    610	01BF  74 1A			 je RESET_POS
    611	01C1  E8 FF3B			 call CLEAR_SPRITE
    612
    613	01C4  FF 0E 04ACr		 dec alien_ship_pos
    614	01C8  48			 dec ax
    615	01C9  BE 0425r			 mov si, offset	alien_ship
    616	01CC  E8 FF50			 call RENDER_SPRITE
    617
    618	01CF  33 C9			 xor cx, cx
    619	01D1  BA C350			 mov dx, 0C350H
    620	01D4  B4 86			 mov ah, 86H
    621	01D6  CD 15			 int 15h
    622	01D8  EB 04 90			 jmp END_POS_UPDATE
    623
    624	01DB			     RESET_POS:
    625	01DB  E8 FFA4			 call RESET_CROSS_SHIP_POS
    626
    627	01DE			     END_POS_UPDATE:
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 12
MAIN.ASM



    628	01DE  C3			 ret
    629	01DF			     endp
    630
    631	01DF			     RENDER_ALLY_SHIPS proc
    632	01DF  56			 push si
    633	01E0  57			 push di
    634	01E1  52			 push dx
    635	01E2  51			 push cx
    636	01E3  53			 push bx
    637	01E4  50			 push ax
    638
    639	01E5  B9 0008			 mov cx, 8
    640	01E8  BB 0414r			 mov bx, offset	allies_pos_vec
    641	01EB  8A 16 0424r		 mov dl, allies_db
    642
    643	01EF			     RENDER_SINGLE:
    644	01EF  8B 07			 mov ax, [bx]
    645	01F1  BE 0389r			 mov si, offset	ship
    646
    647	01F4  51			 push cx
    648	01F5  53			 push bx
    649	01F6  50			 push ax
    650
    651					 ; get color based on iteration
    652	01F7  8A D9			 mov bl, cl
    653	01F9  80 C3 06			 add bl, 6
    654
    655	01FC  FE C9			 dec cl
    656	01FE  B0 01			 mov al, 1
    657	0200  D2 E0			 shl al, cl
    658	0202  22 C2			 and al, dl
    659
    660	0204  58			 pop ax
    661	0205  75 08			 jnz NO_CLEAR
    662	0207  8B F8			 mov di, ax
    663	0209  E8 FEF3			 call CLEAR_SPRITE
    664	020C  EB 07 90			 jmp AFTER_CLEAR
    665
    666	020F			     NO_CLEAR:
    667	020F  E8 FED6			 call CHANGE_SPRITE_COLOR
    668	0212  E8 FF0A			 call RENDER_SPRITE
    669
    670	0215			     AFTER_CLEAR:
    671	0215  5B			 pop bx
    672	0216  59			 pop cx
    673	0217  83 C3 02			 add bx, 2
    674	021A  E2 D3			 loop RENDER_SINGLE
    675
    676	021C  58			 pop ax
    677	021D  5B			 pop bx
    678	021E  59			 pop cx
    679	021F  5A			 pop dx
    680	0220  5F			 pop di
    681	0221  5E			 pop si
    682	0222  C3			 ret
    683	0223			     endp
    684
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 13
MAIN.ASM



    685	0223			     CLEAR_SCREEN proc
    686	0223  50			 push ax
    687	0224  51			 push cx
    688	0225  06			 push es
    689	0226  57			 push di
    690
    691	0227  B8 A000			 mov ax,0A000h
    692	022A  8E C0			 mov es,ax
    693	022C  33 FF			 xor di, di
    694	022E  B9 7D00			 mov cx, 32000d
    695	0231  FC			 cld
    696	0232  33 C0			 xor ax, ax
    697	0234  F3> AB			 rep stosw
    698
    699	0236  5F			 pop di
    700	0237  07			 pop es
    701	0238  59			 pop cx
    702	0239  58			 pop ax
    703	023A  C3			 ret
    704	023B			     endp
    705
    706				     ; SI = first position
    707				     ; DI = second position
    708				     ; return CL = 1 if	positions collide
    709	023B			     CHECK_COLLISION proc
    710	023B  55			 push bp
    711	023C  50			 push ax
    712	023D  53			 push bx
    713	023E  52			 push dx
    714
    715	023F  8B EC			 mov bp, sp
    716
    717	0241  33 D2			 xor dx, dx
    718	0243  32 C9			 xor cl, cl
    719	0245  BB 0140			 mov bx, 320
    720
    721	0248  8B C6			 mov ax, si
    722	024A  33 D2			 xor dx, dx
    723	024C  F7 F3			 div bx
    724
    725	024E  52			 push dx ; value of X1 - [bp-2]
    726	024F  50			 push ax ; value of Y1 - [bp-4]
    727
    728	0250  8B C7			 mov ax, di
    729	0252  33 D2			 xor dx, dx
    730	0254  F7 F3			 div bx
    731
    732	0256  52			 push dx ; value of X2 - [bp-6]
    733
    734	0257			     CHECK_Y_IN_RANGE:
    735	0257  05 0009			 add ax, 9
    736	025A  73 03			 jnc SKIP_Y_MAX
    737	025C  B8 FFFF			 mov ax, 0FFFFH
    738
    739	025F			     SKIP_Y_MAX:
    740	025F  8B 56 FC			 mov dx, [bp - 4]
    741	0262  3B D0			 cmp dx, ax
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 14
MAIN.ASM



    742	0264  77 2A			 ja END_COLLISION
    743
    744	0266  2D 0012			 sub ax, 18
    745	0269  73 02			 jnc SKIP_Y_MIN
    746	026B  33 C0			 xor ax, ax
    747
    748	026D			     SKIP_Y_MIN:
    749	026D  3B D0			 cmp dx, ax
    750	026F  72 1F			 jb END_COLLISION
    751
    752	0271			     CHECK_X_IN_RANGE:
    753	0271  8B 46 FE			 mov ax, [bp - 2]
    754	0274  05 000F			 add ax, 15
    755	0277  73 03			 jnc SKIP_X_MAX
    756	0279  B8 FFFF			 mov ax, 0FFFFH
    757
    758	027C			     SKIP_X_MAX:
    759	027C  8B 56 FA			 mov dx, [bp - 6]
    760	027F  3B D0			 cmp dx, ax
    761	0281  77 0D			 ja END_COLLISION
    762
    763	0283  2D 001E			 sub ax, 30
    764	0286  73 02			 jnc SKIP_X_MIN
    765	0288  33 C0			 xor ax, ax
    766
    767	028A			     SKIP_X_MIN:
    768	028A  3B D0			 cmp dx, ax
    769	028C  72 02			 jb END_COLLISION
    770
    771	028E  B1 01			 mov cl, 1
    772
    773	0290			     END_COLLISION:
    774
    775	0290  8B E5			 mov sp, bp
    776
    777	0292  5A			 pop dx
    778	0293  5B			 pop bx
    779	0294  58			 pop ax
    780	0295  5D			 pop bp
    781	0296  C3			 ret
    782	0297			     endp
    783
    784	0297			     RENDER_SECTOR proc
    785	0297  50			 push ax
    786	0298  53			 push bx
    787	0299  51			 push cx
    788	029A  52			 push dx
    789	029B  55			 push bp
    790
    791	029C  E8 FF84			 call CLEAR_SCREEN
    792
    793					 ; Print Sector
    794	029F  A0 0002r			 mov al, sector
    795	02A2  32 E4			 xor ah, ah
    796	02A4  FE C8			 dec al	; number vector	index
    797
    798	02A6  D0 E0			 shl al, 1 ; multiply by 2 (since num_vec values are dw)
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 15
MAIN.ASM



    799	02A8  BB 02E1r			 mov bx, offset	sector_vec ; get the vector
    800	02AB  03 D8			 add bx, ax ; add the index to the vector ptr
    801	02AD  8B 2F			 mov bp, [bx] ;	set BP to base address of number
    802	02AF  B9 0098			 mov cx, sector_len
    803	02B2  32 D2			 xor dl, dl; line
    804	02B4  B6 0A			 mov dh, 10
    805	02B6  B3 0D			 mov bl, 0DH
    806	02B8  E8 FE18			 call PRINT_STRING
    807
    808					 ; Wait	4s
    809	02BB  B9 003D			 mov cx, 3DH
    810	02BE  BA 0900			 mov dx, 900H
    811	02C1  B4 86			 mov ah, 86H
    812	02C3  CD 15			 int 15h
    813
    814	02C5  E8 FF5B			 call CLEAR_SCREEN
    815
    816	02C8  5D			 pop bp
    817	02C9  5A			 pop dx
    818	02CA  59			 pop cx
    819	02CB  5B			 pop bx
    820	02CC  58			 pop ax
    821	02CD  C3			 ret
    822	02CE			     endp
    823
    824	02CE			     RESET_ENEMY proc
    825	02CE  57			 push di
    826	02CF  50			 push ax
    827	02D0  53			 push bx
    828	02D1  52			 push dx
    829
    830	02D2  8B 3E 0013r		 mov di, enemy_pos
    831	02D6  E8 FE26			 call CLEAR_SPRITE
    832
    833	02D9  33 D2			 xor dx, dx
    834	02DB  B8 0140			 mov ax, 320
    835	02DE  BB 005F			 mov bx, 95 ; Make this	one random
    836	02E1  F7 E3			 mul bx
    837	02E3  05 00C8			 add ax, 200
    838	02E6  A3 0013r			 mov enemy_pos,	ax
    839
    840	02E9  5A			 pop dx
    841	02EA  5B			 pop bx
    842	02EB  58			 pop ax
    843	02EC  5F			 pop di
    844	02ED  C3			 ret
    845	02EE			     endp
    846
    847	02EE			     UPDATE_ENEMY proc
    848	02EE  56			 push si
    849	02EF  57			 push di
    850	02F0  50			 push ax
    851	02F1  53			 push bx
    852
    853	02F2  B8 0100			 mov ax, 0100H
    854	02F5  BE 0013r			 mov si, offset	enemy_pos
    855
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 16
MAIN.ASM



    856	02F8  8B 3C			 mov di, [si]
    857	02FA  E8 FE02			 call CLEAR_SPRITE
    858	02FD  BB 0001			 mov bx, 1
    859	0300  E8 FDA9			 call MOVE_SPRITE
    860	0303  E8 006A			 call RENDER_ENEMY
    861
    862	0306  8A 3E 0003r		 mov bh, did_shoot
    863	030A  80 FF 01			 cmp bh, 1
    864	030D  75 23			 jne CHECK_SHIP_COLLISION
    865
    866	030F  8B 36 0011r		 mov si, shot_pos
    867	0313  8B 3E 0013r		 mov di, enemy_pos
    868	0317  E8 FF21			 call CHECK_COLLISION
    869	031A  80 F9 01			 cmp cl, 1
    870	031D  75 13			 jne CHECK_SHIP_COLLISION
    871	031F  C6 06 0017r 01		 mov rerender_score, 1
    872	0324  83 06 0006r 64		 add score, 100
    873	0329  E8 FDD3			 call CLEAR_SPRITE
    874	032C  E8 0152			 call RESET_SHOT
    875	032F  E8 FF9C			 call RESET_ENEMY
    876
    877	0332			     CHECK_SHIP_COLLISION:
    878	0332  8B 36 0410r		 mov si, ship_pos
    879	0336  E8 FF02			 call CHECK_COLLISION
    880	0339  80 F9 01			 cmp cl, 1
    881	033C  75 28			 jne RESET_SHIP_COLLISION
    882
    883	033E  8A 26 0413r		 mov ah, is_ship_colliding
    884	0342  80 FC 01			 cmp ah, 1
    885	0345  74 24			 je END_ENEMY_UPDATE
    886
    887	0347  C6 06 0413r 01		 mov is_ship_colliding,	1
    888	034C  8A 26 0424r		 mov ah, allies_db
    889	0350  D0 EC			 shr ah, 1
    890	0352  88 26 0424r		 mov allies_db,	ah
    891	0356  C6 06 0016r 01		 mov rerender_allies, 1
    892	035B  C6 06 0015r 01		 mov rerender_ship, 1
    893	0360  E8 FF6B			 call RESET_ENEMY
    894	0363  EB 06 90			 jmp END_ENEMY_UPDATE
    895
    896	0366			     RESET_SHIP_COLLISION:
    897	0366  C6 06 0413r 00		 mov is_ship_colliding,	0
    898
    899	036B			     END_ENEMY_UPDATE:
    900	036B  5B			 pop bx
    901	036C  58			 pop ax
    902	036D  5F			 pop di
    903	036E  5E			 pop si
    904	036F  C3			 ret
    905	0370			     endp
    906
    907	0370			     RENDER_ENEMY proc
    908	0370  56			 push si
    909	0371  50			 push ax
    910
    911	0372  A1 0013r			 mov ax, enemy_pos
    912	0375  BE 0425r			 mov si, offset	alien_ship
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 17
MAIN.ASM



    913	0378  E8 FDA4			 call RENDER_SPRITE
    914
    915	037B  58			 pop ax
    916	037C  5E			 pop si
    917	037D  C3			 ret
    918	037E			     endp
    919
    920	037E			     RESET_SHIP	proc
    921	037E  C7 06 0410r 76E9		 mov ship_pos, 320 * 95	+ 41 ; Ship stating position
    922	0384  C3			 ret
    923	0385			     endp
    924
    925	0385			     RENDER_SHIP proc
    926	0385  56			 push si
    927	0386  57			 push di
    928	0387  53			 push bx
    929	0388  50			 push ax
    930
    931	0389  A1 0410r			 mov ax, ship_pos
    932	038C  8B F8			 mov di, ax
    933	038E  E8 FD6E			 call CLEAR_SPRITE
    934
    935	0391  BE 0389r			 mov si, offset	ship
    936	0394  B3 0F			 mov bl, 0FH ; white
    937	0396  E8 FD4F			 call CHANGE_SPRITE_COLOR
    938	0399  E8 FD83			 call RENDER_SPRITE
    939
    940	039C  58			 pop ax
    941	039D  5B			 pop bx
    942	039E  5F			 pop di
    943	039F  5E			 pop si
    944	03A0  C3			 ret
    945	03A1			     endp
    946
    947	03A1			     UPDATE_SHIP proc
    948	03A1  56			 push si
    949	03A2  57			 push di
    950	03A3  50			 push ax
    951	03A4  53			 push bx
    952
    953	03A5  B4 01			 mov ah, 1H
    954	03A7  CD 16			 int 16H
    955	03A9  74 0A			 jz END_SHIP_UPDATE
    956
    957	03AB  E8 FC79			 call HANDLE_CONTROLS
    958	03AE  32 E4			 xor ah, ah
    959	03B0  CD 16			 int 16H
    960
    961	03B2  E8 FFD0			 call RENDER_SHIP
    962
    963	03B5			     END_SHIP_UPDATE:
    964
    965	03B5  5B			 pop bx
    966	03B6  58			 pop ax
    967	03B7  5F			 pop di
    968	03B8  5E			 pop si
    969	03B9  C3			 ret
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 18
MAIN.ASM



    970	03BA			     endp
    971
    972				     ; AX = uint16 value to output
    973				     ; SI = offset of end off string buffer
    974				     ; CX = number of digits to	write
    975	03BA			     CONVERT_UINT16 proc
    976	03BA  56			 push si
    977	03BB  50			 push ax
    978	03BC  53			 push bx
    979	03BD  51			 push cx
    980	03BE  52			 push dx
    981
    982	03BF  BB 000A			 mov bx, 10
    983
    984	03C2			     LOOP_DIV:
    985	03C2  33 D2			 xor dx, dx
    986	03C4  F7 F3			 div bx
    987
    988	03C6  80 C2 30			 add dl, '0'
    989	03C9  88 14			 mov byte ptr ds:[si], dl
    990	03CB  4E			 dec si
    991
    992	03CC  3D 0000			 cmp ax, 0
    993	03CF  49			 dec cx
    994	03D0  75 F0			 jnz LOOP_DIV
    995
    996	03D2  83 F9 00			 cmp cx, 0
    997	03D5  74 04			 je END_CONVERSION
    998
    999	03D7  B2 30			 mov dl, '0'
   1000	03D9  88 14			 mov byte ptr ds:[si], dl
   1001
   1002	03DB			     END_CONVERSION:
   1003	03DB  5A			 pop dx
   1004	03DC  59			 pop cx
   1005	03DD  5B			 pop bx
   1006	03DE  58			 pop ax
   1007	03DF  5E			 pop si
   1008	03E0  C3			 ret
   1009	03E1			     endp
   1010
   1011	03E1			     RENDER_SCORE proc
   1012	03E1  56			 push si
   1013	03E2  55			 push bp
   1014	03E3  50			 push ax
   1015	03E4  53			 push bx
   1016	03E5  51			 push cx
   1017	03E6  52			 push dx
   1018
   1019	03E7  BD 010Dr			 mov bp, offset	score_str
   1020	03EA  B9 0006			 mov cx, score_str_len
   1021	03ED  B3 0F			 mov bl, 0FH ; white
   1022	03EF  33 D2			 xor dx, dx
   1023	03F1  E8 FCDF			 call PRINT_STRING
   1024
   1025	03F4  A1 0006r			 mov ax, score
   1026	03F7  BE 0008r			 mov si, offset	score_buffer
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 19
MAIN.ASM



   1027	03FA  83 C6 04			 add si, score_buffer_len - 1
   1028	03FD  B9 0005			 mov cx, score_buffer_len
   1029	0400  E8 FFB7			 call CONVERT_UINT16
   1030
   1031	0403  BD 0008r			 mov bp, offset	score_buffer
   1032	0406  B3 02			 mov bl, 02H ; green
   1033	0408  32 F6			 xor dh, dh
   1034	040A  B2 08			 mov dl, 8
   1035	040C  E8 FCC4			 call PRINT_STRING
   1036
   1037	040F  5A			 pop dx
   1038	0410  59			 pop cx
   1039	0411  5B			 pop bx
   1040	0412  58			 pop ax
   1041	0413  5D			 pop bp
   1042	0414  5E			 pop si
   1043
   1044	0415  C3			 ret
   1045	0416			     endp
   1046
   1047	0416			     RENDER_TIME proc
   1048	0416  55			 push bp
   1049	0417  53			 push bx
   1050	0418  51			 push cx
   1051	0419  52			 push dx
   1052
   1053	041A  BD 0113r			 mov bp, offset	time_str
   1054	041D  B9 0006			 mov cx, time_str_len
   1055	0420  B3 0F			 mov bl, 0FH ; white
   1056	0422  32 F6			 xor dh, dh
   1057	0424  B2 19			 mov dl, 25
   1058	0426  E8 FCAA			 call PRINT_STRING
   1059
   1060	0429  33 C0			 xor ax, ax
   1061	042B  A0 0005r			 mov al, time
   1062	042E  BE 000Dr			 mov si, offset	time_buffer
   1063	0431  83 C6 01			 add si, time_buffer_len - 1
   1064	0434  B9 0002			 mov cx, 2
   1065	0437  E8 FF80			 call CONVERT_UINT16
   1066
   1067	043A  BD 000Dr			 mov bp, offset	time_buffer
   1068	043D  B9 0002			 mov cx, time_buffer_len
   1069	0440  B3 02			 mov bl, 02H ; green
   1070	0442  32 F6			 xor dh, dh
   1071	0444  B2 20			 mov dl, 32
   1072	0446  E8 FC8A			 call PRINT_STRING
   1073
   1074	0449  5A			 pop dx
   1075	044A  59			 pop cx
   1076	044B  5B			 pop bx
   1077	044C  5D			 pop bp
   1078
   1079	044D  C3			 ret
   1080	044E			     endp
   1081
   1082	044E			     UPDATE_TIME proc
   1083	044E  50			 push ax
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 20
MAIN.ASM



   1084
   1085	044F  8A 26 0004r		 mov ah, timeout
   1086	0453  FE C4			 inc ah
   1087	0455  80 FC 64			 cmp ah, 100
   1088	0458  75 21			 jne SAVE_TIMEOUT
   1089
   1090	045A  8A 26 0005r		 mov ah, time
   1091	045E  FE CC			 dec ah
   1092	0460  75 13			 jnz SAVE_TIME
   1093
   1094	0462  8A 26 0002r		 mov ah, sector
   1095	0466  FE C4			 inc ah
   1096	0468  88 26 0002r		 mov sector, ah
   1097
   1098	046C  E8 FE28			 call RENDER_SECTOR
   1099	046F  E8 0094			 call RESET
   1100
   1101	0472  EB 0B 90			 jmp END_TIME
   1102
   1103	0475			     SAVE_TIME:
   1104	0475  88 26 0005r		 mov time, ah
   1105	0479  32 E4			 xor ah, ah
   1106
   1107	047B			     SAVE_TIMEOUT:
   1108	047B  88 26 0004r		 mov timeout, ah
   1109
   1110	047F			     END_TIME:
   1111	047F  58			 pop ax
   1112	0480  C3			 ret
   1113	0481			     endp
   1114
   1115	0481			     RESET_SHOT	proc
   1116	0481  57			 push di
   1117	0482  53			 push bx
   1118
   1119	0483  8B 3E 0011r		 mov di, shot_pos
   1120	0487  E8 FC75			 call CLEAR_SPRITE
   1121
   1122	048A  8B 1E 0410r		 mov bx, ship_pos
   1123	048E  83 C3 0F			 add bx, 15
   1124	0491  89 1E 0011r		 mov shot_pos, bx
   1125	0495  C6 06 0003r 00		 mov did_shoot,	0
   1126
   1127	049A  5B			 pop bx
   1128	049B  5F			 pop di
   1129	049C  C3			 ret
   1130	049D			     endp
   1131
   1132	049D			     UPDATE_SHOT proc
   1133	049D  57			 push di
   1134	049E  56			 push si
   1135	049F  50			 push ax
   1136	04A0  53			 push bx
   1137	04A1  52			 push dx
   1138
   1139	04A2  8A 1E 0003r		 mov bl, did_shoot
   1140	04A6  80 FB 01			 cmp bl, 1
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 21
MAIN.ASM



   1141	04A9  75 33			 jne END_SHOT
   1142
   1143	04AB  33 D2			 xor dx, dx
   1144	04AD  A1 0011r			 mov ax, shot_pos
   1145	04B0  05 000F			 add ax, 15
   1146	04B3  BB 0140			 mov bx, 320
   1147	04B6  F7 F3			 div bx
   1148	04B8  83 FA 00			 cmp dx, 0
   1149	04BB  75 06			 jne MOVE_SHOT
   1150
   1151	04BD  E8 FFC1			 call RESET_SHOT
   1152	04C0  EB 1C 90			 jmp END_SHOT
   1153
   1154	04C3			     MOVE_SHOT:
   1155	04C3  8B 3E 0011r		 mov di, shot_pos
   1156	04C7  E8 FC35			 call CLEAR_SPRITE
   1157
   1158	04CA  BB 0003			 mov bx, 3 ; TODO: change to `shot_speed`
   1159	04CD  33 C0			 xor ax, ax
   1160	04CF  BE 0011r			 mov si, offset	shot_pos
   1161	04D2  E8 FBD7			 call MOVE_SPRITE
   1162
   1163	04D5  A1 0011r			 mov ax, shot_pos
   1164	04D8  BE 04AEr			 mov si, offset	shot
   1165	04DB  E8 FC41			 call RENDER_SPRITE
   1166
   1167	04DE			     END_SHOT:
   1168	04DE  5A			 pop dx
   1169	04DF  5B			 pop bx
   1170	04E0  58			 pop ax
   1171	04E1  5E			 pop si
   1172	04E2  5F			 pop di
   1173	04E3  C3			 ret
   1174	04E4			     endp
   1175
   1176	04E4			     RESET_TIME	proc
   1177	04E4  50			 push ax
   1178
   1179	04E5  32 E4			 xor ah, ah
   1180	04E7  88 26 0004r		 mov timeout, ah
   1181	04EB  B4 3C			 mov ah, 60
   1182	04ED  88 26 0005r		 mov time, ah
   1183
   1184	04F1  58			 pop ax
   1185	04F2			     endp
   1186
   1187	04F2			     RESET_RERENDERS proc
   1188	04F2  50			 push ax
   1189
   1190	04F3  B4 01			 mov ah, 1
   1191	04F5  C6 06 0015r 01		 mov rerender_ship, 1
   1192	04FA  C6 06 0016r 01		 mov rerender_allies, 1
   1193	04FF  C6 06 0017r 01		 mov rerender_score, 1
   1194
   1195	0504  58			 pop ax
   1196	0505  C3			 ret
   1197	0506			     endp
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 22
MAIN.ASM



   1198
   1199	0506			     RESET proc	; Contains all procedures for reseting values
   1200	0506  E8 FE75			 call RESET_SHIP
   1201	0509  E8 FDC2			 call RESET_ENEMY
   1202	050C  E8 FFD5			 call RESET_TIME
   1203	050F  E8 FFE0			 call RESET_RERENDERS
   1204	0512  C3			 ret
   1205	0513			     endp
   1206
   1207	0513			     UPDATE proc ; Contains all	procedures for updating	game state
   1208	0513  E8 FE8B			 call UPDATE_SHIP
   1209	0516  E8 FF35			 call UPDATE_TIME
   1210	0519  E8 FF81			 call UPDATE_SHOT
   1211	051C  E8 FDCF			 call UPDATE_ENEMY
   1212	051F  C3			 ret
   1213	0520			     endp
   1214
   1215	0520			     RENDER proc ; Contains all	procedures for rendering game objects
   1216	0520  50			 push ax
   1217	0521  E8 FEF2			 call RENDER_TIME
   1218
   1219					 ; should re-render ship?
   1220	0524  A0 0015r			 mov al, rerender_ship
   1221	0527  3C 00			 cmp al, 0
   1222	0529  74 08			 je SKIP_2_ALLIES
   1223	052B  E8 FE57			 call RENDER_SHIP
   1224	052E  C6 06 0015r 00		 mov rerender_ship, 0
   1225
   1226	0533			     SKIP_2_ALLIES:
   1227					 ; should re-render allies?
   1228	0533  A0 0016r			 mov al, rerender_allies
   1229	0536  3C 01			 cmp al, 1
   1230	0538  75 08			 jne SKIP_2_SCORE
   1231	053A  E8 FCA2			 call RENDER_ALLY_SHIPS
   1232	053D  C6 06 0016r 00		 mov rerender_allies, 0
   1233
   1234	0542			     SKIP_2_SCORE:
   1235					 ; should re-render score?
   1236	0542  A0 0017r			 mov al, rerender_score
   1237	0545  3C 01			 cmp al, 1
   1238	0547  75 08			 jne END_RENDER
   1239	0549  E8 FE95			 call RENDER_SCORE
   1240	054C  C6 06 0017r 00		 mov rerender_score, 0
   1241
   1242	0551			     END_RENDER:
   1243	0551  58			 pop ax
   1244	0552  C3			 ret
   1245	0553			     endp
   1246
   1247	0553			     END_GAME proc
   1248					 ; Back	to text	mode
   1249	0553  32 E4			 xor ah, ah
   1250	0555  B0 03			 mov al, 3h
   1251	0557  CD 10			 int 10h
   1252
   1253					 ; Ends	program
   1254	0559  B4 4C			 mov ah, 4ch
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 23
MAIN.ASM



   1255	055B  32 C0			 xor al, al
   1256	055D  CD 21			 int 21h
   1257	055F  C3			 ret
   1258	0560			     endp
   1259
   1260	0560			     THROTTLE proc
   1261	0560  50			 push ax
   1262	0561  51			 push cx
   1263	0562  52			 push dx
   1264
   1265	0563  33 C9			 xor cx, cx
   1266	0565  BA 2710			 mov dx, 2710H
   1267	0568  B4 86			 mov ah, 86H
   1268	056A  CD 15			 int 15h
   1269
   1270	056C  5A			 pop dx
   1271	056D  59			 pop cx
   1272	056E  58			 pop ax
   1273	056F  C3			 ret
   1274	0570			     endp
   1275
   1276	0570			     MAIN proc
   1277	0570  B8 0000s			 mov AX, @data
   1278	0573  8E D8			 mov DS, AX
   1279	0575  B8 A000			 mov AX, 0A000H
   1280	0578  8E C0			 mov ES, AX
   1281	057A  33 FF			 xor DI, DI
   1282
   1283					 ; Define o modo de video
   1284	057C  32 E4			 xor ah, ah
   1285	057E  32 FF			 xor bh, bh
   1286	0580  B0 13			 mov al, 13h
   1287	0582  CD 10			 int 10h
   1288
   1289					 ; Exibe título e botões do menu
   1290	0584  E8 FB13			 call PRINT_TITLE_MENU
   1291	0587  E8 FBC1			 call PRINT_BUTTONS
   1292	058A  E8 FBF5			 call RESET_CROSS_SHIP_POS
   1293
   1294	058D			     MENU_LOOP:
   1295	058D  E8 FC01			 call CROSS_SHIPS
   1296
   1297					 ; Recebe entrada do usuário
   1298	0590  B4 01			 mov ah, 1H
   1299	0592  CD 16			 int 16H
   1300	0594  74 F7			 jz MENU_LOOP
   1301
   1302					 ; Chama a função de navegação
   1303	0596  E8 FA67			 call HANDLE_INPUT
   1304
   1305					 ; Condição para iniciar o jogo
   1306	0599  80 FC 1C			 cmp ah, 1CH
   1307	059C  74 06			 je SELECT_OPTION
   1308
   1309					 ; Retorno ao loop do menu
   1310	059E  32 E4			 xor ah, ah
   1311	05A0  CD 16			 int 16H
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 24
MAIN.ASM



   1312	05A2  EB E9			 jmp MENU_LOOP
   1313
   1314	05A4			     SELECT_OPTION:
   1315	05A4  32 E4			 xor ah, ah
   1316	05A6  CD 16			 int 16H
   1317
   1318	05A8  8A 26 0000r		 mov ah, menu
   1319	05AC  80 FC 01			 cmp ah, 1
   1320	05AF  74 14			 je FINISH
   1321
   1322	05B1  E8 FCE3			 call RENDER_SECTOR
   1323
   1324	05B4  E8 FF4F			 call RESET
   1325	05B7  E8 FDCB			 call RENDER_SHIP
   1326
   1327	05BA			     GAME_LOOP:
   1328	05BA  E8 FFA3			 call THROTTLE
   1329	05BD  E8 FF53			 call UPDATE
   1330	05C0  E8 FF5D			 call RENDER
   1331
   1332	05C3  EB F5			 jmp GAME_LOOP
   1333
   1334	05C5			     FINISH:
   1335	05C5  E8 FF8B			 CALL END_GAME
   1336
   1337	05C8  C3			 ret
   1338	05C9			     endp
   1339
   1340				     end MAIN
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 25
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/10/24"
??FILENAME			  Text	 "MAIN	  "
??TIME				  Text	 "01:07:06"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
AFTER_CLEAR			  Near	 _TEXT:0215
ALIEN_SHIP			  Byte	 DGROUP:0425
ALIEN_SHIP_POS			  Word	 DGROUP:04AC
ALLIES_DB			  Byte	 DGROUP:0424
ALLIES_POS_VEC			  Word	 DGROUP:0414
ARROW_DOWN			  Near	 _TEXT:0016
ARROW_UP			  Near	 _TEXT:000D
BTN_INICIAR			  Byte	 DGROUP:02E7
BTN_INICIAR_LENGTH		  Number 0051
BTN_SAIR			  Byte	 DGROUP:0338
BTN_SAIR_LENGTH			  Number 0051
CHANGE_SPRITE_COLOR		  Near	 _TEXT:00E8
CHECK_COLLISION			  Near	 _TEXT:023B
CHECK_DIRECTION			  Near	 _TEXT:00C1
CHECK_SHIP_COLLISION		  Near	 _TEXT:0332
CHECK_X_IN_RANGE		  Near	 _TEXT:0271
CHECK_Y_IN_RANGE		  Near	 _TEXT:0257
CLEAR_LINE			  Near	 _TEXT:010B
CLEAR_SCREEN			  Near	 _TEXT:0223
CLEAR_SPRITE			  Near	 _TEXT:00FF
CONVERT_UINT16			  Near	 _TEXT:03BA
CROSS_SHIPS			  Near	 _TEXT:0191
DID_SHOOT			  Byte	 DGROUP:0003
DRAW_LINE			  Near	 _TEXT:0137
END_COLLISION			  Near	 _TEXT:0290
END_CONTROLS			  Near	 _TEXT:0095
END_CONVERSION			  Near	 _TEXT:03DB
END_ENEMY_UPDATE		  Near	 _TEXT:036B
END_GAME			  Near	 _TEXT:0553
END_HANDLE			  Near	 _TEXT:0026
END_POS_UPDATE			  Near	 _TEXT:01DE
END_RENDER			  Near	 _TEXT:0551
END_SHIP_UPDATE			  Near	 _TEXT:03B5
END_SHOT			  Near	 _TEXT:04DE
END_TIME			  Near	 _TEXT:047F
ENEMY_POS			  Word	 DGROUP:0013
EXIT_BTN			  Near	 _TEXT:0173
FINISH				  Near	 _TEXT:05C5
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 26
Symbol Table



GAME_LOOP			  Near	 _TEXT:05BA
HANDLE_CONTROLS			  Near	 _TEXT:0027
HANDLE_INPUT			  Near	 _TEXT:0000
IS_SHIP_COLLIDING		  Byte	 DGROUP:0413
LOOP_DIV			  Near	 _TEXT:03C2
MAIN				  Near	 _TEXT:0570
MENU				  Byte	 DGROUP:0000
MENU_LOOP			  Near	 _TEXT:058D
MOVE_ALIEN_SHIP			  Near	 _TEXT:01B5
MOVE_DOWN			  Near	 _TEXT:0067
MOVE_NEGATIVE			  Near	 _TEXT:00CB
MOVE_SHOT			  Near	 _TEXT:04C3
MOVE_SPRITE			  Near	 _TEXT:00AC
MOVE_UP				  Near	 _TEXT:004A
MOVE_Y_AXIS			  Near	 _TEXT:00B8
NO_CLEAR			  Near	 _TEXT:020F
PIXEL_LOOP			  Near	 _TEXT:00EF
PRINT_BUTTONS			  Near	 _TEXT:014B
PRINT_STRING			  Near	 _TEXT:00D3
PRINT_TITLE_MENU		  Near	 _TEXT:009A
RENDER				  Near	 _TEXT:0520
RENDER_ALLY_SHIPS		  Near	 _TEXT:01DF
RENDER_BUTTONS			  Near	 _TEXT:001C
RENDER_ENEMY			  Near	 _TEXT:0370
RENDER_SCORE			  Near	 _TEXT:03E1
RENDER_SECTOR			  Near	 _TEXT:0297
RENDER_SHIP			  Near	 _TEXT:0385
RENDER_SINGLE			  Near	 _TEXT:01EF
RENDER_SPRITE			  Near	 _TEXT:011F
RENDER_TIME			  Near	 _TEXT:0416
RERENDER_ALLIES			  Byte	 DGROUP:0016
RERENDER_SCORE			  Byte	 DGROUP:0017
RERENDER_SHIP			  Byte	 DGROUP:0015
RESET				  Near	 _TEXT:0506
RESET_CROSS_SHIP_POS		  Near	 _TEXT:0182
RESET_ENEMY			  Near	 _TEXT:02CE
RESET_POS			  Near	 _TEXT:01DB
RESET_RERENDERS			  Near	 _TEXT:04F2
RESET_SHIP			  Near	 _TEXT:037E
RESET_SHIP_COLLISION		  Near	 _TEXT:0366
RESET_SHOT			  Near	 _TEXT:0481
RESET_TIME			  Near	 _TEXT:04E4
SAVE_POS			  Near	 _TEXT:00CD
SAVE_TIME			  Near	 _TEXT:0475
SAVE_TIMEOUT			  Near	 _TEXT:047B
SCORE				  Word	 DGROUP:0006
SCORE_BUFFER			  Byte	 DGROUP:0008
SCORE_BUFFER_LEN		  Number 0005
SCORE_STR			  Byte	 DGROUP:010D
SCORE_STR_LEN			  Number 0006
SCREEN				  Byte	 DGROUP:0001
SECTOR				  Byte	 DGROUP:0002
SECTOR_LEN			  Number 0098
SECTOR_ONE			  Byte	 DGROUP:0119
SECTOR_THREE			  Byte	 DGROUP:0249
SECTOR_TWO			  Byte	 DGROUP:01B1
SECTOR_VEC			  Word	 DGROUP:02E1
Turbo Assembler	 Version 4.1	    12/10/24 01:07:06	    Page 27
Symbol Table



SELECT_OPTION			  Near	 _TEXT:05A4
SHIP				  Byte	 DGROUP:0389
SHIP_COLOR			  Byte	 DGROUP:0412
SHIP_POS			  Word	 DGROUP:0410
SHIP_SPEED			  Word	 DGROUP:000F
SHOOT				  Near	 _TEXT:0084
SHOT				  Byte	 DGROUP:04AE
SHOT_POS			  Word	 DGROUP:0011
SKIP_2_ALLIES			  Near	 _TEXT:0533
SKIP_2_SCORE			  Near	 _TEXT:0542
SKIP_REPLACE			  Near	 _TEXT:00F7
SKIP_X_MAX			  Near	 _TEXT:027C
SKIP_X_MIN			  Near	 _TEXT:028A
SKIP_Y_MAX			  Near	 _TEXT:025F
SKIP_Y_MIN			  Near	 _TEXT:026D
START_BTN			  Near	 _TEXT:0159
STRING				  Byte	 DGROUP:0018
STRING_LENGTH			  Number 00F5
THROTTLE			  Near	 _TEXT:0560
TIME				  Byte	 DGROUP:0005
TIMEOUT				  Byte	 DGROUP:0004
TIME_BUFFER			  Byte	 DGROUP:000D
TIME_BUFFER_LEN			  Number 0002
TIME_STR			  Byte	 DGROUP:0113
TIME_STR_LEN			  Number 0006
UPDATE				  Near	 _TEXT:0513
UPDATE_ENEMY			  Near	 _TEXT:02EE
UPDATE_SHIP			  Near	 _TEXT:03A1
UPDATE_SHOT			  Near	 _TEXT:049D
UPDATE_TIME			  Near	 _TEXT:044E

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0400 Para	  Stack	  STACK
  _DATA				  16  0535 Word	  Public  DATA
_TEXT				  16  05C9 Word	  Public  CODE
