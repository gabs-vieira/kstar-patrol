Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 1
MAIN.ASM



      1	0000			     .model small
      2	0000			     .stack
      3
      4	0000			     .data
      5	0000  00			 menu db 0
      6					 ; 0 - Menu
      7					 ; 1 - Setor
      8					 ; 2 - Jogo
      9					 ; 3 - Game Over
     10	0001  00			 screen	db 0
     11	0002  01			 sector	db 1
     12	0003  00			 did_shoot db 0
     13	0004  00			 timeout db 0
     14	0005  3C			 time db 60
     15	0006  0000			 score dw 0
     16
     17	0008  30 30 30 30 30		 score_buffer db '00000'
     18	      =0005			 score_buffer_len equ $-score_buffer
     19
     20	000D  30 30			 time_buffer db	'00'
     21	      =0002			 time_buffer_len equ $-time_buffer
     22
     23	000F  0005			 ship_speed dw 5
     24
     25	0011  23BE			 shot_pos dw 305*30
     26	0013  23BE			 enemy_pos dw 305*30
     27
     28					 ; Re-renders
     29	0015  01			 rerender_ship db 1
     30	0016  01			 rerender_allies db 1
     31	0017  01			 rerender_score	db 1
     32
     33					 ; For pseudo random number generation
     34	0018  0000			 seed dw 0
     35
     36					 ; Strings para	o título e botões
     37	001A  07*(20) 20 5F 20 20 +	 string	 db 7 dup(" ")," _  __	 ___ _		  ",13,10
     38	      5F 5F 20 20 20 5F	5F+
     39	      5F 20 5F 20 20 20	20+
     40	      20 20 20 20 20 20	20+
     41	      20 0D 0A
     42	003D  07*(20) 7C 20 7C 2F +		 db 7 dup(" "),"| |/ /__/ __| |_ __ _ _	_ ",13,10
     43	      20 2F 5F 5F 2F 20	5F+
     44	      5F 7C 20 7C 5F 20	5F+
     45	      5F 20 5F 20 5F 20	5F+
     46	      20 0D 0A
     47	0060  07*(20) 7C 20 27 20 +		 db 7 dup(" "),"| ' <___\__ \  _/ _` | '_|",13,10
     48	      3C 5F 5F 5F 5C 5F	5F+
     49	      20 5C 20 20 5F 2F	20+
     50	      5F 60 20 7C 20 27	5F+
     51	      7C 0D 0A
     52	0083  07*(20) 7C 5F 7C 5C +		 db 7 dup(" "),"|_|\_\	|___/\__\__,_|_|  ",13,10
     53	      5F 5C 20 20 7C 5F	5F+
     54	      5F 2F 5C 5F 5F 5C	5F+
     55	      5F 2C 5F 7C 5F 7C	20+
     56	      20 0D 0A
     57	00A6  07*(20) 7C 20 5F 20 +		 db 7 dup(" "),"| _ \__	_| |_ _	_ ___| |  ",13,10
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 2
MAIN.ASM



     58	      5C 5F 5F 20 5F 7C	20+
     59	      7C 5F 20 5F 20 5F	20+
     60	      5F 5F 5F 7C 20 7C	20+
     61	      20 0D 0A
     62	00C9  07*(20) 7C 20 20 5F +		 db 7 dup(" "),"|  _/ _` |  _| '_/ _ \ |  ",13,10
     63	      2F 20 5F 60 20 7C	20+
     64	      20 5F 7C 20 27 5F	2F+
     65	      20 5F 20 5C 20 7C	20+
     66	      20 0D 0A
     67	00EC  07*(20) 7C 5F 7C 20 +		 db 7 dup(" "),"|_| \__,_|\__|_| \___/_|  ",13,10
     68	      5C 5F 5F 2C 5F 7C	5C+
     69	      5F 5F 7C 5F 7C 20	5C+
     70	      5F 5F 5F 2F 5F 7C	20+
     71	      20 0D 0A
     72
     73	      =00F5			 string_length equ $-string
     74
     75	010F  53 43 4F 52 45 3A		 score_str db "SCORE:"
     76	      =0006			 score_str_len equ $-score_str
     77
     78	0115  54 45 4D 50 4F 3A		 time_str db "TEMPO:"
     79	      =0006			 time_str_len equ $-time_str
     80
     81	011B  05*(20) 20 5F 5F 5F +	 sector_one  db	5 dup("	"), " ___	_	       _    ",13,10
     82	      20 20 20 20 20 20	20+
     83	      5F 20 20 20 20 20	20+
     84	      20 20 20 20 20 20	20+
     85	      20 5F 20 20 20 20	0D+
     86	      0A
     87	0141  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   /	|   ",13,10
     88	      7C 20 5F 5F 5F 20	7C+
     89	      20 7C 5F 20 5F 5F	5F+
     90	      20 5F 20 5F 20 20	20+
     91	      2F 20 7C 20 20 20	0D+
     92	      0A
     93	0167  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|  |	|   ",13,10
     94	      5C 2F 20 2D 5F 29	7C+
     95	      20 20 5F 2F 20 5F	20+
     96	      5C 20 27 5F 7C 20	20+
     97	      7C 20 7C 20 20 20	0D+
     98	      0A
     99	018D  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    |_|   ",13,10
    100	      2F 5C 5F 5F 5F 5C	20+
    101	      5C 5F 5F 5C 5F 5F	5F+
    102	      2F 5F 7C 20 20 20	20+
    103	      7C 5F 7C 20 20 20	0D+
    104	      0A
    105
    106	01B3  05*(20) 20 5F 5F 5F +	 sector_two  db	5 dup("	"), " ___	_	       ___  ",13,10
    107	      20 20 20 20 20 20	20+
    108	      5F 20 20 20 20 20	20+
    109	      20 20 20 20 20 20	20+
    110	      20 5F 5F 5F 20 20	0D+
    111	      0A
    112	01D9  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   |_  ) ",13,10
    113	      7C 20 5F 5F 5F 20	7C+
    114	      20 7C 5F 20 5F 5F	5F+
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 3
MAIN.ASM



    115	      20 5F 20 5F 20 20	20+
    116	      7C 5F 20 20 29 20	0D+
    117	      0A
    118	01FF  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|   / /  ",13,10
    119	      5C 2F 20 2D 5F 29	7C+
    120	      20 20 5F 2F 20 5F	20+
    121	      5C 20 27 5F 7C 20	20+
    122	      20 2F 20 2F 20 20	0D+
    123	      0A
    124	0225  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    /___| ",13,10
    125	      2F 5C 5F 5F 5F 5C	20+
    126	      5C 5F 5F 5C 5F 5F	5F+
    127	      2F 5F 7C 20 20 20	20+
    128	      2F 5F 5F 5F 7C 20	0D+
    129	      0A
    130
    131	024B  05*(20) 20 5F 5F 5F +	 sector_three	 db 5 dup(" "),	" ___	    _		   ____	",13,10
    132	      20 20 20 20 20 20	20+
    133	      5F 20 20 20 20 20	20+
    134	      20 20 20 20 20 20	20+
    135	      20 5F 5F 5F 5F 20	0D+
    136	      0A
    137	0271  05*(20) 2F 20 5F 5F +			 db 5 dup(" "),	"/ __| ___ | |_	___ _ _	  |__ /	",13,10
    138	      7C 20 5F 5F 5F 20	7C+
    139	      20 7C 5F 20 5F 5F	5F+
    140	      20 5F 20 5F 20 20	20+
    141	      7C 5F 5F 20 2F 20	0D+
    142	      0A
    143	0297  05*(20) 5C 5F 5F 20 +			 db 5 dup(" "),	"\__ \/	-_)|  _/ _ \ '_|   |_ \	",13,10
    144	      5C 2F 20 2D 5F 29	7C+
    145	      20 20 5F 2F 20 5F	20+
    146	      5C 20 27 5F 7C 20	20+
    147	      20 7C 5F 20 5C 20	0D+
    148	      0A
    149	02BD  05*(20) 7C 5F 5F 5F +			 db 5 dup(" "),	"|___/\___\ \__\___/_|	  |___/	",13,10
    150	      2F 5C 5F 5F 5F 5C	20+
    151	      5C 5F 5F 5C 5F 5F	5F+
    152	      2F 5F 7C 20 20 20	20+
    153	      7C 5F 5F 5F 2F 20	0D+
    154	      0A
    155
    156	      =0098			 sector_len equ	$-sector_three
    157
    158	02E3  0A*(20) 20 20 5F 5F +	 game_over   db	10 dup(" "), "	___		   ",13,10
    159	      5F 20 20 20 20 20	20+
    160	      20 20 20 20 20 20	20+
    161	      20 20 20 0D 0A
    162	0304  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / __|__ _ _ __  ___ ",13,10
    163	      5F 7C 5F 5F 20 5F	20+
    164	      5F 20 5F 5F 20 20	5F+
    165	      5F 5F 20 0D 0A
    166	0325  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_ / _`	| '  \/	-_)",13,10
    167	      20 2F 20 5F 60 20	7C+
    168	      20 27 20 20 5C 2F	20+
    169	      2D 5F 29 0D 0A
    170	0346  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___\__,_|_|_|_\___|",13,10
    171	      5F 5C 5F 5F 2C 5F	7C+
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 4
MAIN.ASM



    172	      5F 7C 5F 7C 5F 5C	5F+
    173	      5F 5F 7C 0D 0A
    174	0367  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / _ \__ _____ _ _   ",13,10
    175	      20 5C 5F 5F 20 5F	5F+
    176	      5F 5F 5F 20 5F 20	5F+
    177	      20 20 20 0D 0A
    178	0388  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_) \ V	/ -_) '_|  ",13,10
    179	      29 20 5C 20 56 20	2F+
    180	      20 2D 5F 29 20 27	5F+
    181	      7C 20 20 0D 0A
    182	03A9  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___/ \_/\___|_|	   ",13,10
    183	      5F 2F 20 5C 5F 2F	5C+
    184	      5F 5F 5F 7C 5F 7C	20+
    185	      20 20 20 0D 0A
    186
    187	      =00E7			 game_over_len equ $-game_over
    188
    189	03CA  20 5F 5F 20 20 20	5F+	 you_win db " __   __		       _	 _ ",13,10
    190	      5F 20 20 20 20 20	20+
    191	      20 20 20 20 20 20	20+
    192	      20 20 20 20 20 5F	20+
    193	      20 20 20 20 20 20	20+
    194	      20 5F 20 0D 0A
    195	03F2  20 5C 20 5C 20 2F	20+		 db " \	\ / /__	_ _  __	___ __|	|___ _ _| |",13,10
    196	      2F 5F 5F 20 5F 20	5F+
    197	      20 20 5F 5F 20 5F	5F+
    198	      5F 20 5F 5F 7C 20	7C+
    199	      5F 5F 5F 20 5F 20	5F+
    200	      7C 20 7C 0D 0A
    201	041A  20 20 5C 20 56 20	2F+		 db "  \ V / -_) ' \/ _/ -_) _`	/ _ \ '_|_|",13,10
    202	      20 2D 5F 29 20 27	20+
    203	      5C 2F 20 5F 2F 20	2D+
    204	      5F 29 20 5F 60 20	2F+
    205	      20 5F 20 5C 20 27	5F+
    206	      7C 5F 7C 0D 0A
    207	0442  20 20 20 5C 5F 2F	5C+		 db "	\_/\___|_||_\__\___\__,_\___/_|	(_)",13,10
    208	      5F 5F 5F 7C 5F 7C	7C+
    209	      5F 5C 5F 5F 5C 5F	5F+
    210	      5F 5C 5F 5F 2C 5F	5C+
    211	      5F 5F 5F 2F 5F 7C	20+
    212	      28 5F 29 0D 0A
    213
    214	      =00A0			 you_win_len equ $-you_win
    215
    216	046A  011Br 01B3r 024Br		 sector_vec dw offset sector_one, offset sector_two, offset sector_three
    217
    218	0470  0E*(20) DA C4 C4 C4 +	 btn_iniciar db	 14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    219	      C4 C4 C4 C4 C4 C4	BF+
    220	      0D 0A
    221	048B  0E*(20) B3 20 49 4E +		      db 14 dup(" "),179," INICIAR ",179,10,13
    222	      49 43 49 41 52 20	B3+
    223	      0A 0D
    224	04A6  0E*(20) C0 C4 C4 C4 +		      db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    225	      C4 C4 C4 C4 C4 C4	D9+
    226	      0D 0A
    227
    228	      =0051			 btn_iniciar_length equ	$-btn_iniciar
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 5
MAIN.ASM



    229
    230	04C1  0E*(20) DA C4 C4 C4 +	 btn_sair db  14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    231	      C4 C4 C4 C4 C4 C4	BF+
    232	      0D 0A
    233	04DC  0E*(20) B3 20 20 53 +		   db 14 dup(" "),179,"	 SAIR	",179,10,13
    234	      41 49 52 20 20 20	B3+
    235	      0A 0D
    236	04F7  0E*(20) C0 C4 C4 C4 +		   db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    237	      C4 C4 C4 C4 C4 C4	D9+
    238	      0D 0A
    239
    240	      =0051			 btn_sair_length equ $-btn_sair
    241
    242	0512  0140*(00)			 terrain db 320	dup(0)
    243	0652  0140*(00)			     db	320 dup(0)
    244	0792  A8*(00) 03*(06) 95* +	     db	168 dup(0),3 dup (6),149 dup(0)
    245	      (00)
    246	08D2  A6*(00) 06*(06) 94* +	     db	166 dup(0),6 dup (6),148 dup(0)
    247	      (00)
    248	0A12  22*(00) 04*(06) 07* +	     db	34 dup(0),4 dup	(6),7 dup(0),6 dup (6),63 dup(0),2 dup (6),25 dup(0),6 dup (6),18   +
    249	      (00) 06*(06) 3F*(00)+  dup(0),8 dup (6),87 dup(0),9 dup (6),51 dup(0)
    250	      02*(06) 19*(00) 06* +
    251	      (06) 12*(00) 08*(06)+
    252	      57*(00) 09*(06) 33* +
    253	      (00)
    254	0B52  21*(00) 06*(06) 05* +	     db	33 dup(0),6 dup	(6),5 dup(0),9 dup (6),37 dup(0),9 dup (6),12 dup(0),7 dup (6),20   +
    255	      (00) 09*(06) 25*(00)+  dup(0),10 dup (6),17 dup(0),9 dup (6),15 dup(0),5 dup (6),40 dup(0),5 dup (6),19 dup(0),11	dup +
    256	      09*(06) 0C*(00) 07* +  (6),15 dup(0),4 dup (6),32	dup(0)
    257	      (06) 14*(00) 0A*(06)+
    258	      11*(00) 09*(06) 0F* +
    259	      (00) 05*(06) 28*(00)+
    260	      05*(06) 13*(00) 0B* +
    261	      (06) 0F*(00) 04*(06)+
    262	      20*(00)
    263	0C92  0C*(00) 04*(06) 10* +	     db	12 dup(0),4 dup	(6),16 dup(0),7	dup (6),4 dup(0),11 dup	(6),17 dup(0),3	dup (6),15  +
    264	      (00) 07*(06) 04*(00)+  dup(0),11 dup (6),10 dup(0),10 dup	(6),15 dup(0),14 dup (6),15 dup(0),11 dup (6),13 dup(0),7   +
    265	      0B*(06) 11*(00) 03* +  dup (6),8 dup(0),6	dup (6),23 dup(0),9 dup	(6),15 dup(0),15 dup (6),12 dup(0),7 dup (6),30	dup +
    266	      (06) 0F*(00) 0B*(06)+  (0)
    267	      0A*(00) 0A*(06) 0F* +
    268	      (00) 0E*(06) 0F*(00)+
    269	      0B*(06) 0D*(00) 07* +
    270	      (06) 08*(00) 06*(06)+
    271	      17*(00) 09*(06) 0F* +
    272	      (00) 0F*(06) 0C*(00)+
    273	      07*(06) 1E*(00)
    274	0DD2  0B*(0B) 07*(06) 0E* +	     db	11 dup(0BH),7 dup (6),14 dup(0BH),23 dup (6),16	dup(0BH),3 dup (6),15 dup(0BH),11   +
    275	      (0B) 17*(06) 10*(0B)+  dup (6),9 dup(0BH),11 dup (6),13 dup(0BH),17 dup (6),14 dup(0BH),12 dup (6),11 dup(0BH),9 dup  +
    276	      03*(06) 0F*(0B) 0B* +  (6),5 dup(0BH),9 dup (6),20 dup(0BH),12 dup (6),13	dup(0BH),17 dup	(6),10 dup(0BH),9 dup (6),29+
    277	      (06) 09*(0B) 0B*(06)+  dup(0BH)
    278	      0D*(0B) 11*(06) 0E* +
    279	      (0B) 0C*(06) 0B*(0B)+
    280	      09*(06) 05*(0B) 09* +
    281	      (06) 14*(0B) 0C*(06)+
    282	      0D*(0B) 11*(06) 0A* +
    283	      (0B) 09*(06) 1D*(0B)
    284	0F12  01*(06) 09*(0B) 0A* +	     db	1 dup (6),9 dup(0BH),10	dup (6),10 dup(0BH),26 dup (6),15 dup(0BH),5 dup (6),12	dup +
    285	      (06) 0A*(0B) 1A*(06)+  (0BH),34 dup (6),8	dup(0BH),21 dup	(6),12 dup(0BH),14 dup (6),9 dup(0BH),11 dup (6),2 dup(0BH),+
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 6
MAIN.ASM



    286	      0F*(0B) 05*(06) 0C* +  13	dup (6),16 dup(0BH),17 dup (6),8 dup(0BH),20 dup (6),8 dup(0BH),11 dup (6),8 dup(0BH),3	dup +
    287	      (0B) 22*(06) 08*(0B)+  (6),8 dup(0BH),6 dup (6),2	dup(0BH),1 dup (6)
    288	      15*(06) 0C*(0B) 0E* +
    289	      (06) 09*(0B) 0B*(06)+
    290	      02*(0B) 0D*(06) 10* +
    291	      (0B) 11*(06) 08*(0B)+
    292	      14*(06) 08*(0B) 0B* +
    293	      (06) 08*(0B) 03*(06)+
    294	      08*(0B) 06*(06) 02* +
    295	      (0B) 01*(06)
    296	1052  02*(06) 07*(0B) 0C* +	     db	2 dup (6),7 dup(0BH),12	dup (6),8 dup(0BH),31 dup (6),10 dup(0BH),6 dup	(6),10 dup  +
    297	      (06) 08*(0B) 1F*(06)+  (0BH),65 dup (6),11 dup(0BH),17 dup (6),7 dup(0BH),28 dup (6),12 dup(0BH),49 dup (6),5 dup	    +
    298	      0A*(0B) 06*(06) 0A* +  (0BH),13 dup (6),5	dup(0BH),7 dup (6),4 dup(0BH),11 dup (6)
    299	      (0B) 41*(06) 0B*(0B)+
    300	      11*(06) 07*(0B) 1C* +
    301	      (06) 0C*(0B) 31*(06)+
    302	      05*(0B) 0D*(06) 05* +
    303	      (0B) 07*(06) 04*(0B)+
    304	      0B*(06)
    305	1192  03*(06) 05*(0B) 0E* +	     db	3 dup (6),5 dup(0BH),14	dup (6),4 dup(0BH),36 dup (6),6	dup(0BH),10 dup	(6),6 dup   +
    306	      (06) 04*(0B) 24*(06)+  (0BH),68 dup (6),9	dup(0BH),19 dup	(6),5 dup(0BH),109 dup (6),3 dup(0BH),8	dup (6),3 dup(0BH), +
    307	      06*(0B) 0A*(06) 06* +  12	dup (6)
    308	      (0B) 44*(06) 09*(0B)+
    309	      13*(06) 05*(0B) 6D* +
    310	      (06) 03*(0B) 08*(06)+
    311	      03*(0B) 0C*(06)
    312	12D2  3F*(06) 04*(0B) 0B* +	     db	63 dup (6),4 dup(0BH),11 dup (6),4 dup(0BH),71 dup (6),7 dup(0BH),23 dup (6),1 dup  +
    313	      (06) 04*(0B) 47*(06)+  (0BH),122 dup (6),1 dup(0BH),13 dup (6)
    314	      07*(0B) 17*(06) 01* +
    315	      (0B) 7A*(06) 01*(0B)+
    316	      0D*(06)
    317	1412  0140*(06)			     db	320 dup	(6)
    318	1552  0140*(06)			     db	320 dup	(6)
    319	1692  0140*(06)			     db	320 dup	(6)
    320	17D2  0140*(06)			     db	320 dup	(6)
    321	1912  0140*(06)			     db	320 dup	(6)
    322	1A52  0140*(06)			     db	320 dup	(6)
    323	1B92  0140*(06)			     db	320 dup	(6)
    324	1CD2  0140*(06)			     db	320 dup	(6)
    325
    326	1E12  E100			 terrain_pos dw	320 * 180
    327
    328	1E14  0F 0F 0F 0F 0F 0F	0F+	 ship	     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    329	      0F 0F 0F 0F 0F 00	00+
    330	      00
    331	1E23  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    332	      00 00 00 00 00 00	00+
    333	      00
    334	1E32  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    335	      00 00 00 00 00 00	00+
    336	      00
    337	1E41  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    338	      0F 00 00 00 00 00	00+
    339	      00
    340	1E50  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,15,15,15,15,15,15,15
    341	      0F 0F 0F 0F 0F 0F	0F+
    342	      0F
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 7
MAIN.ASM



    343	1E5F  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    344	      0F 00 00 00 00 00	00+
    345	      00
    346	1E6E  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    347	      00 00 00 00 00 00	00+
    348	      00
    349	1E7D  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    350	      00 00 00 00 00 00	00+
    351	      00
    352	1E8C  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    353	      0F 0F 0F 0F 0F 00	00+
    354	      00
    355
    356	1E9B  0000			 ship_pos dw 0
    357	1E9D  0F			 ship_color db 0FH
    358	1E9E  00			 is_ship_colliding db 0
    359
    360	1E9F  1900 3200	4B00 6400 +	 allies_pos_vec	dw 320 * 20, 320 * 40, 320 * 60, 320 * 80, 320 * 100, 320 * 120, 320 * 140, +
    361	      7D00 9600	AF00 C800    320 * 160
    362
    363					 ; each	bit represents an ally ship
    364	1EAF  FF			 allies_db db 0FFH ; 1111_1111b
    365	1EB0  08			 allies_count db 8
    366
    367	1EB1  00 00 00 00 00 00	00+	 alien_ship  db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    368	      00 09 09 09 09 09	09+
    369	      09
    370	1EC0  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    371	      00 09 09 00 00 00	00+
    372	      00
    373	1ECF  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    374	      00 00 00 00 00 00	00+
    375	      00
    376	1EDE  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    377	      09 00 00 00 00 00	00+
    378	      00
    379	1EED  09 09 09 09 09 09	09+		     db	9,9,9,9,9,9,9,9,9,9,9,9,0,0,0
    380	      09 09 09 09 09 00	00+
    381	      00
    382	1EFC  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    383	      09 00 00 00 00 00	00+
    384	      00
    385	1F0B  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    386	      00 00 00 00 00 00	00+
    387	      00
    388	1F1A  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    389	      00 09 09 00 00 00	00+
    390	      00
    391	1F29  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    392	      00 09 09 09 09 09	09+
    393	      09
    394
    395	1F38  0000			 alien_ship_pos	dw 0
    396
    397	1F3A  0F 0F 0F 0F 0F 0F	0F+	 shot	     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    398	      0F 0F 00 00 00 00	00+
    399	      00
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 8
MAIN.ASM



    400	1F49  0F*(00)				     db	15 dup (0)
    401	1F58  0F*(00)				     db	15 dup (0)
    402	1F67  0F*(00)				     db	15 dup (0)
    403	1F76  00 00 00 00 00 00	0F+		     db	0,0,0,0,0,0,15,15,15,15,15,15,15,15,15
    404	      0F 0F 0F 0F 0F 0F	0F+
    405	      0F
    406	1F85  0F*(00)				     db	15 dup (0)
    407	1F94  0F*(00)				     db	15 dup (0)
    408	1FA3  0F*(00)				     db	15 dup (0)
    409	1FB2  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    410	      0F 0F 00 00 00 00	00+
    411	      00
    412
    413	1FC1			     .code
    414				     ; Procedimento para navegação no	menu usando as setas
    415	0000			     HANDLE_INPUT PROC
    416	0000  80 FC 48			 cmp ah, 48H
    417	0003  74 08			 je ARROW_UP
    418
    419	0005  80 FC 50			 cmp ah, 50H
    420	0008  74 0C			 je ARROW_DOWN
    421
    422	000A  EB 1A 90			 jmp END_HANDLE
    423
    424	000D			     ARROW_UP:
    425	000D  32 E4			 xor ah, ah
    426	000F  88 26 0000r		 mov menu, ah
    427
    428	0013  EB 07 90			 jmp RENDER_BUTTONS
    429
    430	0016			     ARROW_DOWN:
    431	0016  B4 01			 mov ah, 1
    432	0018  88 26 0000r		 mov menu, ah
    433
    434	001C			     RENDER_BUTTONS:
    435	001C  80 3E 0001r 00		 cmp screen, 0
    436	0021  75 03			 jne END_HANDLE
    437	0023  E8 0125			 call PRINT_BUTTONS
    438
    439	0026			     END_HANDLE:
    440	0026  C3			 ret
    441	0027			     ENDP
    442
    443
    444
    445				     ; Proc para controle da nave
    446	0027			     HANDLE_CONTROLS proc
    447	0027  56			 push si
    448	0028  57			 push di
    449	0029  50			 push ax
    450	002A  53			 push bx
    451
    452	002B  BE 1E9Br			 mov si, offset	ship_pos
    453	002E  8B 3C			 mov di, [si]
    454
    455	0030  80 FC 48			 cmp ah, 48H
    456	0033  74 15			 je MOVE_UP
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 9
MAIN.ASM



    457
    458	0035  80 FC 50			 cmp ah, 50H
    459	0038  74 2D			 je MOVE_DOWN
    460
    461	003A  80 FC 39			 cmp ah, 39H
    462	003D  74 45			 je SHOOT
    463
    464	003F  3C 71			 cmp al, 'q'
    465	0041  75 52			 jne END_CONTROLS
    466
    467	0043  33 C0			 xor ax, ax
    468	0045  CD 16			 int 16h
    469	0047  E8 0633			 call END_GAME
    470
    471	004A			     MOVE_UP:
    472	004A  B0 01			 mov al, 1
    473	004C  E8 00B0			 call CLEAR_SPRITE
    474
    475	004F  8B 1E 1E9Br		 mov bx, [ship_pos]
    476	0053  81 FB 192F		 cmp bx, 320 * 20 + 47
    477	0057  72 3C			 jb END_CONTROLS
    478	0059  74 3A			 je END_CONTROLS
    479
    480	005B  B4 01			 mov ah, 1
    481	005D  8B 1E 000Fr		 mov bx, ship_speed
    482	0061  E8 0048			 call MOVE_SPRITE
    483	0064  EB 2F 90			 jmp END_CONTROLS
    484
    485	0067			     MOVE_DOWN:
    486	0067  B0 01			 mov al, 1
    487	0069  E8 0093			 call CLEAR_SPRITE
    488
    489	006C  8B 1E 1E9Br		 mov bx, [ship_pos]
    490	0070  81 FB C82F		 cmp bx, 320 * 160 + 47
    491	0074  74 1F			 je END_CONTROLS
    492	0076  77 1D			 ja END_CONTROLS
    493
    494	0078  32 E4			 xor ah, ah
    495	007A  8B 1E 000Fr		 mov bx, ship_speed
    496	007E  E8 002B			 call MOVE_SPRITE
    497	0081  EB 12 90			 jmp END_CONTROLS
    498
    499	0084			     SHOOT:
    500	0084  8A 26 0003r		 mov ah, did_shoot
    501	0088  80 FC 01			 cmp ah, 1
    502	008B  74 08			 je END_CONTROLS
    503
    504	008D  E8 0518			 call RESET_SHOT
    505	0090  C6 06 0003r 01		 mov did_shoot,	1
    506
    507	0095			     END_CONTROLS:
    508	0095  5B			 pop bx
    509	0096  58			 pop ax
    510	0097  5F			 pop di
    511	0098  5E			 pop si
    512	0099  C3			 ret
    513	009A			     endp
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 10
MAIN.ASM



    514
    515	009A			     PRINT_TITLE_MENU proc
    516	009A  8C D8			 mov ax, ds
    517	009C  8E C0			 mov es, ax
    518
    519	009E  BD 001Ar			 mov bp, offset	string
    520	00A1  B9 00F5			 mov cx, string_length ; tamanho
    521	00A4  B3 02			 mov bl, 02H ; Cor verde (se bit 1 de AL estiver limpo,	usamos BL)
    522	00A6  33 D2			 xor dx, dx ;linha / coluna
    523	00A8  E8 0028			 call PRINT_STRING
    524
    525	00AB  C3			 ret
    526	00AC			     endp
    527
    528				     ; AL = axis (0 is X, 1 is Y)
    529				     ; AH = direction (0 is positive, 1	is negative)
    530				     ; SI = position pointer
    531				     ; BX = increment
    532	00AC			     MOVE_SPRITE proc
    533	00AC  56			 push si
    534	00AD  50			 push ax
    535	00AE  53			 push bx
    536
    537	00AF  8B 0C			 mov cx, [si]
    538	00B1  3C 00			 cmp al, 0
    539	00B3  75 03			 jne MOVE_Y_AXIS
    540	00B5  EB 0A 90			 jmp CHECK_DIRECTION
    541
    542	00B8			     MOVE_Y_AXIS:
    543	00B8  50			 push ax
    544	00B9  B8 0140			 mov ax, 320
    545	00BC  F7 E3			 mul bx
    546	00BE  8B D8			 mov bx, ax
    547	00C0  58			 pop ax
    548
    549	00C1			     CHECK_DIRECTION:
    550	00C1  80 FC 00			 cmp ah, 0
    551	00C4  75 05			 jne MOVE_NEGATIVE
    552	00C6  03 CB			 add cx, bx
    553	00C8  EB 03 90			 jmp SAVE_POS
    554
    555	00CB			     MOVE_NEGATIVE:
    556	00CB  2B CB			 sub cx, bx
    557
    558	00CD			     SAVE_POS:
    559	00CD  89 0C			 mov [si], cx
    560
    561	00CF  5B			 pop bx
    562	00D0  58			 pop ax
    563	00D1  5E			 pop si
    564	00D2  C3			 ret
    565	00D3			     endp
    566
    567	00D3			     PRINT_STRING PROC
    568	00D3  50			 push AX
    569	00D4  53			 push BX
    570	00D5  1E			 push DS
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 11
MAIN.ASM



    571	00D6  06			 push ES
    572	00D7  56			 push SI
    573	00D8  55			 push BP
    574
    575					 ; Configura os	parâmetros para a função 13h
    576	00D9  B4 13			 mov ah, 13h	     ; Função	para escrever string com atributos de cor
    577	00DB  B0 01			 mov al, 1	     ; Modo: atualiza cursor após a escrita
    578							     ; AL = 1 -> modo de atualização de cursor
    579	00DD  32 FF			 xor bh, bh	      ;	Página	de vídeo 0
    580	00DF  CD 10			 int 10h	     ; Chamada de interrupção	para exibir a string
    581
    582	00E1  5D			 pop BP
    583	00E2  5E			 pop SI
    584	00E3  07			 pop ES
    585	00E4  1F			 pop DS
    586	00E5  5B			 pop BX
    587	00E6  58			 pop AX
    588	00E7  C3			 ret
    589	00E8			     ENDP
    590
    591				     ; SI = sprite pointer
    592				     ; BL = color
    593	00E8			     CHANGE_SPRITE_COLOR proc
    594	00E8  50			 push ax
    595	00E9  53			 push bx
    596	00EA  51			 push cx
    597	00EB  56			 push si
    598
    599	00EC  B9 0087			 mov cx, 15*9
    600
    601	00EF			     PIXEL_LOOP:
    602	00EF  8A 04			 mov al, [si]
    603	00F1  3C 00			 cmp al, 0
    604	00F3  74 02			 jz SKIP_REPLACE
    605	00F5  88 1C			 mov [si], bl
    606
    607	00F7			     SKIP_REPLACE:
    608	00F7  46			 inc si
    609	00F8  E2 F5			 loop PIXEL_LOOP
    610
    611	00FA  5E			 pop si
    612	00FB  59			 pop cx
    613	00FC  5B			 pop bx
    614	00FD  58			 pop ax
    615	00FE  C3			 ret
    616	00FF			     endp
    617
    618				     ; DI = sprite position
    619	00FF			     CLEAR_SPRITE proc
    620	00FF  50			 push ax
    621	0100  51			 push cx
    622	0101  57			 push di
    623	0102  06			 push es
    624
    625	0103  B8 A000			 mov ax, 0A000H
    626	0106  8E C0			 mov es, ax
    627	0108  B9 0009			 mov cx, 9
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 12
MAIN.ASM



    628
    629	010B			     CLEAR_LINE:
    630	010B  51			 push cx
    631	010C  B9 000F			 mov cx, 15
    632	010F  33 C0			 xor ax, ax
    633	0111  F3> AA			 rep stosb
    634	0113  81 C7 0131		 add di, 305
    635	0117  59			 pop cx
    636	0118  E2 F1			 loop CLEAR_LINE
    637
    638	011A  07			 pop es
    639	011B  5F			 pop di
    640	011C  59			 pop cx
    641	011D  58			 pop ax
    642	011E  C3			 ret
    643	011F			     endp
    644
    645				     ; AX = sprite position
    646				     ; SI = sprite pointer
    647	011F			     RENDER_SPRITE proc
    648	011F  53			 push bx
    649	0120  51			 push cx
    650	0121  52			 push dx
    651	0122  57			 push di
    652	0123  06			 push es
    653	0124  1E			 push ds
    654	0125  50			 push ax
    655
    656	0126  B8 0000s			 mov ax, @data
    657	0129  8E D8			 mov ds, ax
    658
    659	012B  B8 A000			 mov ax, 0A000h
    660	012E  8E C0			 mov es, ax
    661
    662	0130  58			 pop ax
    663	0131  8B F8			 mov di, ax
    664	0133  BA 0009			 mov dx, 9
    665	0136  50			 push ax
    666
    667	0137			     DRAW_LINE:
    668	0137  B9 000F			 mov cx, 15
    669	013A  F3> A4			 rep movsb
    670	013C  81 C7 0131		 add di, 320 - 15
    671	0140  4A			 dec dx
    672	0141  75 F4			 jnz DRAW_LINE
    673
    674	0143  58			 pop ax
    675	0144  1F			 pop ds
    676	0145  07			 pop es
    677	0146  5F			 pop di
    678	0147  5A			 pop dx
    679	0148  59			 pop cx
    680	0149  5B			 pop bx
    681	014A  C3		     ret
    682	014B			     endp
    683
    684				     ; Procedimento para exibir	os botões INICIAR e SAIR
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 13
MAIN.ASM



    685	014B			     PRINT_BUTTONS proc
    686	014B  50			 push ax
    687	014C  B3 0F			 mov bl, 0FH
    688	014E  8A 26 0000r		 mov ah, menu
    689	0152  80 FC 00			 cmp ah, 0
    690	0155  75 02			 jne START_BTN
    691	0157  B3 0C			 mov bl, 0CH
    692
    693	0159			     START_BTN:
    694					 ; Exibe o botão INICIAR
    695	0159  BD 0470r			 mov bp, offset	btn_iniciar
    696	015C  B9 0051			 mov cx, btn_iniciar_length ; tamanho
    697	015F  32 D2			 xor dl, dl ; coluna
    698	0161  B6 12			 mov dh, 18 ; linha
    699	0163  E8 FF6D			 call PRINT_STRING
    700
    701	0166  B3 0F			 mov bl, 0FH
    702	0168  8A 26 0000r		 mov ah, menu
    703	016C  80 FC 01			 cmp ah, 1
    704	016F  75 02			 jne EXIT_BTN
    705	0171  B3 0C			 mov bl, 0CH
    706
    707	0173			     EXIT_BTN:
    708	0173  BD 04C1r			 mov bp, offset	btn_sair
    709	0176  B9 0051			 mov cx, btn_sair_length
    710	0179  32 D2			 xor dl, dl ; coluna
    711	017B  B6 15			 mov dh, 21 ; linha
    712	017D  E8 FF53			 call PRINT_STRING
    713
    714	0180  58			 pop ax
    715	0181  C3			 ret
    716	0182			     endp
    717
    718	0182			     RESET_CROSS_SHIP_POS proc
    719	0182  50			 push ax
    720
    721	0183  B8 7D00			 mov ax, 100 * 320
    722	0186  A3 1E9Br			 mov ship_pos, ax
    723	0189  05 0131			 add ax, 305
    724	018C  A3 1F38r			 mov alien_ship_pos, ax
    725
    726	018F  58			 pop ax
    727	0190  C3			 ret
    728	0191			     endp
    729
    730	0191			     CROSS_SHIPS proc
    731	0191  A1 1E9Br			 mov ax, ship_pos
    732	0194  8B F8			 mov di, ax
    733	0196  E8 FF66			 call CLEAR_SPRITE
    734
    735	0199  3D 7E31			 cmp ax, 101*320-15
    736	019C  74 17			 je MOVE_ALIEN_SHIP
    737
    738	019E  FF 06 1E9Br		 inc ship_pos
    739	01A2  40			 inc ax
    740	01A3  BE 1E14r			 mov si, offset	ship
    741	01A6  E8 FF76			 call RENDER_SPRITE
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 14
MAIN.ASM



    742
    743	01A9  33 C9			 xor cx, cx
    744	01AB  BA C350			 mov dx, 0C350H
    745	01AE  B4 86			 mov ah, 86H
    746	01B0  CD 15			 int 15h
    747	01B2  EB 2A 90			 jmp END_POS_UPDATE
    748
    749	01B5			     MOVE_ALIEN_SHIP:
    750	01B5  A1 1F38r			 mov ax, alien_ship_pos
    751	01B8  8B F8			 mov di, ax
    752
    753	01BA  50			 push ax
    754	01BB  3D 7D00			 cmp ax, 100*320
    755	01BE  58			 pop ax
    756
    757	01BF  74 1A			 je RESET_POS
    758	01C1  E8 FF3B			 call CLEAR_SPRITE
    759
    760	01C4  FF 0E 1F38r		 dec alien_ship_pos
    761	01C8  48			 dec ax
    762	01C9  BE 1EB1r			 mov si, offset	alien_ship
    763	01CC  E8 FF50			 call RENDER_SPRITE
    764
    765	01CF  33 C9			 xor cx, cx
    766	01D1  BA C350			 mov dx, 0C350H
    767	01D4  B4 86			 mov ah, 86H
    768	01D6  CD 15			 int 15h
    769	01D8  EB 04 90			 jmp END_POS_UPDATE
    770
    771	01DB			     RESET_POS:
    772	01DB  E8 FFA4			 call RESET_CROSS_SHIP_POS
    773
    774	01DE			     END_POS_UPDATE:
    775	01DE  C3			 ret
    776	01DF			     endp
    777
    778	01DF			     RENDER_ALLY_SHIPS proc
    779	01DF  56			 push si
    780	01E0  57			 push di
    781	01E1  52			 push dx
    782	01E2  51			 push cx
    783	01E3  53			 push bx
    784	01E4  50			 push ax
    785
    786	01E5  B9 0008			 mov cx, 8
    787	01E8  BB 1E9Fr			 mov bx, offset	allies_pos_vec
    788	01EB  8A 16 1EAFr		 mov dl, allies_db
    789
    790	01EF			     RENDER_SINGLE:
    791	01EF  8B 07			 mov ax, [bx]
    792	01F1  BE 1E14r			 mov si, offset	ship
    793
    794	01F4  51			 push cx
    795	01F5  53			 push bx
    796	01F6  50			 push ax
    797
    798					 ; get color based on iteration
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 15
MAIN.ASM



    799	01F7  8A D9			 mov bl, cl
    800	01F9  80 C3 06			 add bl, 6
    801
    802	01FC  FE C9			 dec cl
    803	01FE  B0 01			 mov al, 1
    804	0200  D2 E0			 shl al, cl
    805	0202  22 C2			 and al, dl
    806
    807	0204  58			 pop ax
    808	0205  75 08			 jnz NO_CLEAR
    809	0207  8B F8			 mov di, ax
    810	0209  E8 FEF3			 call CLEAR_SPRITE
    811	020C  EB 07 90			 jmp AFTER_CLEAR
    812
    813	020F			     NO_CLEAR:
    814	020F  E8 FED6			 call CHANGE_SPRITE_COLOR
    815	0212  E8 FF0A			 call RENDER_SPRITE
    816
    817	0215			     AFTER_CLEAR:
    818	0215  5B			 pop bx
    819	0216  59			 pop cx
    820	0217  83 C3 02			 add bx, 2
    821	021A  E2 D3			 loop RENDER_SINGLE
    822
    823	021C  58			 pop ax
    824	021D  5B			 pop bx
    825	021E  59			 pop cx
    826	021F  5A			 pop dx
    827	0220  5F			 pop di
    828	0221  5E			 pop si
    829	0222  C3			 ret
    830	0223			     endp
    831
    832	0223			     CLEAR_SCREEN proc
    833	0223  50			 push ax
    834	0224  51			 push cx
    835	0225  06			 push es
    836	0226  57			 push di
    837
    838	0227  B8 A000			 mov ax,0A000h
    839	022A  8E C0			 mov es,ax
    840	022C  33 FF			 xor di, di
    841	022E  B9 7D00			 mov cx, 32000d
    842	0231  FC			 cld
    843	0232  33 C0			 xor ax, ax
    844	0234  F3> AB			 rep stosw
    845
    846	0236  5F			 pop di
    847	0237  07			 pop es
    848	0238  59			 pop cx
    849	0239  58			 pop ax
    850	023A  C3			 ret
    851	023B			     endp
    852
    853	023B			     SHOW_YOU_WIN proc
    854	023B  E8 FFE5			 call CLEAR_SCREEN
    855
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 16
MAIN.ASM



    856	023E  BD 03CAr			 mov bp, offset	you_win
    857	0241  B9 00A0			 mov cx, you_win_len
    858	0244  B3 0A			 mov bl, 0AH
    859	0246  32 D2			 xor dl, dl
    860	0248  B6 07			 mov dh, 7
    861	024A  E8 FE86			 call PRINT_STRING
    862
    863	024D  B3 0F			 mov bl, 0FH ; color = white
    864
    865	024F  BD 010Fr			 mov bp, offset	score_str
    866	0252  B9 0006			 mov cx, score_str_len
    867	0255  B2 0C			 mov dl, 12
    868	0257  B6 0D			 mov dh, 13
    869	0259  E8 FE77			 call PRINT_STRING
    870
    871	025C  BD 0008r			 mov bp, offset	score_buffer
    872	025F  B9 0005			 mov cx, score_buffer_len
    873	0262  B2 14			 mov dl, 20
    874	0264  B6 0D			 mov dh, 13
    875	0266  E8 FE6A			 call PRINT_STRING
    876
    877	0269  33 C0			 xor ax, ax
    878	026B  CD 16			 int 16h
    879	026D  E8 040D			 call END_GAME
    880
    881	0270  C3			 ret
    882	0271			     endp
    883
    884				     ; This proc uses LCG to generate a	random number.
    885				     ; returns in AX a random 16 bit unsigned integer
    886	0271			     RANDOM_UINT16 proc
    887	0271  52			 push dx
    888
    889	0272  B8 9A75			 mov ax, 39541
    890	0275  F7 26 0018r		 mul seed
    891	0279  05 3F83			 add ax, 16259
    892	027C  A3 0018r			 mov seed, ax
    893
    894	027F  5A			 pop dx
    895	0280  C3			 ret
    896	0281			     endp
    897
    898				     ; AH = range upper	boundary (max 255)
    899				     ; return random 8 bit unsigned interger to	AL, between 0 and 254
    900	0281			     RANDOM_UINT8_RANGE	proc
    901	0281  53			 push bx
    902	0282  51			 push cx
    903	0283  52			 push dx
    904	0284  50			 push ax
    905
    906	0285  33 C9			 xor cx, cx
    907	0287  8A CC			 mov cl, ah
    908
    909	0289  E8 FFE5			 call RANDOM_UINT16
    910
    911	028C  33 D2			 xor dx, dx
    912	028E  8B D9			 mov bx, cx
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 17
MAIN.ASM



    913	0290  F7 F3			 div bx
    914
    915	0292  58			 pop ax
    916
    917	0293  8A C2			 mov al, dl
    918
    919	0295  5A			 pop dx
    920	0296  59			 pop cx
    921	0297  5B			 pop bx
    922	0298  C3			 ret
    923	0299			     endp
    924
    925	0299			     SHOW_GAME_OVER proc
    926	0299  E8 FF87			 call CLEAR_SCREEN
    927
    928	029C  BD 02E3r			 mov bp, offset	game_over
    929	029F  B9 00E7			 mov cx, game_over_len
    930	02A2  B3 0C			 mov bl, 0CH
    931	02A4  32 D2			 xor dl, dl ; coluna
    932	02A6  B6 08			 mov dh, 8 ; linha
    933	02A8  E8 FE28			 call PRINT_STRING
    934
    935	02AB  33 C0			 xor ax, ax
    936	02AD  CD 16			 int 16h
    937	02AF  E8 03CB			 call END_GAME
    938	02B2  C3			 ret
    939	02B3			     endp
    940
    941				     ; SI = first position
    942				     ; DI = second position
    943				     ; return CL = 1 if	positions collide
    944	02B3			     CHECK_COLLISION proc
    945	02B3  55			 push bp
    946	02B4  50			 push ax
    947	02B5  53			 push bx
    948	02B6  52			 push dx
    949
    950	02B7  8B EC			 mov bp, sp
    951
    952	02B9  33 D2			 xor dx, dx
    953	02BB  32 C9			 xor cl, cl
    954	02BD  BB 0140			 mov bx, 320
    955
    956	02C0  8B C6			 mov ax, si
    957	02C2  33 D2			 xor dx, dx
    958	02C4  F7 F3			 div bx
    959
    960	02C6  52			 push dx ; value of X1 - [bp-2]
    961	02C7  50			 push ax ; value of Y1 - [bp-4]
    962
    963	02C8  8B C7			 mov ax, di
    964	02CA  33 D2			 xor dx, dx
    965	02CC  F7 F3			 div bx
    966
    967	02CE  52			 push dx ; value of X2 - [bp-6]
    968
    969	02CF			     CHECK_Y_IN_RANGE:
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 18
MAIN.ASM



    970	02CF  05 0009			 add ax, 9
    971	02D2  73 03			 jnc SKIP_Y_MAX
    972	02D4  B8 FFFF			 mov ax, 0FFFFH
    973
    974	02D7			     SKIP_Y_MAX:
    975	02D7  8B 56 FC			 mov dx, [bp - 4]
    976	02DA  3B D0			 cmp dx, ax
    977	02DC  77 2A			 ja END_COLLISION
    978
    979	02DE  2D 0012			 sub ax, 18
    980	02E1  73 02			 jnc SKIP_Y_MIN
    981	02E3  33 C0			 xor ax, ax
    982
    983	02E5			     SKIP_Y_MIN:
    984	02E5  3B D0			 cmp dx, ax
    985	02E7  72 1F			 jb END_COLLISION
    986
    987	02E9			     CHECK_X_IN_RANGE:
    988	02E9  8B 46 FE			 mov ax, [bp - 2]
    989	02EC  05 000F			 add ax, 15
    990	02EF  73 03			 jnc SKIP_X_MAX
    991	02F1  B8 FFFF			 mov ax, 0FFFFH
    992
    993	02F4			     SKIP_X_MAX:
    994	02F4  8B 56 FA			 mov dx, [bp - 6]
    995	02F7  3B D0			 cmp dx, ax
    996	02F9  77 0D			 ja END_COLLISION
    997
    998	02FB  2D 001E			 sub ax, 30
    999	02FE  73 02			 jnc SKIP_X_MIN
   1000	0300  33 C0			 xor ax, ax
   1001
   1002	0302			     SKIP_X_MIN:
   1003	0302  3B D0			 cmp dx, ax
   1004	0304  72 02			 jb END_COLLISION
   1005
   1006	0306  B1 01			 mov cl, 1
   1007
   1008	0308			     END_COLLISION:
   1009
   1010	0308  8B E5			 mov sp, bp
   1011
   1012	030A  5A			 pop dx
   1013	030B  5B			 pop bx
   1014	030C  58			 pop ax
   1015	030D  5D			 pop bp
   1016	030E  C3			 ret
   1017	030F			     endp
   1018
   1019	030F			     RENDER_SECTOR proc
   1020	030F  50			 push ax
   1021	0310  53			 push bx
   1022	0311  51			 push cx
   1023	0312  52			 push dx
   1024	0313  55			 push bp
   1025
   1026	0314  E8 FF0C			 call CLEAR_SCREEN
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 19
MAIN.ASM



   1027
   1028					 ; Print Sector
   1029	0317  33 C0			 xor ax, ax
   1030	0319  A0 0002r			 mov al, sector
   1031
   1032	031C  3C 04			 cmp al, 4
   1033	031E  75 03			 jne SUM_POINTS
   1034	0320  E8 FF18			 call SHOW_YOU_WIN
   1035
   1036	0323			     SUM_POINTS:
   1037	0323  FE C8			 dec al	; number vector	index
   1038
   1039	0325  BB 03E8			 mov bx, 1000
   1040	0328  F7 E3			 mul bx
   1041	032A  33 DB			 xor bx, bx
   1042	032C  8A 1E 1EB0r		 mov bl, allies_count
   1043	0330  F7 E3			 mul bx
   1044	0332  01 06 0006r		 add score, ax
   1045
   1046	0336  33 C0			 xor ax, ax
   1047	0338  A0 0002r			 mov al, sector
   1048	033B  FE C8			 dec al	; number vector	index
   1049	033D  D0 E0			 shl al, 1 ; multiply by 2 (since num_vec values are dw)
   1050	033F  BB 046Ar			 mov bx, offset	sector_vec ; get the vector
   1051	0342  03 D8			 add bx, ax ; add the index to the vector ptr
   1052	0344  8B 2F			 mov bp, [bx] ;	set BP to base address of number
   1053	0346  B9 0098			 mov cx, sector_len
   1054	0349  32 D2			 xor dl, dl; line
   1055	034B  B6 0A			 mov dh, 10
   1056
   1057	034D  B4 06			 mov ah, 6 ; random value from 0 to 5
   1058	034F  E8 FF2F			 call RANDOM_UINT8_RANGE
   1059	0352  8A D8			 mov bl, al
   1060	0354  80 C3 09			 add bl, 9H
   1061	0357  E8 FD79			 call PRINT_STRING
   1062
   1063					 ; Wait	4s
   1064	035A  B9 003D			 mov cx, 3DH
   1065	035D  BA 0900			 mov dx, 900H
   1066	0360  B4 86			 mov ah, 86H
   1067	0362  CD 15			 int 15h
   1068
   1069	0364  E8 FEBC			 call CLEAR_SCREEN
   1070
   1071	0367  5D			 pop bp
   1072	0368  5A			 pop dx
   1073	0369  59			 pop cx
   1074	036A  5B			 pop bx
   1075	036B  58			 pop ax
   1076	036C  C3			 ret
   1077	036D			     endp
   1078
   1079	036D			     RESET_ENEMY proc
   1080	036D  57			 push di
   1081	036E  50			 push ax
   1082	036F  53			 push bx
   1083	0370  52			 push dx
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 20
MAIN.ASM



   1084
   1085	0371  8B 3E 0013r		 mov di, enemy_pos
   1086	0375  E8 FD87			 call CLEAR_SPRITE
   1087
   1088	0378  33 D2			 xor dx, dx
   1089	037A  B8 0140			 mov ax, 320
   1090
   1091	037D  50			 push ax
   1092
   1093	037E  B4 8C			 mov ah, 140
   1094	0380  E8 FEFE			 call RANDOM_UINT8_RANGE
   1095	0383  33 DB			 xor bx, bx
   1096	0385  8A D8			 mov bl, al
   1097	0387  80 C3 14			 add bl, 20
   1098
   1099	038A  58			 pop ax
   1100
   1101	038B  F7 E3			 mul bx
   1102	038D  05 010E			 add ax, 270
   1103	0390  A3 0013r			 mov enemy_pos,	ax
   1104
   1105	0393  5A			 pop dx
   1106	0394  5B			 pop bx
   1107	0395  58			 pop ax
   1108	0396  5F			 pop di
   1109	0397  C3			 ret
   1110	0398			     endp
   1111
   1112	0398			     UPDATE_ENEMY proc
   1113	0398  56			 push si
   1114	0399  57			 push di
   1115	039A  50			 push ax
   1116	039B  53			 push bx
   1117
   1118	039C  B8 0100			 mov ax, 0100H
   1119	039F  BE 0013r			 mov si, offset	enemy_pos
   1120
   1121	03A2  8B 3C			 mov di, [si]
   1122	03A4  E8 FD58			 call CLEAR_SPRITE
   1123	03A7  BB 0001			 mov bx, 1
   1124	03AA  E8 FCFF			 call MOVE_SPRITE
   1125	03AD  E8 00E5			 call RENDER_ENEMY
   1126
   1127	03B0  8A 3E 0003r		 mov bh, did_shoot
   1128	03B4  80 FF 01			 cmp bh, 1
   1129	03B7  75 23			 jne CHECK_SHIP_COLLISION
   1130
   1131	03B9  8B 36 0011r		 mov si, shot_pos
   1132	03BD  8B 3E 0013r		 mov di, enemy_pos
   1133	03C1  E8 FEEF			 call CHECK_COLLISION
   1134	03C4  80 F9 01			 cmp cl, 1
   1135	03C7  75 13			 jne CHECK_SHIP_COLLISION
   1136	03C9  C6 06 0017r 01		 mov rerender_score, 1
   1137	03CE  83 06 0006r 64		 add score, 100
   1138	03D3  E8 FD29			 call CLEAR_SPRITE
   1139	03D6  E8 01CF			 call RESET_SHOT
   1140	03D9  E8 FF91			 call RESET_ENEMY
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 21
MAIN.ASM



   1141
   1142	03DC			     CHECK_SHIP_COLLISION:
   1143	03DC  8B 36 1E9Br		 mov si, ship_pos
   1144	03E0  E8 FED0			 call CHECK_COLLISION
   1145	03E3  80 F9 01			 cmp cl, 1
   1146	03E6  75 3A			 jne RESET_SHIP_COLLISION
   1147
   1148	03E8  8A 26 1E9Er		 mov ah, is_ship_colliding
   1149	03EC  80 FC 01			 cmp ah, 1
   1150	03EF  74 68			 je END_ENEMY_UPDATE
   1151
   1152	03F1  80 3E 1EAFr 00		 cmp allies_db,	0
   1153	03F6  75 03			 jne CONTINUE_COLLISION
   1154	03F8  E8 FE9E			 call SHOW_GAME_OVER
   1155
   1156	03FB			     CONTINUE_COLLISION:
   1157	03FB  C6 06 1E9Er 01		 mov is_ship_colliding,	1
   1158	0400  8A 26 1EAFr		 mov ah, allies_db
   1159	0404  D0 EC			 shr ah, 1
   1160	0406  88 26 1EAFr		 mov allies_db,	ah
   1161	040A  C6 06 0016r 01		 mov rerender_allies, 1
   1162	040F  C6 06 0015r 01		 mov rerender_ship, 1
   1163	0414  E8 FF56			 call RESET_ENEMY
   1164	0417  FE 0E 1E9Dr		 dec ship_color
   1165	041B  FE 0E 1EB0r		 dec allies_count
   1166	041F  EB 38 90			 jmp END_ENEMY_UPDATE
   1167
   1168	0422			     RESET_SHIP_COLLISION:
   1169	0422  C6 06 1E9Er 00		 mov is_ship_colliding,	0
   1170
   1171	0427			     CHECK_EOS:	; end of screen
   1172	0427  33 D2			 xor dx, dx
   1173	0429  8B C7			 mov ax, di
   1174	042B  BB 0140			 mov bx, 320
   1175	042E  F7 F3			 div bx
   1176	0430  83 FA 00			 cmp dx, 0
   1177	0433  75 24			 jne END_ENEMY_UPDATE
   1178	0435  E8 FF35			 call RESET_ENEMY
   1179	0438  C6 06 0016r 01		 mov rerender_allies, 1
   1180	043D  C6 06 0017r 01		 mov rerender_score, 1
   1181	0442  33 D2			 xor dx, dx
   1182	0444  B8 000A			 mov ax, 10
   1183	0447  8A 16 0002r		 mov dl, sector
   1184	044B  F7 E2			 mul dx
   1185	044D  29 06 0006r		 sub score, ax
   1186	0451  73 06			 jnc END_ENEMY_UPDATE
   1187	0453  C7 06 0006r 0000		 mov score, 0
   1188
   1189	0459			     END_ENEMY_UPDATE:
   1190	0459  5B			 pop bx
   1191	045A  58			 pop ax
   1192	045B  5F			 pop di
   1193	045C  5E			 pop si
   1194	045D  C3			 ret
   1195	045E			     endp
   1196
   1197	045E			     RENDER_TERRAIN proc
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 22
MAIN.ASM



   1198	045E  53			 push bx
   1199	045F  51			 push cx
   1200	0460  52			 push dx
   1201	0461  57			 push di
   1202	0462  06			 push es
   1203	0463  1E			 push ds
   1204	0464  50			 push ax
   1205
   1206	0465  B8 0000s			 mov ax, @data
   1207	0468  8E D8			 mov ds, ax
   1208
   1209	046A  B8 A000			 mov ax, 0A000h
   1210	046D  8E C0			 mov es, ax
   1211
   1212	046F  BE 0512r			 mov si, offset	terrain
   1213	0472  8B 3E 1E12r		 mov di, terrain_pos
   1214	0476  FF 0E 1E12r		 dec terrain_pos
   1215					 ; mov bx, terrain_pos
   1216	047A  81 3E 1E12r E0FF		 cmp terrain_pos, 320*180 - 1
   1217	0480  75 06			 jnz SKIP_POS_UPDATE
   1218	0482  C7 06 1E12r E23F		 mov terrain_pos, 320*181 - 1
   1219
   1220	0488			     SKIP_POS_UPDATE:
   1221	0488  B9 1900			 mov cx, 320*20
   1222	048B  F3> A4			 rep movsb
   1223
   1224	048D  58			 pop ax
   1225	048E  1F			 pop ds
   1226	048F  07			 pop es
   1227	0490  5F			 pop di
   1228	0491  5A			 pop dx
   1229	0492  59			 pop cx
   1230	0493  5B			 pop bx
   1231	0494  C3			 ret
   1232	0495			     endp
   1233
   1234	0495			     RENDER_ENEMY proc
   1235	0495  56			 push si
   1236	0496  50			 push ax
   1237
   1238	0497  A1 0013r			 mov ax, enemy_pos
   1239	049A  BE 1EB1r			 mov si, offset	alien_ship
   1240	049D  E8 FC7F			 call RENDER_SPRITE
   1241
   1242	04A0  58			 pop ax
   1243	04A1  5E			 pop si
   1244	04A2  C3			 ret
   1245	04A3			     endp
   1246
   1247	04A3			     RESET_SHIP	proc
   1248	04A3  C7 06 1E9Br 76E9		 mov ship_pos, 320 * 95	+ 41 ; Ship stating position
   1249	04A9  C3			 ret
   1250	04AA			     endp
   1251
   1252	04AA			     RENDER_SHIP proc
   1253	04AA  56			 push si
   1254	04AB  57			 push di
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 23
MAIN.ASM



   1255	04AC  53			 push bx
   1256	04AD  50			 push ax
   1257
   1258	04AE  A1 1E9Br			 mov ax, ship_pos
   1259	04B1  8B F8			 mov di, ax
   1260	04B3  E8 FC49			 call CLEAR_SPRITE
   1261
   1262	04B6  BE 1E14r			 mov si, offset	ship
   1263	04B9  8A 1E 1E9Dr		 mov bl, ship_color ; white
   1264	04BD  E8 FC28			 call CHANGE_SPRITE_COLOR
   1265	04C0  E8 FC5C			 call RENDER_SPRITE
   1266
   1267	04C3  58			 pop ax
   1268	04C4  5B			 pop bx
   1269	04C5  5F			 pop di
   1270	04C6  5E			 pop si
   1271	04C7  C3			 ret
   1272	04C8			     endp
   1273
   1274	04C8			     UPDATE_SHIP proc
   1275	04C8  56			 push si
   1276	04C9  57			 push di
   1277	04CA  50			 push ax
   1278	04CB  53			 push bx
   1279
   1280	04CC  B4 01			 mov ah, 1H
   1281	04CE  CD 16			 int 16H
   1282	04D0  74 0A			 jz END_SHIP_UPDATE
   1283
   1284	04D2  E8 FB52			 call HANDLE_CONTROLS
   1285	04D5  32 E4			 xor ah, ah
   1286	04D7  CD 16			 int 16H
   1287
   1288	04D9  E8 FFCE			 call RENDER_SHIP
   1289
   1290	04DC			     END_SHIP_UPDATE:
   1291
   1292	04DC  5B			 pop bx
   1293	04DD  58			 pop ax
   1294	04DE  5F			 pop di
   1295	04DF  5E			 pop si
   1296	04E0  C3			 ret
   1297	04E1			     endp
   1298
   1299				     ; AX = uint16 value to output
   1300				     ; SI = offset of end off string buffer
   1301				     ; CX = number of digits to	write
   1302	04E1			     CONVERT_UINT16 proc
   1303	04E1  56			 push si
   1304	04E2  50			 push ax
   1305	04E3  53			 push bx
   1306	04E4  51			 push cx
   1307	04E5  52			 push dx
   1308
   1309	04E6  BB 000A			 mov bx, 10
   1310
   1311	04E9			     LOOP_DIV:
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 24
MAIN.ASM



   1312	04E9  33 D2			 xor dx, dx
   1313	04EB  F7 F3			 div bx
   1314
   1315	04ED  80 C2 30			 add dl, '0'
   1316	04F0  88 14			 mov byte ptr ds:[si], dl
   1317	04F2  4E			 dec si
   1318
   1319	04F3  3D 0000			 cmp ax, 0
   1320	04F6  49			 dec cx
   1321	04F7  75 F0			 jnz LOOP_DIV
   1322
   1323	04F9  83 F9 00			 cmp cx, 0
   1324	04FC  74 04			 je END_CONVERSION
   1325
   1326	04FE  B2 30			 mov dl, '0'
   1327	0500  88 14			 mov byte ptr ds:[si], dl
   1328
   1329	0502			     END_CONVERSION:
   1330	0502  5A			 pop dx
   1331	0503  59			 pop cx
   1332	0504  5B			 pop bx
   1333	0505  58			 pop ax
   1334	0506  5E			 pop si
   1335	0507  C3			 ret
   1336	0508			     endp
   1337
   1338	0508			     RENDER_SCORE proc
   1339	0508  56			 push si
   1340	0509  55			 push bp
   1341	050A  50			 push ax
   1342	050B  53			 push bx
   1343	050C  51			 push cx
   1344	050D  52			 push dx
   1345
   1346	050E  BD 010Fr			 mov bp, offset	score_str
   1347	0511  B9 0006			 mov cx, score_str_len
   1348	0514  B3 0F			 mov bl, 0FH ; white
   1349	0516  33 D2			 xor dx, dx
   1350	0518  E8 FBB8			 call PRINT_STRING
   1351
   1352	051B  A1 0006r			 mov ax, score
   1353	051E  BE 0008r			 mov si, offset	score_buffer
   1354	0521  83 C6 04			 add si, score_buffer_len - 1
   1355	0524  B9 0005			 mov cx, score_buffer_len
   1356	0527  E8 FFB7			 call CONVERT_UINT16
   1357
   1358	052A  BD 0008r			 mov bp, offset	score_buffer
   1359	052D  B3 02			 mov bl, 02H ; green
   1360	052F  32 F6			 xor dh, dh
   1361	0531  B2 08			 mov dl, 8
   1362	0533  E8 FB9D			 call PRINT_STRING
   1363
   1364	0536  5A			 pop dx
   1365	0537  59			 pop cx
   1366	0538  5B			 pop bx
   1367	0539  58			 pop ax
   1368	053A  5D			 pop bp
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 25
MAIN.ASM



   1369	053B  5E			 pop si
   1370
   1371	053C  C3			 ret
   1372	053D			     endp
   1373
   1374	053D			     RENDER_TIME proc
   1375	053D  55			 push bp
   1376	053E  53			 push bx
   1377	053F  51			 push cx
   1378	0540  52			 push dx
   1379
   1380	0541  BD 0115r			 mov bp, offset	time_str
   1381	0544  B9 0006			 mov cx, time_str_len
   1382	0547  B3 0F			 mov bl, 0FH ; white
   1383	0549  32 F6			 xor dh, dh
   1384	054B  B2 19			 mov dl, 25
   1385	054D  E8 FB83			 call PRINT_STRING
   1386
   1387	0550  33 C0			 xor ax, ax
   1388	0552  A0 0005r			 mov al, time
   1389	0555  BE 000Dr			 mov si, offset	time_buffer
   1390	0558  83 C6 01			 add si, time_buffer_len - 1
   1391	055B  B9 0002			 mov cx, 2
   1392	055E  E8 FF80			 call CONVERT_UINT16
   1393
   1394	0561  BD 000Dr			 mov bp, offset	time_buffer
   1395	0564  B9 0002			 mov cx, time_buffer_len
   1396	0567  B3 02			 mov bl, 02H ; green
   1397	0569  32 F6			 xor dh, dh
   1398	056B  B2 20			 mov dl, 32
   1399	056D  E8 FB63			 call PRINT_STRING
   1400
   1401	0570  5A			 pop dx
   1402	0571  59			 pop cx
   1403	0572  5B			 pop bx
   1404	0573  5D			 pop bp
   1405
   1406	0574  C3			 ret
   1407	0575			     endp
   1408
   1409	0575			     UPDATE_TIME proc
   1410	0575  50			 push ax
   1411
   1412	0576  8A 26 0004r		 mov ah, timeout
   1413	057A  FE C4			 inc ah
   1414	057C  80 FC 64			 cmp ah, 100
   1415	057F  75 21			 jne SAVE_TIMEOUT
   1416
   1417	0581  8A 26 0005r		 mov ah, time
   1418	0585  FE CC			 dec ah
   1419	0587  75 13			 jnz SAVE_TIME
   1420
   1421	0589  8A 26 0002r		 mov ah, sector
   1422	058D  FE C4			 inc ah
   1423	058F  88 26 0002r		 mov sector, ah
   1424
   1425	0593  E8 FD79			 call RENDER_SECTOR
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 26
MAIN.ASM



   1426	0596  E8 0094			 call RESET
   1427
   1428	0599  EB 0B 90			 jmp END_TIME
   1429
   1430	059C			     SAVE_TIME:
   1431	059C  88 26 0005r		 mov time, ah
   1432	05A0  32 E4			 xor ah, ah
   1433
   1434	05A2			     SAVE_TIMEOUT:
   1435	05A2  88 26 0004r		 mov timeout, ah
   1436
   1437	05A6			     END_TIME:
   1438	05A6  58			 pop ax
   1439	05A7  C3			 ret
   1440	05A8			     endp
   1441
   1442	05A8			     RESET_SHOT	proc
   1443	05A8  57			 push di
   1444	05A9  53			 push bx
   1445
   1446	05AA  8B 3E 0011r		 mov di, shot_pos
   1447	05AE  E8 FB4E			 call CLEAR_SPRITE
   1448
   1449	05B1  8B 1E 1E9Br		 mov bx, ship_pos
   1450	05B5  83 C3 0F			 add bx, 15
   1451	05B8  89 1E 0011r		 mov shot_pos, bx
   1452	05BC  C6 06 0003r 00		 mov did_shoot,	0
   1453
   1454	05C1  5B			 pop bx
   1455	05C2  5F			 pop di
   1456	05C3  C3			 ret
   1457	05C4			     endp
   1458
   1459	05C4			     UPDATE_SHOT proc
   1460	05C4  57			 push di
   1461	05C5  56			 push si
   1462	05C6  50			 push ax
   1463	05C7  53			 push bx
   1464	05C8  52			 push dx
   1465
   1466	05C9  8A 1E 0003r		 mov bl, did_shoot
   1467	05CD  80 FB 01			 cmp bl, 1
   1468	05D0  75 33			 jne END_SHOT
   1469
   1470	05D2  33 D2			 xor dx, dx
   1471	05D4  A1 0011r			 mov ax, shot_pos
   1472	05D7  05 000F			 add ax, 15
   1473	05DA  BB 0140			 mov bx, 320
   1474	05DD  F7 F3			 div bx
   1475	05DF  83 FA 00			 cmp dx, 0
   1476	05E2  75 06			 jne MOVE_SHOT
   1477
   1478	05E4  E8 FFC1			 call RESET_SHOT
   1479	05E7  EB 1C 90			 jmp END_SHOT
   1480
   1481	05EA			     MOVE_SHOT:
   1482	05EA  8B 3E 0011r		 mov di, shot_pos
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 27
MAIN.ASM



   1483	05EE  E8 FB0E			 call CLEAR_SPRITE
   1484
   1485	05F1  BB 0003			 mov bx, 3 ; TODO: change to `shot_speed`
   1486	05F4  33 C0			 xor ax, ax
   1487	05F6  BE 0011r			 mov si, offset	shot_pos
   1488	05F9  E8 FAB0			 call MOVE_SPRITE
   1489
   1490	05FC  A1 0011r			 mov ax, shot_pos
   1491	05FF  BE 1F3Ar			 mov si, offset	shot
   1492	0602  E8 FB1A			 call RENDER_SPRITE
   1493
   1494	0605			     END_SHOT:
   1495	0605  5A			 pop dx
   1496	0606  5B			 pop bx
   1497	0607  58			 pop ax
   1498	0608  5E			 pop si
   1499	0609  5F			 pop di
   1500	060A  C3			 ret
   1501	060B			     endp
   1502
   1503	060B			     RESET_TIME	proc
   1504	060B  50			 push ax
   1505
   1506	060C  32 E4			 xor ah, ah
   1507	060E  88 26 0004r		 mov timeout, ah
   1508	0612  B4 3C			 mov ah, 60
   1509	0614  88 26 0005r		 mov time, ah
   1510
   1511	0618  58			 pop ax
   1512	0619			     endp
   1513
   1514	0619			     RESET_RERENDERS proc
   1515	0619  50			 push ax
   1516
   1517	061A  B4 01			 mov ah, 1
   1518	061C  C6 06 0015r 01		 mov rerender_ship, 1
   1519	0621  C6 06 0016r 01		 mov rerender_allies, 1
   1520	0626  C6 06 0017r 01		 mov rerender_score, 1
   1521
   1522	062B  58			 pop ax
   1523	062C  C3			 ret
   1524	062D			     endp
   1525
   1526	062D			     RESET proc	; Contains all procedures for reseting values
   1527	062D  E8 FE73			 call RESET_SHIP
   1528	0630  E8 FD3A			 call RESET_ENEMY
   1529	0633  E8 FFD5			 call RESET_TIME
   1530	0636  E8 FFE0			 call RESET_RERENDERS
   1531	0639  C3			 ret
   1532	063A			     endp
   1533
   1534	063A			     UPDATE proc ; Contains all	procedures for updating	game state
   1535	063A  E8 FE8B			 call UPDATE_SHIP
   1536	063D  E8 FF35			 call UPDATE_TIME
   1537	0640  E8 FF81			 call UPDATE_SHOT
   1538	0643  E8 FD52			 call UPDATE_ENEMY
   1539	0646  C3			 ret
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 28
MAIN.ASM



   1540	0647			     endp
   1541
   1542	0647			     RENDER proc ; Contains all	procedures for rendering game objects
   1543	0647  50			 push ax
   1544	0648  E8 FEF2			 call RENDER_TIME
   1545	064B  E8 FE10			 call RENDER_TERRAIN
   1546
   1547					 ; should re-render ship?
   1548	064E  A0 0015r			 mov al, rerender_ship
   1549	0651  3C 00			 cmp al, 0
   1550	0653  74 08			 je SKIP_2_ALLIES
   1551	0655  E8 FE52			 call RENDER_SHIP
   1552	0658  C6 06 0015r 00		 mov rerender_ship, 0
   1553
   1554	065D			     SKIP_2_ALLIES:
   1555					 ; should re-render allies?
   1556	065D  A0 0016r			 mov al, rerender_allies
   1557	0660  3C 01			 cmp al, 1
   1558	0662  75 08			 jne SKIP_2_SCORE
   1559	0664  E8 FB78			 call RENDER_ALLY_SHIPS
   1560	0667  C6 06 0016r 00		 mov rerender_allies, 0
   1561
   1562	066C			     SKIP_2_SCORE:
   1563					 ; should re-render score?
   1564	066C  A0 0017r			 mov al, rerender_score
   1565	066F  3C 01			 cmp al, 1
   1566	0671  75 08			 jne END_RENDER
   1567	0673  E8 FE92			 call RENDER_SCORE
   1568	0676  C6 06 0017r 00		 mov rerender_score, 0
   1569
   1570	067B			     END_RENDER:
   1571	067B  58			 pop ax
   1572	067C  C3			 ret
   1573	067D			     endp
   1574
   1575	067D			     END_GAME proc
   1576					 ; Back	to text	mode
   1577	067D  32 E4			 xor ah, ah
   1578	067F  B0 03			 mov al, 3h
   1579	0681  CD 10			 int 10h
   1580
   1581					 ; Ends	program
   1582	0683  B4 4C			 mov ah, 4ch
   1583	0685  32 C0			 xor al, al
   1584	0687  CD 21			 int 21h
   1585	0689  C3			 ret
   1586	068A			     endp
   1587
   1588	068A			     THROTTLE proc
   1589	068A  50			 push ax
   1590	068B  51			 push cx
   1591	068C  52			 push dx
   1592
   1593	068D  33 C9			 xor cx, cx
   1594	068F  BA 2710			 mov dx, 2710H
   1595	0692  B4 86			 mov ah, 86H
   1596	0694  CD 15			 int 15h
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 29
MAIN.ASM



   1597
   1598	0696  5A			 pop dx
   1599	0697  59			 pop cx
   1600	0698  58			 pop ax
   1601	0699  C3			 ret
   1602	069A			     endp
   1603
   1604	069A			     SYSTIME_SEED proc
   1605	069A  50			 push ax
   1606	069B  51			 push cx
   1607	069C  52			 push dx
   1608
   1609	069D  33 C0			 xor ax, ax
   1610	069F  CD 1A			 int 1AH
   1611	06A1  89 16 0018r		 mov seed, dx
   1612
   1613	06A5  5A			 pop dx
   1614	06A6  59			 pop cx
   1615	06A7  58			 pop ax
   1616	06A8  C3			 ret
   1617	06A9			     endp
   1618
   1619	06A9			     MAIN proc
   1620	06A9  B8 0000s			 mov AX, @data
   1621	06AC  8E D8			 mov DS, AX
   1622	06AE  B8 A000			 mov AX, 0A000H
   1623	06B1  8E C0			 mov ES, AX
   1624	06B3  33 FF			 xor DI, DI
   1625
   1626	06B5  E8 FFE2			 call SYSTIME_SEED
   1627
   1628					 ; Define o modo de video
   1629	06B8  32 E4			 xor ah, ah
   1630	06BA  32 FF			 xor bh, bh
   1631	06BC  B0 13			 mov al, 13h
   1632	06BE  CD 10			 int 10h
   1633
   1634					 ; Exibe título e botões do menu
   1635	06C0  E8 F9D7			 call PRINT_TITLE_MENU
   1636	06C3  E8 FA85			 call PRINT_BUTTONS
   1637	06C6  E8 FAB9			 call RESET_CROSS_SHIP_POS
   1638
   1639	06C9			     MENU_LOOP:
   1640	06C9  E8 FAC5			 call CROSS_SHIPS
   1641
   1642					 ; Recebe entrada do usuário
   1643	06CC  B4 01			 mov ah, 1H
   1644	06CE  CD 16			 int 16H
   1645	06D0  74 F7			 jz MENU_LOOP
   1646
   1647					 ; Chama a função de navegação
   1648	06D2  E8 F92B			 call HANDLE_INPUT
   1649
   1650					 ; Condição para iniciar o jogo
   1651	06D5  80 FC 1C			 cmp ah, 1CH
   1652	06D8  74 06			 je SELECT_OPTION
   1653
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 30
MAIN.ASM



   1654					 ; Retorno ao loop do menu
   1655	06DA  32 E4			 xor ah, ah
   1656	06DC  CD 16			 int 16H
   1657	06DE  EB E9			 jmp MENU_LOOP
   1658
   1659	06E0			     SELECT_OPTION:
   1660	06E0  32 E4			 xor ah, ah
   1661	06E2  CD 16			 int 16H
   1662
   1663	06E4  8A 26 0000r		 mov ah, menu
   1664	06E8  80 FC 01			 cmp ah, 1
   1665	06EB  74 14			 je FINISH
   1666
   1667	06ED  E8 FC1F			 call RENDER_SECTOR
   1668
   1669	06F0  E8 FF3A			 call RESET
   1670	06F3  E8 FDB4			 call RENDER_SHIP
   1671
   1672	06F6			     GAME_LOOP:
   1673	06F6  E8 FF91			 call THROTTLE
   1674	06F9  E8 FF3E			 call UPDATE
   1675	06FC  E8 FF48			 call RENDER
   1676
   1677	06FF  EB F5			 jmp GAME_LOOP
   1678
   1679	0701			     FINISH:
   1680	0701  E8 FF79			 CALL END_GAME
   1681
   1682	0704  C3			 ret
   1683	0705			     endp
   1684
   1685				     end MAIN
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 31
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/11/24"
??FILENAME			  Text	 "MAIN	  "
??TIME				  Text	 "20:44:07"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
AFTER_CLEAR			  Near	 _TEXT:0215
ALIEN_SHIP			  Byte	 DGROUP:1EB1
ALIEN_SHIP_POS			  Word	 DGROUP:1F38
ALLIES_COUNT			  Byte	 DGROUP:1EB0
ALLIES_DB			  Byte	 DGROUP:1EAF
ALLIES_POS_VEC			  Word	 DGROUP:1E9F
ARROW_DOWN			  Near	 _TEXT:0016
ARROW_UP			  Near	 _TEXT:000D
BTN_INICIAR			  Byte	 DGROUP:0470
BTN_INICIAR_LENGTH		  Number 0051
BTN_SAIR			  Byte	 DGROUP:04C1
BTN_SAIR_LENGTH			  Number 0051
CHANGE_SPRITE_COLOR		  Near	 _TEXT:00E8
CHECK_COLLISION			  Near	 _TEXT:02B3
CHECK_DIRECTION			  Near	 _TEXT:00C1
CHECK_EOS			  Near	 _TEXT:0427
CHECK_SHIP_COLLISION		  Near	 _TEXT:03DC
CHECK_X_IN_RANGE		  Near	 _TEXT:02E9
CHECK_Y_IN_RANGE		  Near	 _TEXT:02CF
CLEAR_LINE			  Near	 _TEXT:010B
CLEAR_SCREEN			  Near	 _TEXT:0223
CLEAR_SPRITE			  Near	 _TEXT:00FF
CONTINUE_COLLISION		  Near	 _TEXT:03FB
CONVERT_UINT16			  Near	 _TEXT:04E1
CROSS_SHIPS			  Near	 _TEXT:0191
DID_SHOOT			  Byte	 DGROUP:0003
DRAW_LINE			  Near	 _TEXT:0137
END_COLLISION			  Near	 _TEXT:0308
END_CONTROLS			  Near	 _TEXT:0095
END_CONVERSION			  Near	 _TEXT:0502
END_ENEMY_UPDATE		  Near	 _TEXT:0459
END_GAME			  Near	 _TEXT:067D
END_HANDLE			  Near	 _TEXT:0026
END_POS_UPDATE			  Near	 _TEXT:01DE
END_RENDER			  Near	 _TEXT:067B
END_SHIP_UPDATE			  Near	 _TEXT:04DC
END_SHOT			  Near	 _TEXT:0605
END_TIME			  Near	 _TEXT:05A6
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 32
Symbol Table



ENEMY_POS			  Word	 DGROUP:0013
EXIT_BTN			  Near	 _TEXT:0173
FINISH				  Near	 _TEXT:0701
GAME_LOOP			  Near	 _TEXT:06F6
GAME_OVER			  Byte	 DGROUP:02E3
GAME_OVER_LEN			  Number 00E7
HANDLE_CONTROLS			  Near	 _TEXT:0027
HANDLE_INPUT			  Near	 _TEXT:0000
IS_SHIP_COLLIDING		  Byte	 DGROUP:1E9E
LOOP_DIV			  Near	 _TEXT:04E9
MAIN				  Near	 _TEXT:06A9
MENU				  Byte	 DGROUP:0000
MENU_LOOP			  Near	 _TEXT:06C9
MOVE_ALIEN_SHIP			  Near	 _TEXT:01B5
MOVE_DOWN			  Near	 _TEXT:0067
MOVE_NEGATIVE			  Near	 _TEXT:00CB
MOVE_SHOT			  Near	 _TEXT:05EA
MOVE_SPRITE			  Near	 _TEXT:00AC
MOVE_UP				  Near	 _TEXT:004A
MOVE_Y_AXIS			  Near	 _TEXT:00B8
NO_CLEAR			  Near	 _TEXT:020F
PIXEL_LOOP			  Near	 _TEXT:00EF
PRINT_BUTTONS			  Near	 _TEXT:014B
PRINT_STRING			  Near	 _TEXT:00D3
PRINT_TITLE_MENU		  Near	 _TEXT:009A
RANDOM_UINT16			  Near	 _TEXT:0271
RANDOM_UINT8_RANGE		  Near	 _TEXT:0281
RENDER				  Near	 _TEXT:0647
RENDER_ALLY_SHIPS		  Near	 _TEXT:01DF
RENDER_BUTTONS			  Near	 _TEXT:001C
RENDER_ENEMY			  Near	 _TEXT:0495
RENDER_SCORE			  Near	 _TEXT:0508
RENDER_SECTOR			  Near	 _TEXT:030F
RENDER_SHIP			  Near	 _TEXT:04AA
RENDER_SINGLE			  Near	 _TEXT:01EF
RENDER_SPRITE			  Near	 _TEXT:011F
RENDER_TERRAIN			  Near	 _TEXT:045E
RENDER_TIME			  Near	 _TEXT:053D
RERENDER_ALLIES			  Byte	 DGROUP:0016
RERENDER_SCORE			  Byte	 DGROUP:0017
RERENDER_SHIP			  Byte	 DGROUP:0015
RESET				  Near	 _TEXT:062D
RESET_CROSS_SHIP_POS		  Near	 _TEXT:0182
RESET_ENEMY			  Near	 _TEXT:036D
RESET_POS			  Near	 _TEXT:01DB
RESET_RERENDERS			  Near	 _TEXT:0619
RESET_SHIP			  Near	 _TEXT:04A3
RESET_SHIP_COLLISION		  Near	 _TEXT:0422
RESET_SHOT			  Near	 _TEXT:05A8
RESET_TIME			  Near	 _TEXT:060B
SAVE_POS			  Near	 _TEXT:00CD
SAVE_TIME			  Near	 _TEXT:059C
SAVE_TIMEOUT			  Near	 _TEXT:05A2
SCORE				  Word	 DGROUP:0006
SCORE_BUFFER			  Byte	 DGROUP:0008
SCORE_BUFFER_LEN		  Number 0005
SCORE_STR			  Byte	 DGROUP:010F
Turbo Assembler	 Version 4.1	    12/11/24 20:44:08	    Page 33
Symbol Table



SCORE_STR_LEN			  Number 0006
SCREEN				  Byte	 DGROUP:0001
SECTOR				  Byte	 DGROUP:0002
SECTOR_LEN			  Number 0098
SECTOR_ONE			  Byte	 DGROUP:011B
SECTOR_THREE			  Byte	 DGROUP:024B
SECTOR_TWO			  Byte	 DGROUP:01B3
SECTOR_VEC			  Word	 DGROUP:046A
SEED				  Word	 DGROUP:0018
SELECT_OPTION			  Near	 _TEXT:06E0
SHIP				  Byte	 DGROUP:1E14
SHIP_COLOR			  Byte	 DGROUP:1E9D
SHIP_POS			  Word	 DGROUP:1E9B
SHIP_SPEED			  Word	 DGROUP:000F
SHOOT				  Near	 _TEXT:0084
SHOT				  Byte	 DGROUP:1F3A
SHOT_POS			  Word	 DGROUP:0011
SHOW_GAME_OVER			  Near	 _TEXT:0299
SHOW_YOU_WIN			  Near	 _TEXT:023B
SKIP_2_ALLIES			  Near	 _TEXT:065D
SKIP_2_SCORE			  Near	 _TEXT:066C
SKIP_POS_UPDATE			  Near	 _TEXT:0488
SKIP_REPLACE			  Near	 _TEXT:00F7
SKIP_X_MAX			  Near	 _TEXT:02F4
SKIP_X_MIN			  Near	 _TEXT:0302
SKIP_Y_MAX			  Near	 _TEXT:02D7
SKIP_Y_MIN			  Near	 _TEXT:02E5
START_BTN			  Near	 _TEXT:0159
STRING				  Byte	 DGROUP:001A
STRING_LENGTH			  Number 00F5
SUM_POINTS			  Near	 _TEXT:0323
SYSTIME_SEED			  Near	 _TEXT:069A
TERRAIN				  Byte	 DGROUP:0512
TERRAIN_POS			  Word	 DGROUP:1E12
THROTTLE			  Near	 _TEXT:068A
TIME				  Byte	 DGROUP:0005
TIMEOUT				  Byte	 DGROUP:0004
TIME_BUFFER			  Byte	 DGROUP:000D
TIME_BUFFER_LEN			  Number 0002
TIME_STR			  Byte	 DGROUP:0115
TIME_STR_LEN			  Number 0006
UPDATE				  Near	 _TEXT:063A
UPDATE_ENEMY			  Near	 _TEXT:0398
UPDATE_SHIP			  Near	 _TEXT:04C8
UPDATE_SHOT			  Near	 _TEXT:05C4
UPDATE_TIME			  Near	 _TEXT:0575
YOU_WIN				  Byte	 DGROUP:03CA
YOU_WIN_LEN			  Number 00A0

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0400 Para	  Stack	  STACK
  _DATA				  16  1FC1 Word	  Public  DATA
_TEXT				  16  0705 Word	  Public  CODE
