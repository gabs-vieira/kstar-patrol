Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 1
MAIN.ASM



      1	0000			     .model small
      2	0000			     .stack
      3
      4	0000			     .data
      5	0000  00			 menu db 0
      6					 ; 0 - Menu
      7					 ; 1 - Setor
      8					 ; 2 - Jogo
      9					 ; 3 - Game Over
     10	0001  00			 screen	db 0
     11	0002  01			 sector	db 1
     12	0003  00			 did_shoot db 0
     13	0004  00			 timeout db 0
     14	0005  3C			 time db 60
     15	0006  0000			 score dw 0
     16
     17	0008  30 30 30 30 30		 score_buffer db '00000'
     18	      =0005			 score_buffer_len equ $-score_buffer
     19
     20	000D  30 30			 time_buffer db	'00'
     21	      =0002			 time_buffer_len equ $-time_buffer
     22
     23	000F  0005			 ship_speed dw 5
     24
     25	0011  23BE			 shot_pos dw 305*30
     26	0013  23BE			 enemy_pos dw 305*30
     27
     28					 ; Re-renders
     29	0015  01			 rerender_ship db 1
     30	0016  01			 rerender_allies db 1
     31	0017  01			 rerender_score	db 1
     32
     33					 ; For pseudo random number generation
     34	0018  0000			 seed dw 0
     35
     36					 ; Strings para	o título e botões
     37	001A  07*(20) 20 5F 20 20 +	 string	 db 7 dup(" ")," _  __	 ___ _		  ",13,10
     38	      5F 5F 20 20 20 5F	5F+
     39	      5F 20 5F 20 20 20	20+
     40	      20 20 20 20 20 20	20+
     41	      20 0D 0A
     42	003D  07*(20) 7C 20 7C 2F +		 db 7 dup(" "),"| |/ /__/ __| |_ __ _ _	_ ",13,10
     43	      20 2F 5F 5F 2F 20	5F+
     44	      5F 7C 20 7C 5F 20	5F+
     45	      5F 20 5F 20 5F 20	5F+
     46	      20 0D 0A
     47	0060  07*(20) 7C 20 27 20 +		 db 7 dup(" "),"| ' <___\__ \  _/ _` | '_|",13,10
     48	      3C 5F 5F 5F 5C 5F	5F+
     49	      20 5C 20 20 5F 2F	20+
     50	      5F 60 20 7C 20 27	5F+
     51	      7C 0D 0A
     52	0083  07*(20) 7C 5F 7C 5C +		 db 7 dup(" "),"|_|\_\	|___/\__\__,_|_|  ",13,10
     53	      5F 5C 20 20 7C 5F	5F+
     54	      5F 2F 5C 5F 5F 5C	5F+
     55	      5F 2C 5F 7C 5F 7C	20+
     56	      20 0D 0A
     57	00A6  07*(20) 7C 20 5F 20 +		 db 7 dup(" "),"| _ \__	_| |_ _	_ ___| |  ",13,10
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 2
MAIN.ASM



     58	      5C 5F 5F 20 5F 7C	20+
     59	      7C 5F 20 5F 20 5F	20+
     60	      5F 5F 5F 7C 20 7C	20+
     61	      20 0D 0A
     62	00C9  07*(20) 7C 20 20 5F +		 db 7 dup(" "),"|  _/ _` |  _| '_/ _ \ |  ",13,10
     63	      2F 20 5F 60 20 7C	20+
     64	      20 5F 7C 20 27 5F	2F+
     65	      20 5F 20 5C 20 7C	20+
     66	      20 0D 0A
     67	00EC  07*(20) 7C 5F 7C 20 +		 db 7 dup(" "),"|_| \__,_|\__|_| \___/_|  ",13,10
     68	      5C 5F 5F 2C 5F 7C	5C+
     69	      5F 5F 7C 5F 7C 20	5C+
     70	      5F 5F 5F 2F 5F 7C	20+
     71	      20 0D 0A
     72
     73	      =00F5			 string_length equ $-string
     74
     75	010F  53 43 4F 52 45 3A		 score_str db "SCORE:"
     76	      =0006			 score_str_len equ $-score_str
     77
     78	0115  54 45 4D 50 4F 3A		 time_str db "TEMPO:"
     79	      =0006			 time_str_len equ $-time_str
     80
     81	011B  05*(20) 20 5F 5F 5F +	 sector_one  db	5 dup("	"), " ___	_	       _    ",13,10
     82	      20 20 20 20 20 20	20+
     83	      5F 20 20 20 20 20	20+
     84	      20 20 20 20 20 20	20+
     85	      20 5F 20 20 20 20	0D+
     86	      0A
     87	0141  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   /	|   ",13,10
     88	      7C 20 5F 5F 5F 20	7C+
     89	      20 7C 5F 20 5F 5F	5F+
     90	      20 5F 20 5F 20 20	20+
     91	      2F 20 7C 20 20 20	0D+
     92	      0A
     93	0167  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|  |	|   ",13,10
     94	      5C 2F 20 2D 5F 29	7C+
     95	      20 20 5F 2F 20 5F	20+
     96	      5C 20 27 5F 7C 20	20+
     97	      7C 20 7C 20 20 20	0D+
     98	      0A
     99	018D  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    |_|   ",13,10
    100	      2F 5C 5F 5F 5F 5C	20+
    101	      5C 5F 5F 5C 5F 5F	5F+
    102	      2F 5F 7C 20 20 20	20+
    103	      7C 5F 7C 20 20 20	0D+
    104	      0A
    105
    106	01B3  05*(20) 20 5F 5F 5F +	 sector_two  db	5 dup("	"), " ___	_	       ___  ",13,10
    107	      20 20 20 20 20 20	20+
    108	      5F 20 20 20 20 20	20+
    109	      20 20 20 20 20 20	20+
    110	      20 5F 5F 5F 20 20	0D+
    111	      0A
    112	01D9  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   |_  ) ",13,10
    113	      7C 20 5F 5F 5F 20	7C+
    114	      20 7C 5F 20 5F 5F	5F+
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 3
MAIN.ASM



    115	      20 5F 20 5F 20 20	20+
    116	      7C 5F 20 20 29 20	0D+
    117	      0A
    118	01FF  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|   / /  ",13,10
    119	      5C 2F 20 2D 5F 29	7C+
    120	      20 20 5F 2F 20 5F	20+
    121	      5C 20 27 5F 7C 20	20+
    122	      20 2F 20 2F 20 20	0D+
    123	      0A
    124	0225  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    /___| ",13,10
    125	      2F 5C 5F 5F 5F 5C	20+
    126	      5C 5F 5F 5C 5F 5F	5F+
    127	      2F 5F 7C 20 20 20	20+
    128	      2F 5F 5F 5F 7C 20	0D+
    129	      0A
    130
    131	024B  05*(20) 20 5F 5F 5F +	 sector_three	 db 5 dup(" "),	" ___	    _		   ____	",13,10
    132	      20 20 20 20 20 20	20+
    133	      5F 20 20 20 20 20	20+
    134	      20 20 20 20 20 20	20+
    135	      20 5F 5F 5F 5F 20	0D+
    136	      0A
    137	0271  05*(20) 2F 20 5F 5F +			 db 5 dup(" "),	"/ __| ___ | |_	___ _ _	  |__ /	",13,10
    138	      7C 20 5F 5F 5F 20	7C+
    139	      20 7C 5F 20 5F 5F	5F+
    140	      20 5F 20 5F 20 20	20+
    141	      7C 5F 5F 20 2F 20	0D+
    142	      0A
    143	0297  05*(20) 5C 5F 5F 20 +			 db 5 dup(" "),	"\__ \/	-_)|  _/ _ \ '_|   |_ \	",13,10
    144	      5C 2F 20 2D 5F 29	7C+
    145	      20 20 5F 2F 20 5F	20+
    146	      5C 20 27 5F 7C 20	20+
    147	      20 7C 5F 20 5C 20	0D+
    148	      0A
    149	02BD  05*(20) 7C 5F 5F 5F +			 db 5 dup(" "),	"|___/\___\ \__\___/_|	  |___/	",13,10
    150	      2F 5C 5F 5F 5F 5C	20+
    151	      5C 5F 5F 5C 5F 5F	5F+
    152	      2F 5F 7C 20 20 20	20+
    153	      7C 5F 5F 5F 2F 20	0D+
    154	      0A
    155
    156	      =0098			 sector_len equ	$-sector_three
    157
    158	02E3  0A*(20) 20 20 5F 5F +	 game_over   db	10 dup(" "), "	___		   ",13,10
    159	      5F 20 20 20 20 20	20+
    160	      20 20 20 20 20 20	20+
    161	      20 20 20 0D 0A
    162	0304  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / __|__ _ _ __  ___ ",13,10
    163	      5F 7C 5F 5F 20 5F	20+
    164	      5F 20 5F 5F 20 20	5F+
    165	      5F 5F 20 0D 0A
    166	0325  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_ / _`	| '  \/	-_)",13,10
    167	      20 2F 20 5F 60 20	7C+
    168	      20 27 20 20 5C 2F	20+
    169	      2D 5F 29 0D 0A
    170	0346  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___\__,_|_|_|_\___|",13,10
    171	      5F 5C 5F 5F 2C 5F	7C+
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 4
MAIN.ASM



    172	      5F 7C 5F 7C 5F 5C	5F+
    173	      5F 5F 7C 0D 0A
    174	0367  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / _ \__ _____ _ _   ",13,10
    175	      20 5C 5F 5F 20 5F	5F+
    176	      5F 5F 5F 20 5F 20	5F+
    177	      20 20 20 0D 0A
    178	0388  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_) \ V	/ -_) '_|  ",13,10
    179	      29 20 5C 20 56 20	2F+
    180	      20 2D 5F 29 20 27	5F+
    181	      7C 20 20 0D 0A
    182	03A9  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___/ \_/\___|_|	   ",13,10
    183	      5F 2F 20 5C 5F 2F	5C+
    184	      5F 5F 5F 7C 5F 7C	20+
    185	      20 20 20 0D 0A
    186
    187	      =00E7			 game_over_len equ $-game_over
    188
    189	03CA  20 5F 5F 20 20 20	5F+	 you_win db " __   __		       _	 _ ",13,10
    190	      5F 20 20 20 20 20	20+
    191	      20 20 20 20 20 20	20+
    192	      20 20 20 20 20 5F	20+
    193	      20 20 20 20 20 20	20+
    194	      20 5F 20 0D 0A
    195	03F2  20 5C 20 5C 20 2F	20+		 db " \	\ / /__	_ _  __	___ __|	|___ _ _| |",13,10
    196	      2F 5F 5F 20 5F 20	5F+
    197	      20 20 5F 5F 20 5F	5F+
    198	      5F 20 5F 5F 7C 20	7C+
    199	      5F 5F 5F 20 5F 20	5F+
    200	      7C 20 7C 0D 0A
    201	041A  20 20 5C 20 56 20	2F+		 db "  \ V / -_) ' \/ _/ -_) _`	/ _ \ '_|_|",13,10
    202	      20 2D 5F 29 20 27	20+
    203	      5C 2F 20 5F 2F 20	2D+
    204	      5F 29 20 5F 60 20	2F+
    205	      20 5F 20 5C 20 27	5F+
    206	      7C 5F 7C 0D 0A
    207	0442  20 20 20 5C 5F 2F	5C+		 db "	\_/\___|_||_\__\___\__,_\___/_|	(_)",13,10
    208	      5F 5F 5F 7C 5F 7C	7C+
    209	      5F 5C 5F 5F 5C 5F	5F+
    210	      5F 5C 5F 5F 2C 5F	5C+
    211	      5F 5F 5F 2F 5F 7C	20+
    212	      28 5F 29 0D 0A
    213
    214	      =00A0			 you_win_len equ $-you_win
    215
    216	046A  011Br 01B3r 024Br		 sector_vec dw offset sector_one, offset sector_two, offset sector_three
    217
    218	0470  0E*(20) DA C4 C4 C4 +	 btn_iniciar db	 14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    219	      C4 C4 C4 C4 C4 C4	BF+
    220	      0D 0A
    221	048B  0E*(20) B3 20 49 4E +		      db 14 dup(" "),179," INICIAR ",179,10,13
    222	      49 43 49 41 52 20	B3+
    223	      0A 0D
    224	04A6  0E*(20) C0 C4 C4 C4 +		      db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    225	      C4 C4 C4 C4 C4 C4	D9+
    226	      0D 0A
    227
    228	      =0051			 btn_iniciar_length equ	$-btn_iniciar
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 5
MAIN.ASM



    229
    230	04C1  0E*(20) DA C4 C4 C4 +	 btn_sair db  14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    231	      C4 C4 C4 C4 C4 C4	BF+
    232	      0D 0A
    233	04DC  0E*(20) B3 20 20 53 +		   db 14 dup(" "),179,"	 SAIR	",179,10,13
    234	      41 49 52 20 20 20	B3+
    235	      0A 0D
    236	04F7  0E*(20) C0 C4 C4 C4 +		   db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    237	      C4 C4 C4 C4 C4 C4	D9+
    238	      0D 0A
    239
    240	      =0051			 btn_sair_length equ $-btn_sair
    241
    242	0512  0F 0F 0F 0F 0F 0F	0F+	 ship	     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    243	      0F 0F 0F 0F 0F 00	00+
    244	      00
    245	0521  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    246	      00 00 00 00 00 00	00+
    247	      00
    248	0530  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    249	      00 00 00 00 00 00	00+
    250	      00
    251	053F  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    252	      0F 00 00 00 00 00	00+
    253	      00
    254	054E  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,15,15,15,15,15,15,15
    255	      0F 0F 0F 0F 0F 0F	0F+
    256	      0F
    257	055D  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    258	      0F 00 00 00 00 00	00+
    259	      00
    260	056C  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    261	      00 00 00 00 00 00	00+
    262	      00
    263	057B  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    264	      00 00 00 00 00 00	00+
    265	      00
    266	058A  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    267	      0F 0F 0F 0F 0F 00	00+
    268	      00
    269
    270	0599  0000			 ship_pos dw 0
    271	059B  0F			 ship_color db 0FH
    272	059C  00			 is_ship_colliding db 0
    273
    274	059D  1900 3200	4B00 6400 +	 allies_pos_vec	dw 320 * 20, 320 * 40, 320 * 60, 320 * 80, 320 * 100, 320 * 120, 320 * 140, +
    275	      7D00 9600	AF00 C800    320 * 160
    276
    277					 ; each	bit represents an ally ship
    278	05AD  FF			 allies_db db 0FFH ; 1111_1111b
    279	05AE  08			 allies_count db 8
    280
    281	05AF  00 00 00 00 00 00	00+	 alien_ship  db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    282	      00 09 09 09 09 09	09+
    283	      09
    284	05BE  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    285	      00 09 09 00 00 00	00+
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 6
MAIN.ASM



    286	      00
    287	05CD  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    288	      00 00 00 00 00 00	00+
    289	      00
    290	05DC  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    291	      09 00 00 00 00 00	00+
    292	      00
    293	05EB  09 09 09 09 09 09	09+		     db	9,9,9,9,9,9,9,9,9,9,9,9,0,0,0
    294	      09 09 09 09 09 00	00+
    295	      00
    296	05FA  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    297	      09 00 00 00 00 00	00+
    298	      00
    299	0609  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    300	      00 00 00 00 00 00	00+
    301	      00
    302	0618  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    303	      00 09 09 00 00 00	00+
    304	      00
    305	0627  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    306	      00 09 09 09 09 09	09+
    307	      09
    308
    309	0636  0000			 alien_ship_pos	dw 0
    310
    311	0638  0F 0F 0F 0F 0F 0F	0F+	 shot	     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    312	      0F 0F 00 00 00 00	00+
    313	      00
    314	0647  0F*(00)				     db	15 dup (0)
    315	0656  0F*(00)				     db	15 dup (0)
    316	0665  0F*(00)				     db	15 dup (0)
    317	0674  00 00 00 00 00 00	0F+		     db	0,0,0,0,0,0,15,15,15,15,15,15,15,15,15
    318	      0F 0F 0F 0F 0F 0F	0F+
    319	      0F
    320	0683  0F*(00)				     db	15 dup (0)
    321	0692  0F*(00)				     db	15 dup (0)
    322	06A1  0F*(00)				     db	15 dup (0)
    323	06B0  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    324	      0F 0F 00 00 00 00	00+
    325	      00
    326
    327	06BF			     .code
    328				     ; Procedimento para navegação no	menu usando as setas
    329	0000			     HANDLE_INPUT PROC
    330	0000  80 FC 48			 cmp ah, 48H
    331	0003  74 08			 je ARROW_UP
    332
    333	0005  80 FC 50			 cmp ah, 50H
    334	0008  74 0C			 je ARROW_DOWN
    335
    336	000A  EB 1A 90			 jmp END_HANDLE
    337
    338	000D			     ARROW_UP:
    339	000D  32 E4			 xor ah, ah
    340	000F  88 26 0000r		 mov menu, ah
    341
    342	0013  EB 07 90			 jmp RENDER_BUTTONS
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 7
MAIN.ASM



    343
    344	0016			     ARROW_DOWN:
    345	0016  B4 01			 mov ah, 1
    346	0018  88 26 0000r		 mov menu, ah
    347
    348	001C			     RENDER_BUTTONS:
    349	001C  80 3E 0001r 00		 cmp screen, 0
    350	0021  75 03			 jne END_HANDLE
    351	0023  E8 0125			 call PRINT_BUTTONS
    352
    353	0026			     END_HANDLE:
    354	0026  C3			 ret
    355	0027			     ENDP
    356
    357
    358
    359				     ; Proc para controle da nave
    360	0027			     HANDLE_CONTROLS proc
    361	0027  56			 push si
    362	0028  57			 push di
    363	0029  50			 push ax
    364	002A  53			 push bx
    365
    366	002B  BE 0599r			 mov si, offset	ship_pos
    367	002E  8B 3C			 mov di, [si]
    368
    369	0030  80 FC 48			 cmp ah, 48H
    370	0033  74 15			 je MOVE_UP
    371
    372	0035  80 FC 50			 cmp ah, 50H
    373	0038  74 2D			 je MOVE_DOWN
    374
    375	003A  80 FC 39			 cmp ah, 39H
    376	003D  74 45			 je SHOOT
    377
    378	003F  3C 71			 cmp al, 'q'
    379	0041  75 52			 jne END_CONTROLS
    380
    381	0043  33 C0			 xor ax, ax
    382	0045  CD 16			 int 16h
    383	0047  E8 05F9			 call END_GAME
    384
    385	004A			     MOVE_UP:
    386	004A  B0 01			 mov al, 1
    387	004C  E8 00B0			 call CLEAR_SPRITE
    388
    389	004F  8B 1E 0599r		 mov bx, [ship_pos]
    390	0053  81 FB 192F		 cmp bx, 320 * 20 + 47
    391	0057  72 3C			 jb END_CONTROLS
    392	0059  74 3A			 je END_CONTROLS
    393
    394	005B  B4 01			 mov ah, 1
    395	005D  8B 1E 000Fr		 mov bx, ship_speed
    396	0061  E8 0048			 call MOVE_SPRITE
    397	0064  EB 2F 90			 jmp END_CONTROLS
    398
    399	0067			     MOVE_DOWN:
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 8
MAIN.ASM



    400	0067  B0 01			 mov al, 1
    401	0069  E8 0093			 call CLEAR_SPRITE
    402
    403	006C  8B 1E 0599r		 mov bx, [ship_pos]
    404	0070  81 FB C82F		 cmp bx, 320 * 160 + 47
    405	0074  74 1F			 je END_CONTROLS
    406	0076  77 1D			 ja END_CONTROLS
    407
    408	0078  32 E4			 xor ah, ah
    409	007A  8B 1E 000Fr		 mov bx, ship_speed
    410	007E  E8 002B			 call MOVE_SPRITE
    411	0081  EB 12 90			 jmp END_CONTROLS
    412
    413	0084			     SHOOT:
    414	0084  8A 26 0003r		 mov ah, did_shoot
    415	0088  80 FC 01			 cmp ah, 1
    416	008B  74 08			 je END_CONTROLS
    417
    418	008D  E8 04E1			 call RESET_SHOT
    419	0090  C6 06 0003r 01		 mov did_shoot,	1
    420
    421	0095			     END_CONTROLS:
    422	0095  5B			 pop bx
    423	0096  58			 pop ax
    424	0097  5F			 pop di
    425	0098  5E			 pop si
    426	0099  C3			 ret
    427	009A			     endp
    428
    429	009A			     PRINT_TITLE_MENU proc
    430	009A  8C D8			 mov ax, ds
    431	009C  8E C0			 mov es, ax
    432
    433	009E  BD 001Ar			 mov bp, offset	string
    434	00A1  B9 00F5			 mov cx, string_length ; tamanho
    435	00A4  B3 02			 mov bl, 02H ; Cor verde (se bit 1 de AL estiver limpo,	usamos BL)
    436	00A6  33 D2			 xor dx, dx ;linha / coluna
    437	00A8  E8 0028			 call PRINT_STRING
    438
    439	00AB  C3			 ret
    440	00AC			     endp
    441
    442				     ; AL = axis (0 is X, 1 is Y)
    443				     ; AH = direction (0 is positive, 1	is negative)
    444				     ; SI = position pointer
    445				     ; BX = increment
    446	00AC			     MOVE_SPRITE proc
    447	00AC  56			 push si
    448	00AD  50			 push ax
    449	00AE  53			 push bx
    450
    451	00AF  8B 0C			 mov cx, [si]
    452	00B1  3C 00			 cmp al, 0
    453	00B3  75 03			 jne MOVE_Y_AXIS
    454	00B5  EB 0A 90			 jmp CHECK_DIRECTION
    455
    456	00B8			     MOVE_Y_AXIS:
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 9
MAIN.ASM



    457	00B8  50			 push ax
    458	00B9  B8 0140			 mov ax, 320
    459	00BC  F7 E3			 mul bx
    460	00BE  8B D8			 mov bx, ax
    461	00C0  58			 pop ax
    462
    463	00C1			     CHECK_DIRECTION:
    464	00C1  80 FC 00			 cmp ah, 0
    465	00C4  75 05			 jne MOVE_NEGATIVE
    466	00C6  03 CB			 add cx, bx
    467	00C8  EB 03 90			 jmp SAVE_POS
    468
    469	00CB			     MOVE_NEGATIVE:
    470	00CB  2B CB			 sub cx, bx
    471
    472	00CD			     SAVE_POS:
    473	00CD  89 0C			 mov [si], cx
    474
    475	00CF  5B			 pop bx
    476	00D0  58			 pop ax
    477	00D1  5E			 pop si
    478	00D2  C3			 ret
    479	00D3			     endp
    480
    481	00D3			     PRINT_STRING PROC
    482	00D3  50			 push AX
    483	00D4  53			 push BX
    484	00D5  1E			 push DS
    485	00D6  06			 push ES
    486	00D7  56			 push SI
    487	00D8  55			 push BP
    488
    489					 ; Configura os	parâmetros para a função 13h
    490	00D9  B4 13			 mov ah, 13h	     ; Função	para escrever string com atributos de cor
    491	00DB  B0 01			 mov al, 1	     ; Modo: atualiza cursor após a escrita
    492							     ; AL = 1 -> modo de atualização de cursor
    493	00DD  32 FF			 xor bh, bh	      ;	Página	de vídeo 0
    494	00DF  CD 10			 int 10h	     ; Chamada de interrupção	para exibir a string
    495
    496	00E1  5D			 pop BP
    497	00E2  5E			 pop SI
    498	00E3  07			 pop ES
    499	00E4  1F			 pop DS
    500	00E5  5B			 pop BX
    501	00E6  58			 pop AX
    502	00E7  C3			 ret
    503	00E8			     ENDP
    504
    505				     ; SI = sprite pointer
    506				     ; BL = color
    507	00E8			     CHANGE_SPRITE_COLOR proc
    508	00E8  50			 push ax
    509	00E9  53			 push bx
    510	00EA  51			 push cx
    511	00EB  56			 push si
    512
    513	00EC  B9 0087			 mov cx, 15*9
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 10
MAIN.ASM



    514
    515	00EF			     PIXEL_LOOP:
    516	00EF  8A 04			 mov al, [si]
    517	00F1  3C 00			 cmp al, 0
    518	00F3  74 02			 jz SKIP_REPLACE
    519	00F5  88 1C			 mov [si], bl
    520
    521	00F7			     SKIP_REPLACE:
    522	00F7  46			 inc si
    523	00F8  E2 F5			 loop PIXEL_LOOP
    524
    525	00FA  5E			 pop si
    526	00FB  59			 pop cx
    527	00FC  5B			 pop bx
    528	00FD  58			 pop ax
    529	00FE  C3			 ret
    530	00FF			     endp
    531
    532				     ; DI = sprite position
    533	00FF			     CLEAR_SPRITE proc
    534	00FF  50			 push ax
    535	0100  51			 push cx
    536	0101  57			 push di
    537	0102  06			 push es
    538
    539	0103  B8 A000			 mov ax, 0A000H
    540	0106  8E C0			 mov es, ax
    541	0108  B9 0009			 mov cx, 9
    542
    543	010B			     CLEAR_LINE:
    544	010B  51			 push cx
    545	010C  B9 000F			 mov cx, 15
    546	010F  33 C0			 xor ax, ax
    547	0111  F3> AA			 rep stosb
    548	0113  81 C7 0131		 add di, 305
    549	0117  59			 pop cx
    550	0118  E2 F1			 loop CLEAR_LINE
    551
    552	011A  07			 pop es
    553	011B  5F			 pop di
    554	011C  59			 pop cx
    555	011D  58			 pop ax
    556	011E  C3			 ret
    557	011F			     endp
    558
    559				     ; AX = sprite position
    560				     ; SI = sprite pointer
    561	011F			     RENDER_SPRITE proc
    562	011F  53			 push bx
    563	0120  51			 push cx
    564	0121  52			 push dx
    565	0122  57			 push di
    566	0123  06			 push es
    567	0124  1E			 push ds
    568	0125  50			 push ax
    569
    570	0126  B8 0000s			 mov ax, @data
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 11
MAIN.ASM



    571	0129  8E D8			 mov ds, ax
    572
    573	012B  B8 A000			 mov ax, 0A000h
    574	012E  8E C0			 mov es, ax
    575
    576	0130  58			 pop ax
    577	0131  8B F8			 mov di, ax
    578	0133  BA 0009			 mov dx, 9
    579	0136  50			 push ax
    580
    581	0137			     DRAW_LINE:
    582	0137  B9 000F			 mov cx, 15
    583	013A  F3> A4			 rep movsb
    584	013C  81 C7 0131		 add di, 320 - 15
    585	0140  4A			 dec dx
    586	0141  75 F4			 jnz DRAW_LINE
    587
    588	0143  58			 pop ax
    589	0144  1F			 pop ds
    590	0145  07			 pop es
    591	0146  5F			 pop di
    592	0147  5A			 pop dx
    593	0148  59			 pop cx
    594	0149  5B			 pop bx
    595	014A  C3		     ret
    596	014B			     endp
    597
    598				     ; Procedimento para exibir	os botões INICIAR e SAIR
    599	014B			     PRINT_BUTTONS proc
    600	014B  50			 push ax
    601	014C  B3 0F			 mov bl, 0FH
    602	014E  8A 26 0000r		 mov ah, menu
    603	0152  80 FC 00			 cmp ah, 0
    604	0155  75 02			 jne START_BTN
    605	0157  B3 0C			 mov bl, 0CH
    606
    607	0159			     START_BTN:
    608					 ; Exibe o botão INICIAR
    609	0159  BD 0470r			 mov bp, offset	btn_iniciar
    610	015C  B9 0051			 mov cx, btn_iniciar_length ; tamanho
    611	015F  32 D2			 xor dl, dl ; coluna
    612	0161  B6 12			 mov dh, 18 ; linha
    613	0163  E8 FF6D			 call PRINT_STRING
    614
    615	0166  B3 0F			 mov bl, 0FH
    616	0168  8A 26 0000r		 mov ah, menu
    617	016C  80 FC 01			 cmp ah, 1
    618	016F  75 02			 jne EXIT_BTN
    619	0171  B3 0C			 mov bl, 0CH
    620
    621	0173			     EXIT_BTN:
    622	0173  BD 04C1r			 mov bp, offset	btn_sair
    623	0176  B9 0051			 mov cx, btn_sair_length
    624	0179  32 D2			 xor dl, dl ; coluna
    625	017B  B6 15			 mov dh, 21 ; linha
    626	017D  E8 FF53			 call PRINT_STRING
    627
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 12
MAIN.ASM



    628	0180  58			 pop ax
    629	0181  C3			 ret
    630	0182			     endp
    631
    632	0182			     RESET_CROSS_SHIP_POS proc
    633	0182  50			 push ax
    634
    635	0183  B8 7D00			 mov ax, 100 * 320
    636	0186  A3 0599r			 mov ship_pos, ax
    637	0189  05 0131			 add ax, 305
    638	018C  A3 0636r			 mov alien_ship_pos, ax
    639
    640	018F  58			 pop ax
    641	0190  C3			 ret
    642	0191			     endp
    643
    644	0191			     CROSS_SHIPS proc
    645	0191  A1 0599r			 mov ax, ship_pos
    646	0194  8B F8			 mov di, ax
    647	0196  E8 FF66			 call CLEAR_SPRITE
    648
    649	0199  3D 7E31			 cmp ax, 101*320-15
    650	019C  74 17			 je MOVE_ALIEN_SHIP
    651
    652	019E  FF 06 0599r		 inc ship_pos
    653	01A2  40			 inc ax
    654	01A3  BE 0512r			 mov si, offset	ship
    655	01A6  E8 FF76			 call RENDER_SPRITE
    656
    657	01A9  33 C9			 xor cx, cx
    658	01AB  BA C350			 mov dx, 0C350H
    659	01AE  B4 86			 mov ah, 86H
    660	01B0  CD 15			 int 15h
    661	01B2  EB 2A 90			 jmp END_POS_UPDATE
    662
    663	01B5			     MOVE_ALIEN_SHIP:
    664	01B5  A1 0636r			 mov ax, alien_ship_pos
    665	01B8  8B F8			 mov di, ax
    666
    667	01BA  50			 push ax
    668	01BB  3D 7D00			 cmp ax, 100*320
    669	01BE  58			 pop ax
    670
    671	01BF  74 1A			 je RESET_POS
    672	01C1  E8 FF3B			 call CLEAR_SPRITE
    673
    674	01C4  FF 0E 0636r		 dec alien_ship_pos
    675	01C8  48			 dec ax
    676	01C9  BE 05AFr			 mov si, offset	alien_ship
    677	01CC  E8 FF50			 call RENDER_SPRITE
    678
    679	01CF  33 C9			 xor cx, cx
    680	01D1  BA C350			 mov dx, 0C350H
    681	01D4  B4 86			 mov ah, 86H
    682	01D6  CD 15			 int 15h
    683	01D8  EB 04 90			 jmp END_POS_UPDATE
    684
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 13
MAIN.ASM



    685	01DB			     RESET_POS:
    686	01DB  E8 FFA4			 call RESET_CROSS_SHIP_POS
    687
    688	01DE			     END_POS_UPDATE:
    689	01DE  C3			 ret
    690	01DF			     endp
    691
    692	01DF			     RENDER_ALLY_SHIPS proc
    693	01DF  56			 push si
    694	01E0  57			 push di
    695	01E1  52			 push dx
    696	01E2  51			 push cx
    697	01E3  53			 push bx
    698	01E4  50			 push ax
    699
    700	01E5  B9 0008			 mov cx, 8
    701	01E8  BB 059Dr			 mov bx, offset	allies_pos_vec
    702	01EB  8A 16 05ADr		 mov dl, allies_db
    703
    704	01EF			     RENDER_SINGLE:
    705	01EF  8B 07			 mov ax, [bx]
    706	01F1  BE 0512r			 mov si, offset	ship
    707
    708	01F4  51			 push cx
    709	01F5  53			 push bx
    710	01F6  50			 push ax
    711
    712					 ; get color based on iteration
    713	01F7  8A D9			 mov bl, cl
    714	01F9  80 C3 06			 add bl, 6
    715
    716	01FC  FE C9			 dec cl
    717	01FE  B0 01			 mov al, 1
    718	0200  D2 E0			 shl al, cl
    719	0202  22 C2			 and al, dl
    720
    721	0204  58			 pop ax
    722	0205  75 08			 jnz NO_CLEAR
    723	0207  8B F8			 mov di, ax
    724	0209  E8 FEF3			 call CLEAR_SPRITE
    725	020C  EB 07 90			 jmp AFTER_CLEAR
    726
    727	020F			     NO_CLEAR:
    728	020F  E8 FED6			 call CHANGE_SPRITE_COLOR
    729	0212  E8 FF0A			 call RENDER_SPRITE
    730
    731	0215			     AFTER_CLEAR:
    732	0215  5B			 pop bx
    733	0216  59			 pop cx
    734	0217  83 C3 02			 add bx, 2
    735	021A  E2 D3			 loop RENDER_SINGLE
    736
    737	021C  58			 pop ax
    738	021D  5B			 pop bx
    739	021E  59			 pop cx
    740	021F  5A			 pop dx
    741	0220  5F			 pop di
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 14
MAIN.ASM



    742	0221  5E			 pop si
    743	0222  C3			 ret
    744	0223			     endp
    745
    746	0223			     CLEAR_SCREEN proc
    747	0223  50			 push ax
    748	0224  51			 push cx
    749	0225  06			 push es
    750	0226  57			 push di
    751
    752	0227  B8 A000			 mov ax,0A000h
    753	022A  8E C0			 mov es,ax
    754	022C  33 FF			 xor di, di
    755	022E  B9 7D00			 mov cx, 32000d
    756	0231  FC			 cld
    757	0232  33 C0			 xor ax, ax
    758	0234  F3> AB			 rep stosw
    759
    760	0236  5F			 pop di
    761	0237  07			 pop es
    762	0238  59			 pop cx
    763	0239  58			 pop ax
    764	023A  C3			 ret
    765	023B			     endp
    766
    767	023B			     SHOW_YOU_WIN proc
    768	023B  E8 FFE5			 call CLEAR_SCREEN
    769
    770	023E  BD 03CAr			 mov bp, offset	you_win
    771	0241  B9 00A0			 mov cx, you_win_len
    772	0244  B3 0A			 mov bl, 0AH
    773	0246  32 D2			 xor dl, dl
    774	0248  B6 07			 mov dh, 7
    775	024A  E8 FE86			 call PRINT_STRING
    776
    777	024D  B3 0F			 mov bl, 0FH ; color = white
    778
    779	024F  BD 010Fr			 mov bp, offset	score_str
    780	0252  B9 0006			 mov cx, score_str_len
    781	0255  B2 0C			 mov dl, 12
    782	0257  B6 0D			 mov dh, 13
    783	0259  E8 FE77			 call PRINT_STRING
    784
    785	025C  BD 0008r			 mov bp, offset	score_buffer
    786	025F  B9 0005			 mov cx, score_buffer_len
    787	0262  B2 14			 mov dl, 20
    788	0264  B6 0D			 mov dh, 13
    789	0266  E8 FE6A			 call PRINT_STRING
    790
    791	0269  33 C0			 xor ax, ax
    792	026B  CD 16			 int 16h
    793	026D  E8 03D3			 call END_GAME
    794
    795	0270  C3			 ret
    796	0271			     endp
    797
    798				     ; This proc uses LCG to generate a	random number.
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 15
MAIN.ASM



    799				     ; returns in AX a random 16 bit unsigned integer
    800	0271			     RANDOM_UINT16 proc
    801	0271  52			 push dx
    802
    803	0272  B8 9A75			 mov ax, 39541
    804	0275  F7 26 0018r		 mul seed
    805	0279  05 3F83			 add ax, 16259
    806	027C  A3 0018r			 mov seed, ax
    807
    808	027F  5A			 pop dx
    809	0280  C3			 ret
    810	0281			     endp
    811
    812				     ; AH = range upper	boundary (max 255)
    813				     ; return random 8 bit unsigned interger to	AL, between 0 and 254
    814	0281			     RANDOM_UINT8_RANGE	proc
    815	0281  53			 push bx
    816	0282  51			 push cx
    817	0283  52			 push dx
    818	0284  50			 push ax
    819
    820	0285  33 C9			 xor cx, cx
    821	0287  8A CC			 mov cl, ah
    822
    823	0289  E8 FFE5			 call RANDOM_UINT16
    824
    825	028C  33 D2			 xor dx, dx
    826	028E  8B D9			 mov bx, cx
    827	0290  F7 F3			 div bx
    828
    829	0292  58			 pop ax
    830
    831	0293  8A C2			 mov al, dl
    832
    833	0295  5A			 pop dx
    834	0296  59			 pop cx
    835	0297  5B			 pop bx
    836	0298  C3			 ret
    837	0299			     endp
    838
    839	0299			     SHOW_GAME_OVER proc
    840	0299  E8 FF87			 call CLEAR_SCREEN
    841
    842	029C  BD 02E3r			 mov bp, offset	game_over
    843	029F  B9 00E7			 mov cx, game_over_len
    844	02A2  B3 0C			 mov bl, 0CH
    845	02A4  32 D2			 xor dl, dl ; coluna
    846	02A6  B6 08			 mov dh, 8 ; linha
    847	02A8  E8 FE28			 call PRINT_STRING
    848
    849	02AB  33 C0			 xor ax, ax
    850	02AD  CD 16			 int 16h
    851	02AF  E8 0391			 call END_GAME
    852	02B2  C3			 ret
    853	02B3			     endp
    854
    855				     ; SI = first position
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 16
MAIN.ASM



    856				     ; DI = second position
    857				     ; return CL = 1 if	positions collide
    858	02B3			     CHECK_COLLISION proc
    859	02B3  55			 push bp
    860	02B4  50			 push ax
    861	02B5  53			 push bx
    862	02B6  52			 push dx
    863
    864	02B7  8B EC			 mov bp, sp
    865
    866	02B9  33 D2			 xor dx, dx
    867	02BB  32 C9			 xor cl, cl
    868	02BD  BB 0140			 mov bx, 320
    869
    870	02C0  8B C6			 mov ax, si
    871	02C2  33 D2			 xor dx, dx
    872	02C4  F7 F3			 div bx
    873
    874	02C6  52			 push dx ; value of X1 - [bp-2]
    875	02C7  50			 push ax ; value of Y1 - [bp-4]
    876
    877	02C8  8B C7			 mov ax, di
    878	02CA  33 D2			 xor dx, dx
    879	02CC  F7 F3			 div bx
    880
    881	02CE  52			 push dx ; value of X2 - [bp-6]
    882
    883	02CF			     CHECK_Y_IN_RANGE:
    884	02CF  05 0009			 add ax, 9
    885	02D2  73 03			 jnc SKIP_Y_MAX
    886	02D4  B8 FFFF			 mov ax, 0FFFFH
    887
    888	02D7			     SKIP_Y_MAX:
    889	02D7  8B 56 FC			 mov dx, [bp - 4]
    890	02DA  3B D0			 cmp dx, ax
    891	02DC  77 2A			 ja END_COLLISION
    892
    893	02DE  2D 0012			 sub ax, 18
    894	02E1  73 02			 jnc SKIP_Y_MIN
    895	02E3  33 C0			 xor ax, ax
    896
    897	02E5			     SKIP_Y_MIN:
    898	02E5  3B D0			 cmp dx, ax
    899	02E7  72 1F			 jb END_COLLISION
    900
    901	02E9			     CHECK_X_IN_RANGE:
    902	02E9  8B 46 FE			 mov ax, [bp - 2]
    903	02EC  05 000F			 add ax, 15
    904	02EF  73 03			 jnc SKIP_X_MAX
    905	02F1  B8 FFFF			 mov ax, 0FFFFH
    906
    907	02F4			     SKIP_X_MAX:
    908	02F4  8B 56 FA			 mov dx, [bp - 6]
    909	02F7  3B D0			 cmp dx, ax
    910	02F9  77 0D			 ja END_COLLISION
    911
    912	02FB  2D 001E			 sub ax, 30
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 17
MAIN.ASM



    913	02FE  73 02			 jnc SKIP_X_MIN
    914	0300  33 C0			 xor ax, ax
    915
    916	0302			     SKIP_X_MIN:
    917	0302  3B D0			 cmp dx, ax
    918	0304  72 02			 jb END_COLLISION
    919
    920	0306  B1 01			 mov cl, 1
    921
    922	0308			     END_COLLISION:
    923
    924	0308  8B E5			 mov sp, bp
    925
    926	030A  5A			 pop dx
    927	030B  5B			 pop bx
    928	030C  58			 pop ax
    929	030D  5D			 pop bp
    930	030E  C3			 ret
    931	030F			     endp
    932
    933	030F			     RENDER_SECTOR proc
    934	030F  50			 push ax
    935	0310  53			 push bx
    936	0311  51			 push cx
    937	0312  52			 push dx
    938	0313  55			 push bp
    939
    940	0314  E8 FF0C			 call CLEAR_SCREEN
    941
    942					 ; Print Sector
    943	0317  33 C0			 xor ax, ax
    944	0319  A0 0002r			 mov al, sector
    945
    946	031C  3C 04			 cmp al, 4
    947	031E  75 03			 jne SUM_POINTS
    948	0320  E8 FF18			 call SHOW_YOU_WIN
    949
    950	0323			     SUM_POINTS:
    951	0323  FE C8			 dec al	; number vector	index
    952
    953	0325  BB 03E8			 mov bx, 1000
    954	0328  F7 E3			 mul bx
    955	032A  33 DB			 xor bx, bx
    956	032C  8A 1E 05AEr		 mov bl, allies_count
    957	0330  F7 E3			 mul bx
    958	0332  01 06 0006r		 add score, ax
    959
    960	0336  33 C0			 xor ax, ax
    961	0338  A0 0002r			 mov al, sector
    962	033B  FE C8			 dec al	; number vector	index
    963	033D  D0 E0			 shl al, 1 ; multiply by 2 (since num_vec values are dw)
    964	033F  BB 046Ar			 mov bx, offset	sector_vec ; get the vector
    965	0342  03 D8			 add bx, ax ; add the index to the vector ptr
    966	0344  8B 2F			 mov bp, [bx] ;	set BP to base address of number
    967	0346  B9 0098			 mov cx, sector_len
    968	0349  32 D2			 xor dl, dl; line
    969	034B  B6 0A			 mov dh, 10
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 18
MAIN.ASM



    970
    971	034D  B4 06			 mov ah, 6 ; random value from 0 to 5
    972	034F  E8 FF2F			 call RANDOM_UINT8_RANGE
    973	0352  8A D8			 mov bl, al
    974	0354  80 C3 09			 add bl, 9H
    975	0357  E8 FD79			 call PRINT_STRING
    976
    977					 ; Wait	4s
    978	035A  B9 003D			 mov cx, 3DH
    979	035D  BA 0900			 mov dx, 900H
    980	0360  B4 86			 mov ah, 86H
    981	0362  CD 15			 int 15h
    982
    983	0364  E8 FEBC			 call CLEAR_SCREEN
    984
    985	0367  5D			 pop bp
    986	0368  5A			 pop dx
    987	0369  59			 pop cx
    988	036A  5B			 pop bx
    989	036B  58			 pop ax
    990	036C  C3			 ret
    991	036D			     endp
    992
    993	036D			     RESET_ENEMY proc
    994	036D  57			 push di
    995	036E  50			 push ax
    996	036F  53			 push bx
    997	0370  52			 push dx
    998
    999	0371  8B 3E 0013r		 mov di, enemy_pos
   1000	0375  E8 FD87			 call CLEAR_SPRITE
   1001
   1002	0378  33 D2			 xor dx, dx
   1003	037A  B8 0140			 mov ax, 320
   1004
   1005	037D  50			 push ax
   1006
   1007	037E  B4 8C			 mov ah, 140
   1008	0380  E8 FEFE			 call RANDOM_UINT8_RANGE
   1009	0383  33 DB			 xor bx, bx
   1010	0385  8A D8			 mov bl, al
   1011	0387  80 C3 14			 add bl, 20
   1012
   1013	038A  58			 pop ax
   1014
   1015	038B  F7 E3			 mul bx
   1016	038D  05 010E			 add ax, 270
   1017	0390  A3 0013r			 mov enemy_pos,	ax
   1018
   1019	0393  5A			 pop dx
   1020	0394  5B			 pop bx
   1021	0395  58			 pop ax
   1022	0396  5F			 pop di
   1023	0397  C3			 ret
   1024	0398			     endp
   1025
   1026	0398			     UPDATE_ENEMY proc
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 19
MAIN.ASM



   1027	0398  56			 push si
   1028	0399  57			 push di
   1029	039A  50			 push ax
   1030	039B  53			 push bx
   1031
   1032	039C  B8 0100			 mov ax, 0100H
   1033	039F  BE 0013r			 mov si, offset	enemy_pos
   1034
   1035	03A2  8B 3C			 mov di, [si]
   1036	03A4  E8 FD58			 call CLEAR_SPRITE
   1037	03A7  BB 0001			 mov bx, 1
   1038	03AA  E8 FCFF			 call MOVE_SPRITE
   1039	03AD  E8 00AE			 call RENDER_ENEMY
   1040
   1041	03B0  8A 3E 0003r		 mov bh, did_shoot
   1042	03B4  80 FF 01			 cmp bh, 1
   1043	03B7  75 23			 jne CHECK_SHIP_COLLISION
   1044
   1045	03B9  8B 36 0011r		 mov si, shot_pos
   1046	03BD  8B 3E 0013r		 mov di, enemy_pos
   1047	03C1  E8 FEEF			 call CHECK_COLLISION
   1048	03C4  80 F9 01			 cmp cl, 1
   1049	03C7  75 13			 jne CHECK_SHIP_COLLISION
   1050	03C9  C6 06 0017r 01		 mov rerender_score, 1
   1051	03CE  83 06 0006r 64		 add score, 100
   1052	03D3  E8 FD29			 call CLEAR_SPRITE
   1053	03D6  E8 0198			 call RESET_SHOT
   1054	03D9  E8 FF91			 call RESET_ENEMY
   1055
   1056	03DC			     CHECK_SHIP_COLLISION:
   1057	03DC  8B 36 0599r		 mov si, ship_pos
   1058	03E0  E8 FED0			 call CHECK_COLLISION
   1059	03E3  80 F9 01			 cmp cl, 1
   1060	03E6  75 3A			 jne RESET_SHIP_COLLISION
   1061
   1062	03E8  8A 26 059Cr		 mov ah, is_ship_colliding
   1063	03EC  80 FC 01			 cmp ah, 1
   1064	03EF  74 68			 je END_ENEMY_UPDATE
   1065
   1066	03F1  80 3E 05ADr 00		 cmp allies_db,	0
   1067	03F6  75 03			 jne CONTINUE_COLLISION
   1068	03F8  E8 FE9E			 call SHOW_GAME_OVER
   1069
   1070	03FB			     CONTINUE_COLLISION:
   1071	03FB  C6 06 059Cr 01		 mov is_ship_colliding,	1
   1072	0400  8A 26 05ADr		 mov ah, allies_db
   1073	0404  D0 EC			 shr ah, 1
   1074	0406  88 26 05ADr		 mov allies_db,	ah
   1075	040A  C6 06 0016r 01		 mov rerender_allies, 1
   1076	040F  C6 06 0015r 01		 mov rerender_ship, 1
   1077	0414  E8 FF56			 call RESET_ENEMY
   1078	0417  FE 0E 059Br		 dec ship_color
   1079	041B  FE 0E 05AEr		 dec allies_count
   1080	041F  EB 38 90			 jmp END_ENEMY_UPDATE
   1081
   1082	0422			     RESET_SHIP_COLLISION:
   1083	0422  C6 06 059Cr 00		 mov is_ship_colliding,	0
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 20
MAIN.ASM



   1084
   1085	0427			     CHECK_EOS:	; end of screen
   1086	0427  33 D2			 xor dx, dx
   1087	0429  8B C7			 mov ax, di
   1088	042B  BB 0140			 mov bx, 320
   1089	042E  F7 F3			 div bx
   1090	0430  83 FA 00			 cmp dx, 0
   1091	0433  75 24			 jne END_ENEMY_UPDATE
   1092	0435  E8 FF35			 call RESET_ENEMY
   1093	0438  C6 06 0016r 01		 mov rerender_allies, 1
   1094	043D  C6 06 0017r 01		 mov rerender_score, 1
   1095	0442  33 D2			 xor dx, dx
   1096	0444  B8 000A			 mov ax, 10
   1097	0447  8A 16 0002r		 mov dl, sector
   1098	044B  F7 E2			 mul dx
   1099	044D  29 06 0006r		 sub score, ax
   1100	0451  73 06			 jnc END_ENEMY_UPDATE
   1101	0453  C7 06 0006r 0000		 mov score, 0
   1102
   1103	0459			     END_ENEMY_UPDATE:
   1104	0459  5B			 pop bx
   1105	045A  58			 pop ax
   1106	045B  5F			 pop di
   1107	045C  5E			 pop si
   1108	045D  C3			 ret
   1109	045E			     endp
   1110
   1111	045E			     RENDER_ENEMY proc
   1112	045E  56			 push si
   1113	045F  50			 push ax
   1114
   1115	0460  A1 0013r			 mov ax, enemy_pos
   1116	0463  BE 05AFr			 mov si, offset	alien_ship
   1117	0466  E8 FCB6			 call RENDER_SPRITE
   1118
   1119	0469  58			 pop ax
   1120	046A  5E			 pop si
   1121	046B  C3			 ret
   1122	046C			     endp
   1123
   1124	046C			     RESET_SHIP	proc
   1125	046C  C7 06 0599r 76E9		 mov ship_pos, 320 * 95	+ 41 ; Ship stating position
   1126	0472  C3			 ret
   1127	0473			     endp
   1128
   1129	0473			     RENDER_SHIP proc
   1130	0473  56			 push si
   1131	0474  57			 push di
   1132	0475  53			 push bx
   1133	0476  50			 push ax
   1134
   1135	0477  A1 0599r			 mov ax, ship_pos
   1136	047A  8B F8			 mov di, ax
   1137	047C  E8 FC80			 call CLEAR_SPRITE
   1138
   1139	047F  BE 0512r			 mov si, offset	ship
   1140	0482  8A 1E 059Br		 mov bl, ship_color ; white
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 21
MAIN.ASM



   1141	0486  E8 FC5F			 call CHANGE_SPRITE_COLOR
   1142	0489  E8 FC93			 call RENDER_SPRITE
   1143
   1144	048C  58			 pop ax
   1145	048D  5B			 pop bx
   1146	048E  5F			 pop di
   1147	048F  5E			 pop si
   1148	0490  C3			 ret
   1149	0491			     endp
   1150
   1151	0491			     UPDATE_SHIP proc
   1152	0491  56			 push si
   1153	0492  57			 push di
   1154	0493  50			 push ax
   1155	0494  53			 push bx
   1156
   1157	0495  B4 01			 mov ah, 1H
   1158	0497  CD 16			 int 16H
   1159	0499  74 0A			 jz END_SHIP_UPDATE
   1160
   1161	049B  E8 FB89			 call HANDLE_CONTROLS
   1162	049E  32 E4			 xor ah, ah
   1163	04A0  CD 16			 int 16H
   1164
   1165	04A2  E8 FFCE			 call RENDER_SHIP
   1166
   1167	04A5			     END_SHIP_UPDATE:
   1168
   1169	04A5  5B			 pop bx
   1170	04A6  58			 pop ax
   1171	04A7  5F			 pop di
   1172	04A8  5E			 pop si
   1173	04A9  C3			 ret
   1174	04AA			     endp
   1175
   1176				     ; AX = uint16 value to output
   1177				     ; SI = offset of end off string buffer
   1178				     ; CX = number of digits to	write
   1179	04AA			     CONVERT_UINT16 proc
   1180	04AA  56			 push si
   1181	04AB  50			 push ax
   1182	04AC  53			 push bx
   1183	04AD  51			 push cx
   1184	04AE  52			 push dx
   1185
   1186	04AF  BB 000A			 mov bx, 10
   1187
   1188	04B2			     LOOP_DIV:
   1189	04B2  33 D2			 xor dx, dx
   1190	04B4  F7 F3			 div bx
   1191
   1192	04B6  80 C2 30			 add dl, '0'
   1193	04B9  88 14			 mov byte ptr ds:[si], dl
   1194	04BB  4E			 dec si
   1195
   1196	04BC  3D 0000			 cmp ax, 0
   1197	04BF  49			 dec cx
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 22
MAIN.ASM



   1198	04C0  75 F0			 jnz LOOP_DIV
   1199
   1200	04C2  83 F9 00			 cmp cx, 0
   1201	04C5  74 04			 je END_CONVERSION
   1202
   1203	04C7  B2 30			 mov dl, '0'
   1204	04C9  88 14			 mov byte ptr ds:[si], dl
   1205
   1206	04CB			     END_CONVERSION:
   1207	04CB  5A			 pop dx
   1208	04CC  59			 pop cx
   1209	04CD  5B			 pop bx
   1210	04CE  58			 pop ax
   1211	04CF  5E			 pop si
   1212	04D0  C3			 ret
   1213	04D1			     endp
   1214
   1215	04D1			     RENDER_SCORE proc
   1216	04D1  56			 push si
   1217	04D2  55			 push bp
   1218	04D3  50			 push ax
   1219	04D4  53			 push bx
   1220	04D5  51			 push cx
   1221	04D6  52			 push dx
   1222
   1223	04D7  BD 010Fr			 mov bp, offset	score_str
   1224	04DA  B9 0006			 mov cx, score_str_len
   1225	04DD  B3 0F			 mov bl, 0FH ; white
   1226	04DF  33 D2			 xor dx, dx
   1227	04E1  E8 FBEF			 call PRINT_STRING
   1228
   1229	04E4  A1 0006r			 mov ax, score
   1230	04E7  BE 0008r			 mov si, offset	score_buffer
   1231	04EA  83 C6 04			 add si, score_buffer_len - 1
   1232	04ED  B9 0005			 mov cx, score_buffer_len
   1233	04F0  E8 FFB7			 call CONVERT_UINT16
   1234
   1235	04F3  BD 0008r			 mov bp, offset	score_buffer
   1236	04F6  B3 02			 mov bl, 02H ; green
   1237	04F8  32 F6			 xor dh, dh
   1238	04FA  B2 08			 mov dl, 8
   1239	04FC  E8 FBD4			 call PRINT_STRING
   1240
   1241	04FF  5A			 pop dx
   1242	0500  59			 pop cx
   1243	0501  5B			 pop bx
   1244	0502  58			 pop ax
   1245	0503  5D			 pop bp
   1246	0504  5E			 pop si
   1247
   1248	0505  C3			 ret
   1249	0506			     endp
   1250
   1251	0506			     RENDER_TIME proc
   1252	0506  55			 push bp
   1253	0507  53			 push bx
   1254	0508  51			 push cx
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 23
MAIN.ASM



   1255	0509  52			 push dx
   1256
   1257	050A  BD 0115r			 mov bp, offset	time_str
   1258	050D  B9 0006			 mov cx, time_str_len
   1259	0510  B3 0F			 mov bl, 0FH ; white
   1260	0512  32 F6			 xor dh, dh
   1261	0514  B2 19			 mov dl, 25
   1262	0516  E8 FBBA			 call PRINT_STRING
   1263
   1264	0519  33 C0			 xor ax, ax
   1265	051B  A0 0005r			 mov al, time
   1266	051E  BE 000Dr			 mov si, offset	time_buffer
   1267	0521  83 C6 01			 add si, time_buffer_len - 1
   1268	0524  B9 0002			 mov cx, 2
   1269	0527  E8 FF80			 call CONVERT_UINT16
   1270
   1271	052A  BD 000Dr			 mov bp, offset	time_buffer
   1272	052D  B9 0002			 mov cx, time_buffer_len
   1273	0530  B3 02			 mov bl, 02H ; green
   1274	0532  32 F6			 xor dh, dh
   1275	0534  B2 20			 mov dl, 32
   1276	0536  E8 FB9A			 call PRINT_STRING
   1277
   1278	0539  5A			 pop dx
   1279	053A  59			 pop cx
   1280	053B  5B			 pop bx
   1281	053C  5D			 pop bp
   1282
   1283	053D  C3			 ret
   1284	053E			     endp
   1285
   1286	053E			     UPDATE_TIME proc
   1287	053E  50			 push ax
   1288
   1289	053F  8A 26 0004r		 mov ah, timeout
   1290	0543  FE C4			 inc ah
   1291	0545  80 FC 64			 cmp ah, 100
   1292	0548  75 21			 jne SAVE_TIMEOUT
   1293
   1294	054A  8A 26 0005r		 mov ah, time
   1295	054E  FE CC			 dec ah
   1296	0550  75 13			 jnz SAVE_TIME
   1297
   1298	0552  8A 26 0002r		 mov ah, sector
   1299	0556  FE C4			 inc ah
   1300	0558  88 26 0002r		 mov sector, ah
   1301
   1302	055C  E8 FDB0			 call RENDER_SECTOR
   1303	055F  E8 0094			 call RESET
   1304
   1305	0562  EB 0B 90			 jmp END_TIME
   1306
   1307	0565			     SAVE_TIME:
   1308	0565  88 26 0005r		 mov time, ah
   1309	0569  32 E4			 xor ah, ah
   1310
   1311	056B			     SAVE_TIMEOUT:
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 24
MAIN.ASM



   1312	056B  88 26 0004r		 mov timeout, ah
   1313
   1314	056F			     END_TIME:
   1315	056F  58			 pop ax
   1316	0570  C3			 ret
   1317	0571			     endp
   1318
   1319	0571			     RESET_SHOT	proc
   1320	0571  57			 push di
   1321	0572  53			 push bx
   1322
   1323	0573  8B 3E 0011r		 mov di, shot_pos
   1324	0577  E8 FB85			 call CLEAR_SPRITE
   1325
   1326	057A  8B 1E 0599r		 mov bx, ship_pos
   1327	057E  83 C3 0F			 add bx, 15
   1328	0581  89 1E 0011r		 mov shot_pos, bx
   1329	0585  C6 06 0003r 00		 mov did_shoot,	0
   1330
   1331	058A  5B			 pop bx
   1332	058B  5F			 pop di
   1333	058C  C3			 ret
   1334	058D			     endp
   1335
   1336	058D			     UPDATE_SHOT proc
   1337	058D  57			 push di
   1338	058E  56			 push si
   1339	058F  50			 push ax
   1340	0590  53			 push bx
   1341	0591  52			 push dx
   1342
   1343	0592  8A 1E 0003r		 mov bl, did_shoot
   1344	0596  80 FB 01			 cmp bl, 1
   1345	0599  75 33			 jne END_SHOT
   1346
   1347	059B  33 D2			 xor dx, dx
   1348	059D  A1 0011r			 mov ax, shot_pos
   1349	05A0  05 000F			 add ax, 15
   1350	05A3  BB 0140			 mov bx, 320
   1351	05A6  F7 F3			 div bx
   1352	05A8  83 FA 00			 cmp dx, 0
   1353	05AB  75 06			 jne MOVE_SHOT
   1354
   1355	05AD  E8 FFC1			 call RESET_SHOT
   1356	05B0  EB 1C 90			 jmp END_SHOT
   1357
   1358	05B3			     MOVE_SHOT:
   1359	05B3  8B 3E 0011r		 mov di, shot_pos
   1360	05B7  E8 FB45			 call CLEAR_SPRITE
   1361
   1362	05BA  BB 0003			 mov bx, 3 ; TODO: change to `shot_speed`
   1363	05BD  33 C0			 xor ax, ax
   1364	05BF  BE 0011r			 mov si, offset	shot_pos
   1365	05C2  E8 FAE7			 call MOVE_SPRITE
   1366
   1367	05C5  A1 0011r			 mov ax, shot_pos
   1368	05C8  BE 0638r			 mov si, offset	shot
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 25
MAIN.ASM



   1369	05CB  E8 FB51			 call RENDER_SPRITE
   1370
   1371	05CE			     END_SHOT:
   1372	05CE  5A			 pop dx
   1373	05CF  5B			 pop bx
   1374	05D0  58			 pop ax
   1375	05D1  5E			 pop si
   1376	05D2  5F			 pop di
   1377	05D3  C3			 ret
   1378	05D4			     endp
   1379
   1380	05D4			     RESET_TIME	proc
   1381	05D4  50			 push ax
   1382
   1383	05D5  32 E4			 xor ah, ah
   1384	05D7  88 26 0004r		 mov timeout, ah
   1385	05DB  B4 3C			 mov ah, 60
   1386	05DD  88 26 0005r		 mov time, ah
   1387
   1388	05E1  58			 pop ax
   1389	05E2			     endp
   1390
   1391	05E2			     RESET_RERENDERS proc
   1392	05E2  50			 push ax
   1393
   1394	05E3  B4 01			 mov ah, 1
   1395	05E5  C6 06 0015r 01		 mov rerender_ship, 1
   1396	05EA  C6 06 0016r 01		 mov rerender_allies, 1
   1397	05EF  C6 06 0017r 01		 mov rerender_score, 1
   1398
   1399	05F4  58			 pop ax
   1400	05F5  C3			 ret
   1401	05F6			     endp
   1402
   1403	05F6			     RESET proc	; Contains all procedures for reseting values
   1404	05F6  E8 FE73			 call RESET_SHIP
   1405	05F9  E8 FD71			 call RESET_ENEMY
   1406	05FC  E8 FFD5			 call RESET_TIME
   1407	05FF  E8 FFE0			 call RESET_RERENDERS
   1408	0602  C3			 ret
   1409	0603			     endp
   1410
   1411	0603			     UPDATE proc ; Contains all	procedures for updating	game state
   1412	0603  E8 FE8B			 call UPDATE_SHIP
   1413	0606  E8 FF35			 call UPDATE_TIME
   1414	0609  E8 FF81			 call UPDATE_SHOT
   1415	060C  E8 FD89			 call UPDATE_ENEMY
   1416	060F  C3			 ret
   1417	0610			     endp
   1418
   1419	0610			     RENDER proc ; Contains all	procedures for rendering game objects
   1420	0610  50			 push ax
   1421	0611  E8 FEF2			 call RENDER_TIME
   1422
   1423					 ; should re-render ship?
   1424	0614  A0 0015r			 mov al, rerender_ship
   1425	0617  3C 00			 cmp al, 0
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 26
MAIN.ASM



   1426	0619  74 08			 je SKIP_2_ALLIES
   1427	061B  E8 FE55			 call RENDER_SHIP
   1428	061E  C6 06 0015r 00		 mov rerender_ship, 0
   1429
   1430	0623			     SKIP_2_ALLIES:
   1431					 ; should re-render allies?
   1432	0623  A0 0016r			 mov al, rerender_allies
   1433	0626  3C 01			 cmp al, 1
   1434	0628  75 08			 jne SKIP_2_SCORE
   1435	062A  E8 FBB2			 call RENDER_ALLY_SHIPS
   1436	062D  C6 06 0016r 00		 mov rerender_allies, 0
   1437
   1438	0632			     SKIP_2_SCORE:
   1439					 ; should re-render score?
   1440	0632  A0 0017r			 mov al, rerender_score
   1441	0635  3C 01			 cmp al, 1
   1442	0637  75 08			 jne END_RENDER
   1443	0639  E8 FE95			 call RENDER_SCORE
   1444	063C  C6 06 0017r 00		 mov rerender_score, 0
   1445
   1446	0641			     END_RENDER:
   1447	0641  58			 pop ax
   1448	0642  C3			 ret
   1449	0643			     endp
   1450
   1451	0643			     END_GAME proc
   1452					 ; Back	to text	mode
   1453	0643  32 E4			 xor ah, ah
   1454	0645  B0 03			 mov al, 3h
   1455	0647  CD 10			 int 10h
   1456
   1457					 ; Ends	program
   1458	0649  B4 4C			 mov ah, 4ch
   1459	064B  32 C0			 xor al, al
   1460	064D  CD 21			 int 21h
   1461	064F  C3			 ret
   1462	0650			     endp
   1463
   1464	0650			     THROTTLE proc
   1465	0650  50			 push ax
   1466	0651  51			 push cx
   1467	0652  52			 push dx
   1468
   1469	0653  33 C9			 xor cx, cx
   1470	0655  BA 2710			 mov dx, 2710H
   1471	0658  B4 86			 mov ah, 86H
   1472	065A  CD 15			 int 15h
   1473
   1474	065C  5A			 pop dx
   1475	065D  59			 pop cx
   1476	065E  58			 pop ax
   1477	065F  C3			 ret
   1478	0660			     endp
   1479
   1480	0660			     SYSTIME_SEED proc
   1481	0660  50			 push ax
   1482	0661  51			 push cx
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 27
MAIN.ASM



   1483	0662  52			 push dx
   1484
   1485	0663  33 C0			 xor ax, ax
   1486	0665  CD 1A			 int 1AH
   1487	0667  89 16 0018r		 mov seed, dx
   1488
   1489	066B  5A			 pop dx
   1490	066C  59			 pop cx
   1491	066D  58			 pop ax
   1492	066E  C3			 ret
   1493	066F			     endp
   1494
   1495	066F			     MAIN proc
   1496	066F  B8 0000s			 mov AX, @data
   1497	0672  8E D8			 mov DS, AX
   1498	0674  B8 A000			 mov AX, 0A000H
   1499	0677  8E C0			 mov ES, AX
   1500	0679  33 FF			 xor DI, DI
   1501
   1502	067B  E8 FFE2			 call SYSTIME_SEED
   1503
   1504					 ; Define o modo de video
   1505	067E  32 E4			 xor ah, ah
   1506	0680  32 FF			 xor bh, bh
   1507	0682  B0 13			 mov al, 13h
   1508	0684  CD 10			 int 10h
   1509
   1510					 ; Exibe título e botões do menu
   1511	0686  E8 FA11			 call PRINT_TITLE_MENU
   1512	0689  E8 FABF			 call PRINT_BUTTONS
   1513	068C  E8 FAF3			 call RESET_CROSS_SHIP_POS
   1514
   1515	068F			     MENU_LOOP:
   1516	068F  E8 FAFF			 call CROSS_SHIPS
   1517
   1518					 ; Recebe entrada do usuário
   1519	0692  B4 01			 mov ah, 1H
   1520	0694  CD 16			 int 16H
   1521	0696  74 F7			 jz MENU_LOOP
   1522
   1523					 ; Chama a função de navegação
   1524	0698  E8 F965			 call HANDLE_INPUT
   1525
   1526					 ; Condição para iniciar o jogo
   1527	069B  80 FC 1C			 cmp ah, 1CH
   1528	069E  74 06			 je SELECT_OPTION
   1529
   1530					 ; Retorno ao loop do menu
   1531	06A0  32 E4			 xor ah, ah
   1532	06A2  CD 16			 int 16H
   1533	06A4  EB E9			 jmp MENU_LOOP
   1534
   1535	06A6			     SELECT_OPTION:
   1536	06A6  32 E4			 xor ah, ah
   1537	06A8  CD 16			 int 16H
   1538
   1539	06AA  8A 26 0000r		 mov ah, menu
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 28
MAIN.ASM



   1540	06AE  80 FC 01			 cmp ah, 1
   1541	06B1  74 14			 je FINISH
   1542
   1543	06B3  E8 FC59			 call RENDER_SECTOR
   1544
   1545	06B6  E8 FF3D			 call RESET
   1546	06B9  E8 FDB7			 call RENDER_SHIP
   1547
   1548	06BC			     GAME_LOOP:
   1549	06BC  E8 FF91			 call THROTTLE
   1550	06BF  E8 FF41			 call UPDATE
   1551	06C2  E8 FF4B			 call RENDER
   1552
   1553	06C5  EB F5			 jmp GAME_LOOP
   1554
   1555	06C7			     FINISH:
   1556	06C7  E8 FF79			 CALL END_GAME
   1557
   1558	06CA  C3			 ret
   1559	06CB			     endp
   1560
   1561				     end MAIN
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 29
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/11/24"
??FILENAME			  Text	 "MAIN	  "
??TIME				  Text	 "19:29:03"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
AFTER_CLEAR			  Near	 _TEXT:0215
ALIEN_SHIP			  Byte	 DGROUP:05AF
ALIEN_SHIP_POS			  Word	 DGROUP:0636
ALLIES_COUNT			  Byte	 DGROUP:05AE
ALLIES_DB			  Byte	 DGROUP:05AD
ALLIES_POS_VEC			  Word	 DGROUP:059D
ARROW_DOWN			  Near	 _TEXT:0016
ARROW_UP			  Near	 _TEXT:000D
BTN_INICIAR			  Byte	 DGROUP:0470
BTN_INICIAR_LENGTH		  Number 0051
BTN_SAIR			  Byte	 DGROUP:04C1
BTN_SAIR_LENGTH			  Number 0051
CHANGE_SPRITE_COLOR		  Near	 _TEXT:00E8
CHECK_COLLISION			  Near	 _TEXT:02B3
CHECK_DIRECTION			  Near	 _TEXT:00C1
CHECK_EOS			  Near	 _TEXT:0427
CHECK_SHIP_COLLISION		  Near	 _TEXT:03DC
CHECK_X_IN_RANGE		  Near	 _TEXT:02E9
CHECK_Y_IN_RANGE		  Near	 _TEXT:02CF
CLEAR_LINE			  Near	 _TEXT:010B
CLEAR_SCREEN			  Near	 _TEXT:0223
CLEAR_SPRITE			  Near	 _TEXT:00FF
CONTINUE_COLLISION		  Near	 _TEXT:03FB
CONVERT_UINT16			  Near	 _TEXT:04AA
CROSS_SHIPS			  Near	 _TEXT:0191
DID_SHOOT			  Byte	 DGROUP:0003
DRAW_LINE			  Near	 _TEXT:0137
END_COLLISION			  Near	 _TEXT:0308
END_CONTROLS			  Near	 _TEXT:0095
END_CONVERSION			  Near	 _TEXT:04CB
END_ENEMY_UPDATE		  Near	 _TEXT:0459
END_GAME			  Near	 _TEXT:0643
END_HANDLE			  Near	 _TEXT:0026
END_POS_UPDATE			  Near	 _TEXT:01DE
END_RENDER			  Near	 _TEXT:0641
END_SHIP_UPDATE			  Near	 _TEXT:04A5
END_SHOT			  Near	 _TEXT:05CE
END_TIME			  Near	 _TEXT:056F
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 30
Symbol Table



ENEMY_POS			  Word	 DGROUP:0013
EXIT_BTN			  Near	 _TEXT:0173
FINISH				  Near	 _TEXT:06C7
GAME_LOOP			  Near	 _TEXT:06BC
GAME_OVER			  Byte	 DGROUP:02E3
GAME_OVER_LEN			  Number 00E7
HANDLE_CONTROLS			  Near	 _TEXT:0027
HANDLE_INPUT			  Near	 _TEXT:0000
IS_SHIP_COLLIDING		  Byte	 DGROUP:059C
LOOP_DIV			  Near	 _TEXT:04B2
MAIN				  Near	 _TEXT:066F
MENU				  Byte	 DGROUP:0000
MENU_LOOP			  Near	 _TEXT:068F
MOVE_ALIEN_SHIP			  Near	 _TEXT:01B5
MOVE_DOWN			  Near	 _TEXT:0067
MOVE_NEGATIVE			  Near	 _TEXT:00CB
MOVE_SHOT			  Near	 _TEXT:05B3
MOVE_SPRITE			  Near	 _TEXT:00AC
MOVE_UP				  Near	 _TEXT:004A
MOVE_Y_AXIS			  Near	 _TEXT:00B8
NO_CLEAR			  Near	 _TEXT:020F
PIXEL_LOOP			  Near	 _TEXT:00EF
PRINT_BUTTONS			  Near	 _TEXT:014B
PRINT_STRING			  Near	 _TEXT:00D3
PRINT_TITLE_MENU		  Near	 _TEXT:009A
RANDOM_UINT16			  Near	 _TEXT:0271
RANDOM_UINT8_RANGE		  Near	 _TEXT:0281
RENDER				  Near	 _TEXT:0610
RENDER_ALLY_SHIPS		  Near	 _TEXT:01DF
RENDER_BUTTONS			  Near	 _TEXT:001C
RENDER_ENEMY			  Near	 _TEXT:045E
RENDER_SCORE			  Near	 _TEXT:04D1
RENDER_SECTOR			  Near	 _TEXT:030F
RENDER_SHIP			  Near	 _TEXT:0473
RENDER_SINGLE			  Near	 _TEXT:01EF
RENDER_SPRITE			  Near	 _TEXT:011F
RENDER_TIME			  Near	 _TEXT:0506
RERENDER_ALLIES			  Byte	 DGROUP:0016
RERENDER_SCORE			  Byte	 DGROUP:0017
RERENDER_SHIP			  Byte	 DGROUP:0015
RESET				  Near	 _TEXT:05F6
RESET_CROSS_SHIP_POS		  Near	 _TEXT:0182
RESET_ENEMY			  Near	 _TEXT:036D
RESET_POS			  Near	 _TEXT:01DB
RESET_RERENDERS			  Near	 _TEXT:05E2
RESET_SHIP			  Near	 _TEXT:046C
RESET_SHIP_COLLISION		  Near	 _TEXT:0422
RESET_SHOT			  Near	 _TEXT:0571
RESET_TIME			  Near	 _TEXT:05D4
SAVE_POS			  Near	 _TEXT:00CD
SAVE_TIME			  Near	 _TEXT:0565
SAVE_TIMEOUT			  Near	 _TEXT:056B
SCORE				  Word	 DGROUP:0006
SCORE_BUFFER			  Byte	 DGROUP:0008
SCORE_BUFFER_LEN		  Number 0005
SCORE_STR			  Byte	 DGROUP:010F
SCORE_STR_LEN			  Number 0006
Turbo Assembler	 Version 4.1	    12/11/24 19:29:03	    Page 31
Symbol Table



SCREEN				  Byte	 DGROUP:0001
SECTOR				  Byte	 DGROUP:0002
SECTOR_LEN			  Number 0098
SECTOR_ONE			  Byte	 DGROUP:011B
SECTOR_THREE			  Byte	 DGROUP:024B
SECTOR_TWO			  Byte	 DGROUP:01B3
SECTOR_VEC			  Word	 DGROUP:046A
SEED				  Word	 DGROUP:0018
SELECT_OPTION			  Near	 _TEXT:06A6
SHIP				  Byte	 DGROUP:0512
SHIP_COLOR			  Byte	 DGROUP:059B
SHIP_POS			  Word	 DGROUP:0599
SHIP_SPEED			  Word	 DGROUP:000F
SHOOT				  Near	 _TEXT:0084
SHOT				  Byte	 DGROUP:0638
SHOT_POS			  Word	 DGROUP:0011
SHOW_GAME_OVER			  Near	 _TEXT:0299
SHOW_YOU_WIN			  Near	 _TEXT:023B
SKIP_2_ALLIES			  Near	 _TEXT:0623
SKIP_2_SCORE			  Near	 _TEXT:0632
SKIP_REPLACE			  Near	 _TEXT:00F7
SKIP_X_MAX			  Near	 _TEXT:02F4
SKIP_X_MIN			  Near	 _TEXT:0302
SKIP_Y_MAX			  Near	 _TEXT:02D7
SKIP_Y_MIN			  Near	 _TEXT:02E5
START_BTN			  Near	 _TEXT:0159
STRING				  Byte	 DGROUP:001A
STRING_LENGTH			  Number 00F5
SUM_POINTS			  Near	 _TEXT:0323
SYSTIME_SEED			  Near	 _TEXT:0660
THROTTLE			  Near	 _TEXT:0650
TIME				  Byte	 DGROUP:0005
TIMEOUT				  Byte	 DGROUP:0004
TIME_BUFFER			  Byte	 DGROUP:000D
TIME_BUFFER_LEN			  Number 0002
TIME_STR			  Byte	 DGROUP:0115
TIME_STR_LEN			  Number 0006
UPDATE				  Near	 _TEXT:0603
UPDATE_ENEMY			  Near	 _TEXT:0398
UPDATE_SHIP			  Near	 _TEXT:0491
UPDATE_SHOT			  Near	 _TEXT:058D
UPDATE_TIME			  Near	 _TEXT:053E
YOU_WIN				  Byte	 DGROUP:03CA
YOU_WIN_LEN			  Number 00A0

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0400 Para	  Stack	  STACK
  _DATA				  16  06BF Word	  Public  DATA
_TEXT				  16  06CB Word	  Public  CODE
