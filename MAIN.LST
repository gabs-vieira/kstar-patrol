Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 1
MAIN.ASM



      1	0000			     .model small
      2	0000			     .stack
      3
      4	0000			     .data
      5	0000  00			 menu db 0
      6					 ; 0 - Menu
      7					 ; 1 - Setor
      8					 ; 2 - Jogo
      9					 ; 3 - Game Over
     10	0001  00			 screen	db 0
     11	0002  01			 sector	db 1
     12	0003  00			 timeout db 0
     13	0004  3C			 time db 60
     14	0005  0000			 score dw 0
     15
     16	0007  30 30 30 30 30		 score_buffer db '00000'
     17	      =0005			 score_buffer_len equ $-score_buffer
     18
     19	000C  30 30			 time_buffer db	'00'
     20	      =0002			 time_buffer_len equ $-time_buffer
     21
     22	000E  0005			 ship_speed dw 5
     23
     24	0010  03			 shot_count db 3
     25	0011  23BE 23BE	23BE		 shot_array_pos	dw 305*30,305*30,305*30
     26	0017  00 00 00			 shot_array_shoot db 0,0,0
     27
     28					 ; Re-renders
     29	001A  01			 rerender_ship db 1
     30	001B  01			 rerender_allies db 1
     31	001C  01			 rerender_score	db 1
     32
     33					 ; For pseudo random number generation
     34	001D  0000			 seed dw 0
     35
     36					 ; Strings para	o título e botões
     37	001F  07*(20) 20 5F 20 20 +	 string	 db 7 dup(" ")," _  __	 ___ _		  ",13,10
     38	      5F 5F 20 20 20 5F	5F+
     39	      5F 20 5F 20 20 20	20+
     40	      20 20 20 20 20 20	20+
     41	      20 0D 0A
     42	0042  07*(20) 7C 20 7C 2F +		 db 7 dup(" "),"| |/ /__/ __| |_ __ _ _	_ ",13,10
     43	      20 2F 5F 5F 2F 20	5F+
     44	      5F 7C 20 7C 5F 20	5F+
     45	      5F 20 5F 20 5F 20	5F+
     46	      20 0D 0A
     47	0065  07*(20) 7C 20 27 20 +		 db 7 dup(" "),"| ' <___\__ \  _/ _` | '_|",13,10
     48	      3C 5F 5F 5F 5C 5F	5F+
     49	      20 5C 20 20 5F 2F	20+
     50	      5F 60 20 7C 20 27	5F+
     51	      7C 0D 0A
     52	0088  07*(20) 7C 5F 7C 5C +		 db 7 dup(" "),"|_|\_\	|___/\__\__,_|_|  ",13,10
     53	      5F 5C 20 20 7C 5F	5F+
     54	      5F 2F 5C 5F 5F 5C	5F+
     55	      5F 2C 5F 7C 5F 7C	20+
     56	      20 0D 0A
     57	00AB  07*(20) 7C 20 5F 20 +		 db 7 dup(" "),"| _ \__	_| |_ _	_ ___| |  ",13,10
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 2
MAIN.ASM



     58	      5C 5F 5F 20 5F 7C	20+
     59	      7C 5F 20 5F 20 5F	20+
     60	      5F 5F 5F 7C 20 7C	20+
     61	      20 0D 0A
     62	00CE  07*(20) 7C 20 20 5F +		 db 7 dup(" "),"|  _/ _` |  _| '_/ _ \ |  ",13,10
     63	      2F 20 5F 60 20 7C	20+
     64	      20 5F 7C 20 27 5F	2F+
     65	      20 5F 20 5C 20 7C	20+
     66	      20 0D 0A
     67	00F1  07*(20) 7C 5F 7C 20 +		 db 7 dup(" "),"|_| \__,_|\__|_| \___/_|  ",13,10
     68	      5C 5F 5F 2C 5F 7C	5C+
     69	      5F 5F 7C 5F 7C 20	5C+
     70	      5F 5F 5F 2F 5F 7C	20+
     71	      20 0D 0A
     72
     73	      =00F5			 string_length equ $-string
     74
     75	0114  53 43 4F 52 45 3A		 score_str db "SCORE:"
     76	      =0006			 score_str_len equ $-score_str
     77
     78	011A  54 45 4D 50 4F 3A		 time_str db "TEMPO:"
     79	      =0006			 time_str_len equ $-time_str
     80
     81	0120  05*(20) 20 5F 5F 5F +	 sector_one  db	5 dup("	"), " ___	_	       _    ",13,10
     82	      20 20 20 20 20 20	20+
     83	      5F 20 20 20 20 20	20+
     84	      20 20 20 20 20 20	20+
     85	      20 5F 20 20 20 20	0D+
     86	      0A
     87	0146  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   /	|   ",13,10
     88	      7C 20 5F 5F 5F 20	7C+
     89	      20 7C 5F 20 5F 5F	5F+
     90	      20 5F 20 5F 20 20	20+
     91	      2F 20 7C 20 20 20	0D+
     92	      0A
     93	016C  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|  |	|   ",13,10
     94	      5C 2F 20 2D 5F 29	7C+
     95	      20 20 5F 2F 20 5F	20+
     96	      5C 20 27 5F 7C 20	20+
     97	      7C 20 7C 20 20 20	0D+
     98	      0A
     99	0192  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    |_|   ",13,10
    100	      2F 5C 5F 5F 5F 5C	20+
    101	      5C 5F 5F 5C 5F 5F	5F+
    102	      2F 5F 7C 20 20 20	20+
    103	      7C 5F 7C 20 20 20	0D+
    104	      0A
    105
    106	01B8  05*(20) 20 5F 5F 5F +	 sector_two  db	5 dup("	"), " ___	_	       ___  ",13,10
    107	      20 20 20 20 20 20	20+
    108	      5F 20 20 20 20 20	20+
    109	      20 20 20 20 20 20	20+
    110	      20 5F 5F 5F 20 20	0D+
    111	      0A
    112	01DE  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   |_  ) ",13,10
    113	      7C 20 5F 5F 5F 20	7C+
    114	      20 7C 5F 20 5F 5F	5F+
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 3
MAIN.ASM



    115	      20 5F 20 5F 20 20	20+
    116	      7C 5F 20 20 29 20	0D+
    117	      0A
    118	0204  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|   / /  ",13,10
    119	      5C 2F 20 2D 5F 29	7C+
    120	      20 20 5F 2F 20 5F	20+
    121	      5C 20 27 5F 7C 20	20+
    122	      20 2F 20 2F 20 20	0D+
    123	      0A
    124	022A  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    /___| ",13,10
    125	      2F 5C 5F 5F 5F 5C	20+
    126	      5C 5F 5F 5C 5F 5F	5F+
    127	      2F 5F 7C 20 20 20	20+
    128	      2F 5F 5F 5F 7C 20	0D+
    129	      0A
    130
    131	0250  05*(20) 20 5F 5F 5F +	 sector_three	 db 5 dup(" "),	" ___	    _		   ____	",13,10
    132	      20 20 20 20 20 20	20+
    133	      5F 20 20 20 20 20	20+
    134	      20 20 20 20 20 20	20+
    135	      20 5F 5F 5F 5F 20	0D+
    136	      0A
    137	0276  05*(20) 2F 20 5F 5F +			 db 5 dup(" "),	"/ __| ___ | |_	___ _ _	  |__ /	",13,10
    138	      7C 20 5F 5F 5F 20	7C+
    139	      20 7C 5F 20 5F 5F	5F+
    140	      20 5F 20 5F 20 20	20+
    141	      7C 5F 5F 20 2F 20	0D+
    142	      0A
    143	029C  05*(20) 5C 5F 5F 20 +			 db 5 dup(" "),	"\__ \/	-_)|  _/ _ \ '_|   |_ \	",13,10
    144	      5C 2F 20 2D 5F 29	7C+
    145	      20 20 5F 2F 20 5F	20+
    146	      5C 20 27 5F 7C 20	20+
    147	      20 7C 5F 20 5C 20	0D+
    148	      0A
    149	02C2  05*(20) 7C 5F 5F 5F +			 db 5 dup(" "),	"|___/\___\ \__\___/_|	  |___/	",13,10
    150	      2F 5C 5F 5F 5F 5C	20+
    151	      5C 5F 5F 5C 5F 5F	5F+
    152	      2F 5F 7C 20 20 20	20+
    153	      7C 5F 5F 5F 2F 20	0D+
    154	      0A
    155
    156	      =0098			 sector_len equ	$-sector_three
    157
    158	02E8  0A*(20) 20 20 5F 5F +	 game_over   db	10 dup(" "), "	___		   ",13,10
    159	      5F 20 20 20 20 20	20+
    160	      20 20 20 20 20 20	20+
    161	      20 20 20 0D 0A
    162	0309  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / __|__ _ _ __  ___ ",13,10
    163	      5F 7C 5F 5F 20 5F	20+
    164	      5F 20 5F 5F 20 20	5F+
    165	      5F 5F 20 0D 0A
    166	032A  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_ / _`	| '  \/	-_)",13,10
    167	      20 2F 20 5F 60 20	7C+
    168	      20 27 20 20 5C 2F	20+
    169	      2D 5F 29 0D 0A
    170	034B  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___\__,_|_|_|_\___|",13,10
    171	      5F 5C 5F 5F 2C 5F	7C+
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 4
MAIN.ASM



    172	      5F 7C 5F 7C 5F 5C	5F+
    173	      5F 5F 7C 0D 0A
    174	036C  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / _ \__ _____ _ _   ",13,10
    175	      20 5C 5F 5F 20 5F	5F+
    176	      5F 5F 5F 20 5F 20	5F+
    177	      20 20 20 0D 0A
    178	038D  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_) \ V	/ -_) '_|  ",13,10
    179	      29 20 5C 20 56 20	2F+
    180	      20 2D 5F 29 20 27	5F+
    181	      7C 20 20 0D 0A
    182	03AE  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___/ \_/\___|_|	   ",13,10
    183	      5F 2F 20 5C 5F 2F	5C+
    184	      5F 5F 5F 7C 5F 7C	20+
    185	      20 20 20 0D 0A
    186
    187	      =00E7			 game_over_len equ $-game_over
    188
    189	03CF  20 5F 5F 20 20 20	5F+	 you_win db " __   __		       _	 _ ",13,10
    190	      5F 20 20 20 20 20	20+
    191	      20 20 20 20 20 20	20+
    192	      20 20 20 20 20 5F	20+
    193	      20 20 20 20 20 20	20+
    194	      20 5F 20 0D 0A
    195	03F7  20 5C 20 5C 20 2F	20+		 db " \	\ / /__	_ _  __	___ __|	|___ _ _| |",13,10
    196	      2F 5F 5F 20 5F 20	5F+
    197	      20 20 5F 5F 20 5F	5F+
    198	      5F 20 5F 5F 7C 20	7C+
    199	      5F 5F 5F 20 5F 20	5F+
    200	      7C 20 7C 0D 0A
    201	041F  20 20 5C 20 56 20	2F+		 db "  \ V / -_) ' \/ _/ -_) _`	/ _ \ '_|_|",13,10
    202	      20 2D 5F 29 20 27	20+
    203	      5C 2F 20 5F 2F 20	2D+
    204	      5F 29 20 5F 60 20	2F+
    205	      20 5F 20 5C 20 27	5F+
    206	      7C 5F 7C 0D 0A
    207	0447  20 20 20 5C 5F 2F	5C+		 db "	\_/\___|_||_\__\___\__,_\___/_|	(_)",13,10
    208	      5F 5F 5F 7C 5F 7C	7C+
    209	      5F 5C 5F 5F 5C 5F	5F+
    210	      5F 5C 5F 5F 2C 5F	5C+
    211	      5F 5F 5F 2F 5F 7C	20+
    212	      28 5F 29 0D 0A
    213
    214	      =00A0			 you_win_len equ $-you_win
    215
    216	046F  0120r 01B8r 0250r		 sector_vec dw offset sector_one, offset sector_two, offset sector_three
    217
    218	0475  0E*(20) DA C4 C4 C4 +	 btn_iniciar db	 14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    219	      C4 C4 C4 C4 C4 C4	BF+
    220	      0D 0A
    221	0490  0E*(20) B3 20 49 4E +		      db 14 dup(" "),179," INICIAR ",179,10,13
    222	      49 43 49 41 52 20	B3+
    223	      0A 0D
    224	04AB  0E*(20) C0 C4 C4 C4 +		      db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    225	      C4 C4 C4 C4 C4 C4	D9+
    226	      0D 0A
    227
    228	      =0051			 btn_iniciar_length equ	$-btn_iniciar
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 5
MAIN.ASM



    229
    230	04C6  0E*(20) DA C4 C4 C4 +	 btn_sair db  14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    231	      C4 C4 C4 C4 C4 C4	BF+
    232	      0D 0A
    233	04E1  0E*(20) B3 20 20 53 +		   db 14 dup(" "),179,"	 SAIR	",179,10,13
    234	      41 49 52 20 20 20	B3+
    235	      0A 0D
    236	04FC  0E*(20) C0 C4 C4 C4 +		   db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    237	      C4 C4 C4 C4 C4 C4	D9+
    238	      0D 0A
    239
    240	      =0051			 btn_sair_length equ $-btn_sair
    241
    242	0517  0140*(00)			 terrain db 320	dup(0)
    243	0657  0140*(00)			     db	320 dup(0)
    244	0797  A8*(00) 03*(06) 95* +	     db	168 dup(0),3 dup (6),149 dup(0)
    245	      (00)
    246	08D7  A6*(00) 06*(06) 94* +	     db	166 dup(0),6 dup (6),148 dup(0)
    247	      (00)
    248	0A17  22*(00) 04*(06) 07* +	     db	34 dup(0),4 dup	(6),7 dup(0),6 dup (6),63 dup(0),2 dup (6),25 dup(0),6 dup (6),18   +
    249	      (00) 06*(06) 3F*(00)+  dup(0),8 dup (6),87 dup(0),9 dup (6),51 dup(0)
    250	      02*(06) 19*(00) 06* +
    251	      (06) 12*(00) 08*(06)+
    252	      57*(00) 09*(06) 33* +
    253	      (00)
    254	0B57  21*(00) 06*(06) 05* +	     db	33 dup(0),6 dup	(6),5 dup(0),9 dup (6),37 dup(0),9 dup (6),12 dup(0),7 dup (6),20   +
    255	      (00) 09*(06) 25*(00)+  dup(0),10 dup (6),17 dup(0),9 dup (6),15 dup(0),5 dup (6),40 dup(0),5 dup (6),19 dup(0),11	dup +
    256	      09*(06) 0C*(00) 07* +  (6),15 dup(0),4 dup (6),32	dup(0)
    257	      (06) 14*(00) 0A*(06)+
    258	      11*(00) 09*(06) 0F* +
    259	      (00) 05*(06) 28*(00)+
    260	      05*(06) 13*(00) 0B* +
    261	      (06) 0F*(00) 04*(06)+
    262	      20*(00)
    263	0C97  0C*(00) 04*(06) 10* +	     db	12 dup(0),4 dup	(6),16 dup(0),7	dup (6),4 dup(0),11 dup	(6),17 dup(0),3	dup (6),15  +
    264	      (00) 07*(06) 04*(00)+  dup(0),11 dup (6),10 dup(0),10 dup	(6),15 dup(0),14 dup (6),15 dup(0),11 dup (6),13 dup(0),7   +
    265	      0B*(06) 11*(00) 03* +  dup (6),8 dup(0),6	dup (6),23 dup(0),9 dup	(6),15 dup(0),15 dup (6),12 dup(0),7 dup (6),30	dup +
    266	      (06) 0F*(00) 0B*(06)+  (0)
    267	      0A*(00) 0A*(06) 0F* +
    268	      (00) 0E*(06) 0F*(00)+
    269	      0B*(06) 0D*(00) 07* +
    270	      (06) 08*(00) 06*(06)+
    271	      17*(00) 09*(06) 0F* +
    272	      (00) 0F*(06) 0C*(00)+
    273	      07*(06) 1E*(00)
    274	0DD7  0B*(0B) 07*(06) 0E* +	     db	11 dup(0BH),7 dup (6),14 dup(0BH),23 dup (6),16	dup(0BH),3 dup (6),15 dup(0BH),11   +
    275	      (0B) 17*(06) 10*(0B)+  dup (6),9 dup(0BH),11 dup (6),13 dup(0BH),17 dup (6),14 dup(0BH),12 dup (6),11 dup(0BH),9 dup  +
    276	      03*(06) 0F*(0B) 0B* +  (6),5 dup(0BH),9 dup (6),20 dup(0BH),12 dup (6),13	dup(0BH),17 dup	(6),10 dup(0BH),9 dup (6),29+
    277	      (06) 09*(0B) 0B*(06)+  dup(0BH)
    278	      0D*(0B) 11*(06) 0E* +
    279	      (0B) 0C*(06) 0B*(0B)+
    280	      09*(06) 05*(0B) 09* +
    281	      (06) 14*(0B) 0C*(06)+
    282	      0D*(0B) 11*(06) 0A* +
    283	      (0B) 09*(06) 1D*(0B)
    284	0F17  01*(06) 09*(0B) 0A* +	     db	1 dup (6),9 dup(0BH),10	dup (6),10 dup(0BH),26 dup (6),15 dup(0BH),5 dup (6),12	dup +
    285	      (06) 0A*(0B) 1A*(06)+  (0BH),34 dup (6),8	dup(0BH),21 dup	(6),12 dup(0BH),14 dup (6),9 dup(0BH),11 dup (6),2 dup(0BH),+
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 6
MAIN.ASM



    286	      0F*(0B) 05*(06) 0C* +  13	dup (6),16 dup(0BH),17 dup (6),8 dup(0BH),20 dup (6),8 dup(0BH),11 dup (6),8 dup(0BH),3	dup +
    287	      (0B) 22*(06) 08*(0B)+  (6),8 dup(0BH),6 dup (6),2	dup(0BH),1 dup (6)
    288	      15*(06) 0C*(0B) 0E* +
    289	      (06) 09*(0B) 0B*(06)+
    290	      02*(0B) 0D*(06) 10* +
    291	      (0B) 11*(06) 08*(0B)+
    292	      14*(06) 08*(0B) 0B* +
    293	      (06) 08*(0B) 03*(06)+
    294	      08*(0B) 06*(06) 02* +
    295	      (0B) 01*(06)
    296	1057  02*(06) 07*(0B) 0C* +	     db	2 dup (6),7 dup(0BH),12	dup (6),8 dup(0BH),31 dup (6),10 dup(0BH),6 dup	(6),10 dup  +
    297	      (06) 08*(0B) 1F*(06)+  (0BH),65 dup (6),11 dup(0BH),17 dup (6),7 dup(0BH),28 dup (6),12 dup(0BH),49 dup (6),5 dup	    +
    298	      0A*(0B) 06*(06) 0A* +  (0BH),13 dup (6),5	dup(0BH),7 dup (6),4 dup(0BH),11 dup (6)
    299	      (0B) 41*(06) 0B*(0B)+
    300	      11*(06) 07*(0B) 1C* +
    301	      (06) 0C*(0B) 31*(06)+
    302	      05*(0B) 0D*(06) 05* +
    303	      (0B) 07*(06) 04*(0B)+
    304	      0B*(06)
    305	1197  03*(06) 05*(0B) 0E* +	     db	3 dup (6),5 dup(0BH),14	dup (6),4 dup(0BH),36 dup (6),6	dup(0BH),10 dup	(6),6 dup   +
    306	      (06) 04*(0B) 24*(06)+  (0BH),68 dup (6),9	dup(0BH),19 dup	(6),5 dup(0BH),109 dup (6),3 dup(0BH),8	dup (6),3 dup(0BH), +
    307	      06*(0B) 0A*(06) 06* +  12	dup (6)
    308	      (0B) 44*(06) 09*(0B)+
    309	      13*(06) 05*(0B) 6D* +
    310	      (06) 03*(0B) 08*(06)+
    311	      03*(0B) 0C*(06)
    312	12D7  3F*(06) 04*(0B) 0B* +	     db	63 dup (6),4 dup(0BH),11 dup (6),4 dup(0BH),71 dup (6),7 dup(0BH),23 dup (6),1 dup  +
    313	      (06) 04*(0B) 47*(06)+  (0BH),122 dup (6),1 dup(0BH),13 dup (6)
    314	      07*(0B) 17*(06) 01* +
    315	      (0B) 7A*(06) 01*(0B)+
    316	      0D*(06)
    317	1417  0140*(06)			     db	320 dup	(6)
    318	1557  0140*(06)			     db	320 dup	(6)
    319	1697  0140*(06)			     db	320 dup	(6)
    320	17D7  0140*(06)			     db	320 dup	(6)
    321	1917  0140*(06)			     db	320 dup	(6)
    322	1A57  0140*(06)			     db	320 dup	(6)
    323	1B97  0140*(06)			     db	320 dup	(6)
    324	1CD7  0140*(06)			     db	320 dup	(6)
    325
    326	1E17  E100			 terrain_pos dw	320 * 180
    327
    328	1E19  0F 0F 0F 0F 0F 0F	0F+	 ship	     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    329	      0F 0F 0F 0F 0F 00	00+
    330	      00
    331	1E28  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    332	      00 00 00 00 00 00	00+
    333	      00
    334	1E37  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    335	      00 00 00 00 00 00	00+
    336	      00
    337	1E46  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    338	      0F 00 00 00 00 00	00+
    339	      00
    340	1E55  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,15,15,15,15,15,15,15
    341	      0F 0F 0F 0F 0F 0F	0F+
    342	      0F
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 7
MAIN.ASM



    343	1E64  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    344	      0F 00 00 00 00 00	00+
    345	      00
    346	1E73  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    347	      00 00 00 00 00 00	00+
    348	      00
    349	1E82  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    350	      00 00 00 00 00 00	00+
    351	      00
    352	1E91  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    353	      0F 0F 0F 0F 0F 00	00+
    354	      00
    355
    356	1EA0  0000			 ship_pos dw 0
    357	1EA2  0F			 ship_color db 0FH
    358	1EA3  00			 is_ship_colliding db 0
    359
    360	1EA4  1900 3200	4B00 6400 +	 allies_pos_vec	dw 320 * 20, 320 * 40, 320 * 60, 320 * 80, 320 * 100, 320 * 120, 320 * 140, +
    361	      7D00 9600	AF00 C800    320 * 160
    362
    363					 ; each	bit represents an ally ship
    364	1EB4  FF			 allies_db db 0FFH ; 1111_1111b
    365	1EB5  08			 allies_count db 8
    366
    367	1EB6  00 00 00 00 00 00	00+	 alien_ship  db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    368	      00 09 09 09 09 09	09+
    369	      09
    370	1EC5  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    371	      00 09 09 00 00 00	00+
    372	      00
    373	1ED4  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    374	      00 00 00 00 00 00	00+
    375	      00
    376	1EE3  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    377	      09 00 00 00 00 00	00+
    378	      00
    379	1EF2  09 09 09 09 09 09	09+		     db	9,9,9,9,9,9,9,9,9,9,9,9,0,0,0
    380	      09 09 09 09 09 00	00+
    381	      00
    382	1F01  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    383	      09 00 00 00 00 00	00+
    384	      00
    385	1F10  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    386	      00 00 00 00 00 00	00+
    387	      00
    388	1F1F  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    389	      00 09 09 00 00 00	00+
    390	      00
    391	1F2E  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    392	      00 09 09 09 09 09	09+
    393	      09
    394
    395	1F3D  0000			 alien_ship_pos	dw 0
    396
    397	1F3F  05			 enemies_count db 5
    398	1F40  14*(23BE)			 enemies_pos dw	20 dup(305*30)
    399
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 8
MAIN.ASM



    400	1F68  0F 0F 0F 0F 0F 0F	0F+	 shot	     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    401	      0F 0F 00 00 00 00	00+
    402	      00
    403	1F77  0F*(00)				     db	15 dup (0)
    404	1F86  0F*(00)				     db	15 dup (0)
    405	1F95  0F*(00)				     db	15 dup (0)
    406	1FA4  00 00 00 00 00 00	0F+		     db	0,0,0,0,0,0,15,15,15,15,15,15,15,15,15
    407	      0F 0F 0F 0F 0F 0F	0F+
    408	      0F
    409	1FB3  0F*(00)				     db	15 dup (0)
    410	1FC2  0F*(00)				     db	15 dup (0)
    411	1FD1  0F*(00)				     db	15 dup (0)
    412	1FE0  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    413	      0F 0F 00 00 00 00	00+
    414	      00
    415
    416	1FEF			     .code
    417				     ; Procedimento para navegação no	menu usando as setas
    418	0000			     HANDLE_INPUT PROC
    419	0000  80 FC 48			 cmp ah, 48H
    420	0003  74 08			 je ARROW_UP
    421
    422	0005  80 FC 50			 cmp ah, 50H
    423	0008  74 0C			 je ARROW_DOWN
    424
    425	000A  EB 1A 90			 jmp END_HANDLE
    426
    427	000D			     ARROW_UP:
    428	000D  32 E4			 xor ah, ah
    429	000F  88 26 0000r		 mov menu, ah
    430
    431	0013  EB 07 90			 jmp RENDER_BUTTONS
    432
    433	0016			     ARROW_DOWN:
    434	0016  B4 01			 mov ah, 1
    435	0018  88 26 0000r		 mov menu, ah
    436
    437	001C			     RENDER_BUTTONS:
    438	001C  80 3E 0001r 00		 cmp screen, 0
    439	0021  75 03			 jne END_HANDLE
    440	0023  E8 0119			 call PRINT_BUTTONS
    441
    442	0026			     END_HANDLE:
    443	0026  C3			 ret
    444	0027			     ENDP
    445
    446
    447
    448				     ; Proc para controle da nave
    449	0027			     HANDLE_CONTROLS proc
    450	0027  56			 push si
    451	0028  57			 push di
    452	0029  50			 push ax
    453	002A  53			 push bx
    454	002B  51			 push cx
    455
    456	002C  BE 1EA0r			 mov si, offset	ship_pos
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 9
MAIN.ASM



    457	002F  8B 3C			 mov di, [si]
    458
    459	0031  80 FC 48			 cmp ah, 48H
    460	0034  74 15			 je MOVE_UP
    461
    462	0036  80 FC 50			 cmp ah, 50H
    463	0039  74 2D			 je MOVE_DOWN
    464
    465	003B  80 FC 39			 cmp ah, 39H
    466	003E  74 45			 je FIRE
    467
    468	0040  3C 71			 cmp al, 'q'
    469	0042  75 44			 jne END_CONTROLS
    470
    471	0044  33 C0			 xor ax, ax
    472	0046  CD 16			 int 16h
    473	0048  E8 06CA			 call END_GAME
    474
    475	004B			     MOVE_UP:
    476	004B  B0 01			 mov al, 1
    477	004D  E8 00A3			 call CLEAR_SPRITE
    478
    479	0050  8B 1E 1EA0r		 mov bx, [ship_pos]
    480	0054  81 FB 192F		 cmp bx, 320 * 20 + 47
    481	0058  72 2E			 jb END_CONTROLS
    482	005A  74 2C			 je END_CONTROLS
    483
    484	005C  B4 01			 mov ah, 1
    485	005E  8B 1E 000Er		 mov bx, ship_speed
    486	0062  E8 003B			 call MOVE_SPRITE
    487	0065  EB 21 90			 jmp END_CONTROLS
    488
    489	0068			     MOVE_DOWN:
    490	0068  B0 01			 mov al, 1
    491	006A  E8 0086			 call CLEAR_SPRITE
    492
    493	006D  8B 1E 1EA0r		 mov bx, [ship_pos]
    494	0071  81 FB C82F		 cmp bx, 320 * 160 + 47
    495	0075  74 11			 je END_CONTROLS
    496	0077  77 0F			 ja END_CONTROLS
    497
    498	0079  32 E4			 xor ah, ah
    499	007B  8B 1E 000Er		 mov bx, ship_speed
    500	007F  E8 001E			 call MOVE_SPRITE
    501	0082  EB 04 90			 jmp END_CONTROLS
    502
    503	0085			     FIRE:
    504	0085  E8 055A			 call SHOOT
    505
    506	0088			     END_CONTROLS:
    507	0088  59			 pop cx
    508	0089  5B			 pop bx
    509	008A  58			 pop ax
    510	008B  5F			 pop di
    511	008C  5E			 pop si
    512	008D  C3			 ret
    513	008E			     endp
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 10
MAIN.ASM



    514
    515	008E			     PRINT_TITLE_MENU proc
    516	008E  8C D8			 mov ax, ds
    517	0090  8E C0			 mov es, ax
    518
    519	0092  BD 001Fr			 mov bp, offset	string
    520	0095  B9 00F5			 mov cx, string_length ; tamanho
    521	0098  B3 02			 mov bl, 02H ; Cor verde (se bit 1 de AL estiver limpo,	usamos BL)
    522	009A  33 D2			 xor dx, dx ;linha / coluna
    523	009C  E8 0028			 call PRINT_STRING
    524
    525	009F  C3			 ret
    526	00A0			     endp
    527
    528				     ; AL = axis (0 is X, 1 is Y)
    529				     ; AH = direction (0 is positive, 1	is negative)
    530				     ; SI = position pointer
    531				     ; BX = increment
    532	00A0			     MOVE_SPRITE proc
    533	00A0  56			 push si
    534	00A1  50			 push ax
    535	00A2  53			 push bx
    536
    537	00A3  8B 0C			 mov cx, [si]
    538	00A5  3C 00			 cmp al, 0
    539	00A7  75 03			 jne MOVE_Y_AXIS
    540	00A9  EB 0A 90			 jmp CHECK_DIRECTION
    541
    542	00AC			     MOVE_Y_AXIS:
    543	00AC  50			 push ax
    544	00AD  B8 0140			 mov ax, 320
    545	00B0  F7 E3			 mul bx
    546	00B2  8B D8			 mov bx, ax
    547	00B4  58			 pop ax
    548
    549	00B5			     CHECK_DIRECTION:
    550	00B5  80 FC 00			 cmp ah, 0
    551	00B8  75 05			 jne MOVE_NEGATIVE
    552	00BA  03 CB			 add cx, bx
    553	00BC  EB 03 90			 jmp SAVE_POS
    554
    555	00BF			     MOVE_NEGATIVE:
    556	00BF  2B CB			 sub cx, bx
    557
    558	00C1			     SAVE_POS:
    559	00C1  89 0C			 mov [si], cx
    560
    561	00C3  5B			 pop bx
    562	00C4  58			 pop ax
    563	00C5  5E			 pop si
    564	00C6  C3			 ret
    565	00C7			     endp
    566
    567	00C7			     PRINT_STRING PROC
    568	00C7  50			 push AX
    569	00C8  53			 push BX
    570	00C9  1E			 push DS
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 11
MAIN.ASM



    571	00CA  06			 push ES
    572	00CB  56			 push SI
    573	00CC  55			 push BP
    574
    575					 ; Configura os	parâmetros para a função 13h
    576	00CD  B4 13			 mov ah, 13h	     ; Função	para escrever string com atributos de cor
    577	00CF  B0 01			 mov al, 1	     ; Modo: atualiza cursor após a escrita
    578							     ; AL = 1 -> modo de atualização de cursor
    579	00D1  32 FF			 xor bh, bh	      ;	Página	de vídeo 0
    580	00D3  CD 10			 int 10h	     ; Chamada de interrupção	para exibir a string
    581
    582	00D5  5D			 pop BP
    583	00D6  5E			 pop SI
    584	00D7  07			 pop ES
    585	00D8  1F			 pop DS
    586	00D9  5B			 pop BX
    587	00DA  58			 pop AX
    588	00DB  C3			 ret
    589	00DC			     ENDP
    590
    591				     ; SI = sprite pointer
    592				     ; BL = color
    593	00DC			     CHANGE_SPRITE_COLOR proc
    594	00DC  50			 push ax
    595	00DD  53			 push bx
    596	00DE  51			 push cx
    597	00DF  56			 push si
    598
    599	00E0  B9 0087			 mov cx, 15*9
    600
    601	00E3			     PIXEL_LOOP:
    602	00E3  8A 04			 mov al, [si]
    603	00E5  3C 00			 cmp al, 0
    604	00E7  74 02			 jz SKIP_REPLACE
    605	00E9  88 1C			 mov [si], bl
    606
    607	00EB			     SKIP_REPLACE:
    608	00EB  46			 inc si
    609	00EC  E2 F5			 loop PIXEL_LOOP
    610
    611	00EE  5E			 pop si
    612	00EF  59			 pop cx
    613	00F0  5B			 pop bx
    614	00F1  58			 pop ax
    615	00F2  C3			 ret
    616	00F3			     endp
    617
    618				     ; DI = sprite position
    619	00F3			     CLEAR_SPRITE proc
    620	00F3  50			 push ax
    621	00F4  51			 push cx
    622	00F5  57			 push di
    623	00F6  06			 push es
    624
    625	00F7  B8 A000			 mov ax, 0A000H
    626	00FA  8E C0			 mov es, ax
    627	00FC  B9 0009			 mov cx, 9
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 12
MAIN.ASM



    628
    629	00FF			     CLEAR_LINE:
    630	00FF  51			 push cx
    631	0100  B9 000F			 mov cx, 15
    632	0103  33 C0			 xor ax, ax
    633	0105  F3> AA			 rep stosb
    634	0107  81 C7 0131		 add di, 305
    635	010B  59			 pop cx
    636	010C  E2 F1			 loop CLEAR_LINE
    637
    638	010E  07			 pop es
    639	010F  5F			 pop di
    640	0110  59			 pop cx
    641	0111  58			 pop ax
    642	0112  C3			 ret
    643	0113			     endp
    644
    645				     ; AX = sprite position
    646				     ; SI = sprite pointer
    647	0113			     RENDER_SPRITE proc
    648	0113  53			 push bx
    649	0114  51			 push cx
    650	0115  52			 push dx
    651	0116  57			 push di
    652	0117  06			 push es
    653	0118  1E			 push ds
    654	0119  50			 push ax
    655
    656	011A  B8 0000s			 mov ax, @data
    657	011D  8E D8			 mov ds, ax
    658
    659	011F  B8 A000			 mov ax, 0A000h
    660	0122  8E C0			 mov es, ax
    661
    662	0124  58			 pop ax
    663	0125  8B F8			 mov di, ax
    664	0127  BA 0009			 mov dx, 9
    665	012A  50			 push ax
    666
    667	012B			     DRAW_LINE:
    668	012B  B9 000F			 mov cx, 15
    669	012E  F3> A4			 rep movsb
    670	0130  81 C7 0131		 add di, 320 - 15
    671	0134  4A			 dec dx
    672	0135  75 F4			 jnz DRAW_LINE
    673
    674	0137  58			 pop ax
    675	0138  1F			 pop ds
    676	0139  07			 pop es
    677	013A  5F			 pop di
    678	013B  5A			 pop dx
    679	013C  59			 pop cx
    680	013D  5B			 pop bx
    681	013E  C3		     ret
    682	013F			     endp
    683
    684				     ; Procedimento para exibir	os botões INICIAR e SAIR
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 13
MAIN.ASM



    685	013F			     PRINT_BUTTONS proc
    686	013F  50			 push ax
    687	0140  B3 0F			 mov bl, 0FH
    688	0142  8A 26 0000r		 mov ah, menu
    689	0146  80 FC 00			 cmp ah, 0
    690	0149  75 02			 jne START_BTN
    691	014B  B3 0C			 mov bl, 0CH
    692
    693	014D			     START_BTN:
    694					 ; Exibe o botão INICIAR
    695	014D  BD 0475r			 mov bp, offset	btn_iniciar
    696	0150  B9 0051			 mov cx, btn_iniciar_length ; tamanho
    697	0153  32 D2			 xor dl, dl ; coluna
    698	0155  B6 12			 mov dh, 18 ; linha
    699	0157  E8 FF6D			 call PRINT_STRING
    700
    701	015A  B3 0F			 mov bl, 0FH
    702	015C  8A 26 0000r		 mov ah, menu
    703	0160  80 FC 01			 cmp ah, 1
    704	0163  75 02			 jne EXIT_BTN
    705	0165  B3 0C			 mov bl, 0CH
    706
    707	0167			     EXIT_BTN:
    708	0167  BD 04C6r			 mov bp, offset	btn_sair
    709	016A  B9 0051			 mov cx, btn_sair_length
    710	016D  32 D2			 xor dl, dl ; coluna
    711	016F  B6 15			 mov dh, 21 ; linha
    712	0171  E8 FF53			 call PRINT_STRING
    713
    714	0174  58			 pop ax
    715	0175  C3			 ret
    716	0176			     endp
    717
    718	0176			     RESET_CROSS_SHIP_POS proc
    719	0176  50			 push ax
    720
    721	0177  B8 7D00			 mov ax, 100 * 320
    722	017A  A3 1EA0r			 mov ship_pos, ax
    723	017D  05 0131			 add ax, 305
    724	0180  A3 1F3Dr			 mov alien_ship_pos, ax
    725
    726	0183  58			 pop ax
    727	0184  C3			 ret
    728	0185			     endp
    729
    730	0185			     CROSS_SHIPS proc
    731	0185  A1 1EA0r			 mov ax, ship_pos
    732	0188  8B F8			 mov di, ax
    733	018A  E8 FF66			 call CLEAR_SPRITE
    734
    735	018D  3D 7E31			 cmp ax, 101*320-15
    736	0190  74 17			 je MOVE_ALIEN_SHIP
    737
    738	0192  FF 06 1EA0r		 inc ship_pos
    739	0196  40			 inc ax
    740	0197  BE 1E19r			 mov si, offset	ship
    741	019A  E8 FF76			 call RENDER_SPRITE
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 14
MAIN.ASM



    742
    743	019D  33 C9			 xor cx, cx
    744	019F  BA C350			 mov dx, 0C350H
    745	01A2  B4 86			 mov ah, 86H
    746	01A4  CD 15			 int 15h
    747	01A6  EB 2A 90			 jmp END_POS_UPDATE
    748
    749	01A9			     MOVE_ALIEN_SHIP:
    750	01A9  A1 1F3Dr			 mov ax, alien_ship_pos
    751	01AC  8B F8			 mov di, ax
    752
    753	01AE  50			 push ax
    754	01AF  3D 7D00			 cmp ax, 100*320
    755	01B2  58			 pop ax
    756
    757	01B3  74 1A			 je RESET_POS
    758	01B5  E8 FF3B			 call CLEAR_SPRITE
    759
    760	01B8  FF 0E 1F3Dr		 dec alien_ship_pos
    761	01BC  48			 dec ax
    762	01BD  BE 1EB6r			 mov si, offset	alien_ship
    763	01C0  E8 FF50			 call RENDER_SPRITE
    764
    765	01C3  33 C9			 xor cx, cx
    766	01C5  BA C350			 mov dx, 0C350H
    767	01C8  B4 86			 mov ah, 86H
    768	01CA  CD 15			 int 15h
    769	01CC  EB 04 90			 jmp END_POS_UPDATE
    770
    771	01CF			     RESET_POS:
    772	01CF  E8 FFA4			 call RESET_CROSS_SHIP_POS
    773
    774	01D2			     END_POS_UPDATE:
    775	01D2  C3			 ret
    776	01D3			     endp
    777
    778	01D3			     RENDER_ALLY_SHIPS proc
    779	01D3  56			 push si
    780	01D4  57			 push di
    781	01D5  52			 push dx
    782	01D6  51			 push cx
    783	01D7  53			 push bx
    784	01D8  50			 push ax
    785
    786	01D9  B9 0008			 mov cx, 8
    787	01DC  BB 1EA4r			 mov bx, offset	allies_pos_vec
    788	01DF  8A 16 1EB4r		 mov dl, allies_db
    789
    790	01E3			     RENDER_SINGLE:
    791	01E3  8B 07			 mov ax, [bx]
    792	01E5  BE 1E19r			 mov si, offset	ship
    793
    794	01E8  51			 push cx
    795	01E9  53			 push bx
    796	01EA  50			 push ax
    797
    798					 ; get color based on iteration
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 15
MAIN.ASM



    799	01EB  8A D9			 mov bl, cl
    800	01ED  80 C3 06			 add bl, 6
    801
    802	01F0  FE C9			 dec cl
    803	01F2  B0 01			 mov al, 1
    804	01F4  D2 E0			 shl al, cl
    805	01F6  22 C2			 and al, dl
    806
    807	01F8  58			 pop ax
    808	01F9  75 08			 jnz NO_CLEAR
    809	01FB  8B F8			 mov di, ax
    810	01FD  E8 FEF3			 call CLEAR_SPRITE
    811	0200  EB 07 90			 jmp AFTER_CLEAR
    812
    813	0203			     NO_CLEAR:
    814	0203  E8 FED6			 call CHANGE_SPRITE_COLOR
    815	0206  E8 FF0A			 call RENDER_SPRITE
    816
    817	0209			     AFTER_CLEAR:
    818	0209  5B			 pop bx
    819	020A  59			 pop cx
    820	020B  83 C3 02			 add bx, 2
    821	020E  E2 D3			 loop RENDER_SINGLE
    822
    823	0210  58			 pop ax
    824	0211  5B			 pop bx
    825	0212  59			 pop cx
    826	0213  5A			 pop dx
    827	0214  5F			 pop di
    828	0215  5E			 pop si
    829	0216  C3			 ret
    830	0217			     endp
    831
    832	0217			     CLEAR_SCREEN proc
    833	0217  50			 push ax
    834	0218  51			 push cx
    835	0219  06			 push es
    836	021A  57			 push di
    837
    838	021B  B8 A000			 mov ax,0A000h
    839	021E  8E C0			 mov es,ax
    840	0220  33 FF			 xor di, di
    841	0222  B9 7D00			 mov cx, 32000d
    842	0225  FC			 cld
    843	0226  33 C0			 xor ax, ax
    844	0228  F3> AB			 rep stosw
    845
    846	022A  5F			 pop di
    847	022B  07			 pop es
    848	022C  59			 pop cx
    849	022D  58			 pop ax
    850	022E  C3			 ret
    851	022F			     endp
    852
    853	022F			     SHOW_YOU_WIN proc
    854	022F  E8 FFE5			 call CLEAR_SCREEN
    855
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 16
MAIN.ASM



    856	0232  BD 03CFr			 mov bp, offset	you_win
    857	0235  B9 00A0			 mov cx, you_win_len
    858	0238  B3 0A			 mov bl, 0AH
    859	023A  32 D2			 xor dl, dl
    860	023C  B6 07			 mov dh, 7
    861	023E  E8 FE86			 call PRINT_STRING
    862
    863	0241  B3 0F			 mov bl, 0FH ; color = white
    864
    865	0243  BD 0114r			 mov bp, offset	score_str
    866	0246  B9 0006			 mov cx, score_str_len
    867	0249  B2 0C			 mov dl, 12
    868	024B  B6 0D			 mov dh, 13
    869	024D  E8 FE77			 call PRINT_STRING
    870
    871	0250  BD 0007r			 mov bp, offset	score_buffer
    872	0253  B9 0005			 mov cx, score_buffer_len
    873	0256  B2 14			 mov dl, 20
    874	0258  B6 0D			 mov dh, 13
    875	025A  E8 FE6A			 call PRINT_STRING
    876
    877	025D  33 C0			 xor ax, ax
    878	025F  CD 16			 int 16h
    879	0261  E8 04B1			 call END_GAME
    880
    881	0264  C3			 ret
    882	0265			     endp
    883
    884				     ; This proc uses LCG to generate a	random number.
    885				     ; returns in AX a random 16 bit unsigned integer
    886	0265			     RANDOM_UINT16 proc
    887	0265  52			 push dx
    888
    889	0266  B8 9A75			 mov ax, 39541
    890	0269  F7 26 001Dr		 mul seed
    891	026D  05 3F83			 add ax, 16259
    892	0270  A3 001Dr			 mov seed, ax
    893
    894	0273  5A			 pop dx
    895	0274  C3			 ret
    896	0275			     endp
    897
    898				     ; AH = range upper	boundary (max 255)
    899				     ; return random 8 bit unsigned interger to	AL, between 0 and 254
    900	0275			     RANDOM_UINT8_RANGE	proc
    901	0275  53			 push bx
    902	0276  51			 push cx
    903	0277  52			 push dx
    904	0278  50			 push ax
    905
    906	0279  33 C9			 xor cx, cx
    907	027B  8A CC			 mov cl, ah
    908
    909	027D  E8 FFE5			 call RANDOM_UINT16
    910
    911	0280  33 D2			 xor dx, dx
    912	0282  8B D9			 mov bx, cx
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 17
MAIN.ASM



    913	0284  F7 F3			 div bx
    914
    915	0286  58			 pop ax
    916
    917	0287  8A C2			 mov al, dl
    918
    919	0289  5A			 pop dx
    920	028A  59			 pop cx
    921	028B  5B			 pop bx
    922	028C  C3			 ret
    923	028D			     endp
    924
    925	028D			     SHOW_GAME_OVER proc
    926	028D  E8 FF87			 call CLEAR_SCREEN
    927
    928	0290  BD 02E8r			 mov bp, offset	game_over
    929	0293  B9 00E7			 mov cx, game_over_len
    930	0296  B3 0C			 mov bl, 0CH
    931	0298  32 D2			 xor dl, dl ; coluna
    932	029A  B6 08			 mov dh, 8 ; linha
    933	029C  E8 FE28			 call PRINT_STRING
    934
    935	029F  33 C0			 xor ax, ax
    936	02A1  CD 16			 int 16h
    937	02A3  E8 046F			 call END_GAME
    938	02A6  C3			 ret
    939	02A7			     endp
    940
    941				     ; SI = first position
    942				     ; DI = second position
    943				     ; return CL = 1 if	positions collide
    944	02A7			     CHECK_COLLISION proc
    945	02A7  55			 push bp
    946	02A8  50			 push ax
    947	02A9  53			 push bx
    948	02AA  52			 push dx
    949
    950	02AB  8B EC			 mov bp, sp
    951
    952	02AD  33 D2			 xor dx, dx
    953	02AF  32 C9			 xor cl, cl
    954	02B1  BB 0140			 mov bx, 320
    955
    956	02B4  8B C6			 mov ax, si
    957	02B6  33 D2			 xor dx, dx
    958	02B8  F7 F3			 div bx
    959
    960	02BA  52			 push dx ; value of X1 - [bp-2]
    961	02BB  50			 push ax ; value of Y1 - [bp-4]
    962
    963	02BC  8B C7			 mov ax, di
    964	02BE  33 D2			 xor dx, dx
    965	02C0  F7 F3			 div bx
    966
    967	02C2  52			 push dx ; value of X2 - [bp-6]
    968
    969	02C3			     CHECK_Y_IN_RANGE:
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 18
MAIN.ASM



    970	02C3  05 0009			 add ax, 9
    971	02C6  73 03			 jnc SKIP_Y_MAX
    972	02C8  B8 FFFF			 mov ax, 0FFFFH
    973
    974	02CB			     SKIP_Y_MAX:
    975	02CB  8B 56 FC			 mov dx, [bp - 4]
    976	02CE  3B D0			 cmp dx, ax
    977	02D0  77 2A			 ja END_COLLISION
    978
    979	02D2  2D 0012			 sub ax, 18
    980	02D5  73 02			 jnc SKIP_Y_MIN
    981	02D7  33 C0			 xor ax, ax
    982
    983	02D9			     SKIP_Y_MIN:
    984	02D9  3B D0			 cmp dx, ax
    985	02DB  72 1F			 jb END_COLLISION
    986
    987	02DD			     CHECK_X_IN_RANGE:
    988	02DD  8B 46 FE			 mov ax, [bp - 2]
    989	02E0  05 000F			 add ax, 15
    990	02E3  73 03			 jnc SKIP_X_MAX
    991	02E5  B8 FFFF			 mov ax, 0FFFFH
    992
    993	02E8			     SKIP_X_MAX:
    994	02E8  8B 56 FA			 mov dx, [bp - 6]
    995	02EB  3B D0			 cmp dx, ax
    996	02ED  77 0D			 ja END_COLLISION
    997
    998	02EF  2D 001E			 sub ax, 30
    999	02F2  73 02			 jnc SKIP_X_MIN
   1000	02F4  33 C0			 xor ax, ax
   1001
   1002	02F6			     SKIP_X_MIN:
   1003	02F6  3B D0			 cmp dx, ax
   1004	02F8  72 02			 jb END_COLLISION
   1005
   1006	02FA  B1 01			 mov cl, 1
   1007
   1008	02FC			     END_COLLISION:
   1009
   1010	02FC  8B E5			 mov sp, bp
   1011
   1012	02FE  5A			 pop dx
   1013	02FF  5B			 pop bx
   1014	0300  58			 pop ax
   1015	0301  5D			 pop bp
   1016	0302  C3			 ret
   1017	0303			     endp
   1018
   1019	0303			     RENDER_SECTOR proc
   1020	0303  50			 push ax
   1021	0304  53			 push bx
   1022	0305  51			 push cx
   1023	0306  52			 push dx
   1024	0307  55			 push bp
   1025
   1026	0308  E8 FF0C			 call CLEAR_SCREEN
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 19
MAIN.ASM



   1027
   1028					 ; Print Sector
   1029	030B  33 C0			 xor ax, ax
   1030	030D  A0 0002r			 mov al, sector
   1031
   1032	0310  3C 04			 cmp al, 4
   1033	0312  75 03			 jne SUM_POINTS
   1034	0314  E8 FF18			 call SHOW_YOU_WIN
   1035
   1036	0317			     SUM_POINTS:
   1037	0317  FE C8			 dec al	; number vector	index
   1038
   1039	0319  BB 03E8			 mov bx, 1000
   1040	031C  F7 E3			 mul bx
   1041	031E  33 DB			 xor bx, bx
   1042	0320  8A 1E 1EB5r		 mov bl, allies_count
   1043	0324  F7 E3			 mul bx
   1044	0326  01 06 0005r		 add score, ax
   1045
   1046	032A  33 C0			 xor ax, ax
   1047	032C  A0 0002r			 mov al, sector
   1048	032F  FE C8			 dec al	; number vector	index
   1049	0331  D0 E0			 shl al, 1 ; multiply by 2 (since num_vec values are dw)
   1050	0333  BB 046Fr			 mov bx, offset	sector_vec ; get the vector
   1051	0336  03 D8			 add bx, ax ; add the index to the vector ptr
   1052	0338  8B 2F			 mov bp, [bx] ;	set BP to base address of number
   1053	033A  B9 0098			 mov cx, sector_len
   1054	033D  32 D2			 xor dl, dl; line
   1055	033F  B6 0A			 mov dh, 10
   1056
   1057	0341  B4 06			 mov ah, 6 ; random value from 0 to 5
   1058	0343  E8 FF2F			 call RANDOM_UINT8_RANGE
   1059	0346  8A D8			 mov bl, al
   1060	0348  80 C3 09			 add bl, 9H
   1061	034B  E8 FD79			 call PRINT_STRING
   1062
   1063					 ; Wait	4s
   1064	034E  B9 003D			 mov cx, 3DH
   1065	0351  BA 0900			 mov dx, 900H
   1066	0354  B4 86			 mov ah, 86H
   1067	0356  CD 15			 int 15h
   1068
   1069	0358  E8 FEBC			 call CLEAR_SCREEN
   1070
   1071	035B  5D			 pop bp
   1072	035C  5A			 pop dx
   1073	035D  59			 pop cx
   1074	035E  5B			 pop bx
   1075	035F  58			 pop ax
   1076	0360  C3			 ret
   1077	0361			     endp
   1078
   1079				     ; CX = enemy id
   1080	0361			     RESET_ENEMY proc
   1081	0361  56			 push si
   1082	0362  57			 push di
   1083	0363  50			 push ax
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 20
MAIN.ASM



   1084	0364  53			 push bx
   1085	0365  51			 push cx
   1086	0366  52			 push dx
   1087
   1088	0367  BE 1F40r			 mov si, offset	enemies_pos
   1089	036A  49			 dec cx
   1090	036B  D1 E1			 shl cx, 1
   1091	036D  03 F1			 add si, cx
   1092	036F  8B 3C			 mov di, [si]
   1093	0371  E8 FD7F			 call CLEAR_SPRITE
   1094
   1095	0374  33 D2			 xor dx, dx
   1096	0376  B8 0140			 mov ax, 320
   1097
   1098	0379  50			 push ax
   1099
   1100	037A  B4 8C			 mov ah, 140
   1101	037C  E8 FEF6			 call RANDOM_UINT8_RANGE
   1102	037F  33 DB			 xor bx, bx
   1103	0381  8A D8			 mov bl, al
   1104	0383  80 C3 14			 add bl, 20
   1105
   1106	0386  58			 pop ax
   1107
   1108	0387  F7 E3			 mul bx
   1109	0389  05 010E			 add ax, 270
   1110	038C  89 04			 mov [si], ax
   1111
   1112	038E  5A			 pop dx
   1113	038F  59			 pop cx
   1114	0390  5B			 pop bx
   1115	0391  58			 pop ax
   1116	0392  5F			 pop di
   1117	0393  5E			 pop si
   1118	0394  C3			 ret
   1119	0395			     endp
   1120
   1121				     ; CX = enemy id
   1122	0395			     UPDATE_ENEMY proc
   1123	0395  55			 push bp
   1124	0396  56			 push si
   1125	0397  57			 push di
   1126	0398  50			 push ax
   1127	0399  53			 push bx
   1128	039A  51			 push cx
   1129
   1130	039B  8B EC			 mov bp, sp
   1131	039D  51			 push cx ; [bp - 2]
   1132
   1133	039E  B8 0100			 mov ax, 0100H
   1134	03A1  BE 1F40r			 mov si, offset	enemies_pos
   1135	03A4  49			 dec cx
   1136	03A5  D1 E1			 shl cx, 1
   1137	03A7  03 F1			 add si, cx
   1138
   1139	03A9  56			 push si ; [bp - 4]
   1140
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 21
MAIN.ASM



   1141	03AA  8B 3C			 mov di, [si]
   1142	03AC  E8 FD44			 call CLEAR_SPRITE
   1143	03AF  BB 0001			 mov bx, 1
   1144	03B2  E8 FCEB			 call MOVE_SPRITE
   1145
   1146	03B5  8B 4E FE			 mov cx, [bp - 2]
   1147	03B8  E8 0109			 call RENDER_ENEMY
   1148
   1149	03BB  33 C9			 xor cx, cx
   1150	03BD  8A 0E 0010r		 mov cl, shot_count
   1151
   1152	03C1			     CHECK_SHOTS_COLLISION:
   1153	03C1  51			 push cx
   1154	03C2  49			 dec cx
   1155	03C3  BE 0017r			 mov si, offset	shot_array_shoot
   1156	03C6  03 F1			 add si, cx
   1157	03C8  8A 3C			 mov bh, [si]
   1158	03CA  80 FF 00			 cmp bh, 0
   1159	03CD  59			 pop cx
   1160	03CE  74 2F			 je SKIP_SHOT
   1161
   1162	03D0  51			 push cx
   1163	03D1  49			 dec cx
   1164	03D2  D1 E1			 shl cx, 1
   1165	03D4  BE 0011r			 mov si, offset	shot_array_pos
   1166	03D7  03 F1			 add si, cx
   1167	03D9  8B 34			 mov si, [si]
   1168	03DB  8B 5E FC			 mov bx, [bp - 4]
   1169	03DE  8B 3F			 mov di, [bx]
   1170
   1171	03E0  E8 FEC4			 call CHECK_COLLISION
   1172	03E3  80 F9 01			 cmp cl, 1
   1173	03E6  59			 pop cx
   1174
   1175	03E7  75 16			 jne SKIP_SHOT
   1176	03E9  C6 06 001Cr 01		 mov rerender_score, 1
   1177	03EE  83 06 0005r 64		 add score, 100
   1178	03F3  E8 FCFD			 call CLEAR_SPRITE
   1179	03F6  E8 0211			 call RESET_SHOT
   1180
   1181	03F9  8B 4E FE			 mov cx, [bp - 2]
   1182	03FC  E8 FF62			 call RESET_ENEMY
   1183
   1184	03FF			     SKIP_SHOT:
   1185	03FF  E2 C0			 loop CHECK_SHOTS_COLLISION
   1186
   1187
   1188	0401			     CHECK_SHIP_COLLISION:
   1189	0401  8B 36 1EA0r		 mov si, ship_pos
   1190	0405  E8 FE9F			 call CHECK_COLLISION
   1191	0408  80 F9 01			 cmp cl, 1
   1192	040B  75 3D			 jne RESET_SHIP_COLLISION
   1193
   1194	040D  8A 26 1EA3r		 mov ah, is_ship_colliding
   1195	0411  80 FC 01			 cmp ah, 1
   1196	0414  74 6E			 je END_ENEMY_UPDATE
   1197
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 22
MAIN.ASM



   1198	0416  80 3E 1EB4r 00		 cmp allies_db,	0
   1199	041B  75 03			 jne CONTINUE_COLLISION
   1200	041D  E8 FE6D			 call SHOW_GAME_OVER
   1201
   1202	0420			     CONTINUE_COLLISION:
   1203	0420  C6 06 1EA3r 01		 mov is_ship_colliding,	1
   1204	0425  8A 26 1EB4r		 mov ah, allies_db
   1205	0429  D0 EC			 shr ah, 1
   1206	042B  88 26 1EB4r		 mov allies_db,	ah
   1207	042F  C6 06 001Br 01		 mov rerender_allies, 1
   1208	0434  C6 06 001Ar 01		 mov rerender_ship, 1
   1209	0439  8B 4E FE			 mov cx, [bp - 2]
   1210	043C  E8 FF22			 call RESET_ENEMY
   1211	043F  FE 0E 1EA2r		 dec ship_color
   1212	0443  FE 0E 1EB5r		 dec allies_count
   1213	0447  EB 3B 90			 jmp END_ENEMY_UPDATE
   1214
   1215	044A			     RESET_SHIP_COLLISION:
   1216	044A  C6 06 1EA3r 00		 mov is_ship_colliding,	0
   1217
   1218	044F			     CHECK_EOS:	; end of screen
   1219	044F  33 D2			 xor dx, dx
   1220	0451  8B C7			 mov ax, di
   1221	0453  BB 0140			 mov bx, 320
   1222	0456  F7 F3			 div bx
   1223	0458  83 FA 00			 cmp dx, 0
   1224	045B  75 27			 jne END_ENEMY_UPDATE
   1225	045D  8B 4E FE			 mov cx, [bp - 2]
   1226	0460  E8 FEFE			 call RESET_ENEMY
   1227	0463  C6 06 001Br 01		 mov rerender_allies, 1
   1228	0468  C6 06 001Cr 01		 mov rerender_score, 1
   1229	046D  33 D2			 xor dx, dx
   1230	046F  B8 000A			 mov ax, 10
   1231	0472  8A 16 0002r		 mov dl, sector
   1232	0476  F7 E2			 mul dx
   1233	0478  29 06 0005r		 sub score, ax
   1234	047C  73 06			 jnc END_ENEMY_UPDATE
   1235	047E  C7 06 0005r 0000		 mov score, 0
   1236
   1237	0484			     END_ENEMY_UPDATE:
   1238
   1239	0484  8B E5			 mov sp, bp
   1240
   1241	0486  59			 pop cx
   1242	0487  5B			 pop bx
   1243	0488  58			 pop ax
   1244	0489  5F			 pop di
   1245	048A  5E			 pop si
   1246	048B  5D			 pop bp
   1247	048C  C3			 ret
   1248	048D			     endp
   1249
   1250	048D			     RENDER_TERRAIN proc
   1251	048D  53			 push bx
   1252	048E  51			 push cx
   1253	048F  52			 push dx
   1254	0490  57			 push di
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 23
MAIN.ASM



   1255	0491  06			 push es
   1256	0492  1E			 push ds
   1257	0493  50			 push ax
   1258
   1259	0494  B8 0000s			 mov ax, @data
   1260	0497  8E D8			 mov ds, ax
   1261
   1262	0499  B8 A000			 mov ax, 0A000h
   1263	049C  8E C0			 mov es, ax
   1264
   1265	049E  BE 0517r			 mov si, offset	terrain
   1266	04A1  8B 3E 1E17r		 mov di, terrain_pos
   1267	04A5  FF 0E 1E17r		 dec terrain_pos
   1268					 ; mov bx, terrain_pos
   1269	04A9  81 3E 1E17r E0FF		 cmp terrain_pos, 320*180 - 1
   1270	04AF  75 06			 jnz SKIP_POS_UPDATE
   1271	04B1  C7 06 1E17r E23F		 mov terrain_pos, 320*181 - 1
   1272
   1273	04B7			     SKIP_POS_UPDATE:
   1274	04B7  B9 1900			 mov cx, 320*20
   1275	04BA  F3> A4			 rep movsb
   1276
   1277	04BC  58			 pop ax
   1278	04BD  1F			 pop ds
   1279	04BE  07			 pop es
   1280	04BF  5F			 pop di
   1281	04C0  5A			 pop dx
   1282	04C1  59			 pop cx
   1283	04C2  5B			 pop bx
   1284	04C3  C3			 ret
   1285	04C4			     endp
   1286
   1287				     ; CX = enemy id
   1288	04C4			     RENDER_ENEMY proc
   1289	04C4  56			 push si
   1290	04C5  50			 push ax
   1291	04C6  53			 push bx
   1292	04C7  51			 push cx
   1293
   1294	04C8  BB 1F40r			 mov bx, offset	enemies_pos
   1295	04CB  49			 dec cx
   1296	04CC  D1 E1			 shl cx, 1
   1297	04CE  03 D9			 add bx, cx
   1298	04D0  8B 07			 mov ax, [bx]
   1299	04D2  BE 1EB6r			 mov si, offset	alien_ship
   1300	04D5  E8 FC3B			 call RENDER_SPRITE
   1301
   1302	04D8  59			 pop cx
   1303	04D9  5B			 pop bx
   1304	04DA  58			 pop ax
   1305	04DB  5E			 pop si
   1306	04DC  C3			 ret
   1307	04DD			     endp
   1308
   1309	04DD			     RESET_SHIP	proc
   1310	04DD  C7 06 1EA0r 76E9		 mov ship_pos, 320 * 95	+ 41 ; Ship stating position
   1311	04E3  C3			 ret
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 24
MAIN.ASM



   1312	04E4			     endp
   1313
   1314	04E4			     RENDER_SHIP proc
   1315	04E4  56			 push si
   1316	04E5  57			 push di
   1317	04E6  53			 push bx
   1318	04E7  50			 push ax
   1319
   1320	04E8  A1 1EA0r			 mov ax, ship_pos
   1321	04EB  8B F8			 mov di, ax
   1322	04ED  E8 FC03			 call CLEAR_SPRITE
   1323
   1324	04F0  BE 1E19r			 mov si, offset	ship
   1325	04F3  8A 1E 1EA2r		 mov bl, ship_color ; white
   1326	04F7  E8 FBE2			 call CHANGE_SPRITE_COLOR
   1327	04FA  E8 FC16			 call RENDER_SPRITE
   1328
   1329	04FD  58			 pop ax
   1330	04FE  5B			 pop bx
   1331	04FF  5F			 pop di
   1332	0500  5E			 pop si
   1333	0501  C3			 ret
   1334	0502			     endp
   1335
   1336	0502			     UPDATE_SHIP proc
   1337	0502  56			 push si
   1338	0503  57			 push di
   1339	0504  50			 push ax
   1340	0505  53			 push bx
   1341
   1342	0506  B4 01			 mov ah, 1H
   1343	0508  CD 16			 int 16H
   1344	050A  74 0A			 jz END_SHIP_UPDATE
   1345
   1346	050C  E8 FB18			 call HANDLE_CONTROLS
   1347	050F  32 E4			 xor ah, ah
   1348	0511  CD 16			 int 16H
   1349
   1350	0513  E8 FFCE			 call RENDER_SHIP
   1351
   1352	0516			     END_SHIP_UPDATE:
   1353
   1354	0516  5B			 pop bx
   1355	0517  58			 pop ax
   1356	0518  5F			 pop di
   1357	0519  5E			 pop si
   1358	051A  C3			 ret
   1359	051B			     endp
   1360
   1361				     ; AX = uint16 value to output
   1362				     ; SI = offset of end off string buffer
   1363				     ; CX = number of digits to	write
   1364	051B			     CONVERT_UINT16 proc
   1365	051B  56			 push si
   1366	051C  50			 push ax
   1367	051D  53			 push bx
   1368	051E  51			 push cx
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 25
MAIN.ASM



   1369	051F  52			 push dx
   1370
   1371	0520  BB 000A			 mov bx, 10
   1372
   1373	0523			     LOOP_DIV:
   1374	0523  33 D2			 xor dx, dx
   1375	0525  F7 F3			 div bx
   1376
   1377	0527  80 C2 30			 add dl, '0'
   1378	052A  88 14			 mov byte ptr ds:[si], dl
   1379	052C  4E			 dec si
   1380
   1381	052D  3D 0000			 cmp ax, 0
   1382	0530  49			 dec cx
   1383	0531  75 F0			 jnz LOOP_DIV
   1384
   1385	0533  83 F9 00			 cmp cx, 0
   1386	0536  74 04			 je END_CONVERSION
   1387
   1388	0538  B2 30			 mov dl, '0'
   1389	053A  88 14			 mov byte ptr ds:[si], dl
   1390
   1391	053C			     END_CONVERSION:
   1392	053C  5A			 pop dx
   1393	053D  59			 pop cx
   1394	053E  5B			 pop bx
   1395	053F  58			 pop ax
   1396	0540  5E			 pop si
   1397	0541  C3			 ret
   1398	0542			     endp
   1399
   1400	0542			     RENDER_SCORE proc
   1401	0542  56			 push si
   1402	0543  55			 push bp
   1403	0544  50			 push ax
   1404	0545  53			 push bx
   1405	0546  51			 push cx
   1406	0547  52			 push dx
   1407
   1408	0548  BD 0114r			 mov bp, offset	score_str
   1409	054B  B9 0006			 mov cx, score_str_len
   1410	054E  B3 0F			 mov bl, 0FH ; white
   1411	0550  33 D2			 xor dx, dx
   1412	0552  E8 FB72			 call PRINT_STRING
   1413
   1414	0555  A1 0005r			 mov ax, score
   1415	0558  BE 0007r			 mov si, offset	score_buffer
   1416	055B  83 C6 04			 add si, score_buffer_len - 1
   1417	055E  B9 0005			 mov cx, score_buffer_len
   1418	0561  E8 FFB7			 call CONVERT_UINT16
   1419
   1420	0564  BD 0007r			 mov bp, offset	score_buffer
   1421	0567  B3 02			 mov bl, 02H ; green
   1422	0569  32 F6			 xor dh, dh
   1423	056B  B2 08			 mov dl, 8
   1424	056D  E8 FB57			 call PRINT_STRING
   1425
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 26
MAIN.ASM



   1426	0570  5A			 pop dx
   1427	0571  59			 pop cx
   1428	0572  5B			 pop bx
   1429	0573  58			 pop ax
   1430	0574  5D			 pop bp
   1431	0575  5E			 pop si
   1432
   1433	0576  C3			 ret
   1434	0577			     endp
   1435
   1436	0577			     RENDER_TIME proc
   1437	0577  55			 push bp
   1438	0578  53			 push bx
   1439	0579  51			 push cx
   1440	057A  52			 push dx
   1441
   1442	057B  BD 011Ar			 mov bp, offset	time_str
   1443	057E  B9 0006			 mov cx, time_str_len
   1444	0581  B3 0F			 mov bl, 0FH ; white
   1445	0583  32 F6			 xor dh, dh
   1446	0585  B2 19			 mov dl, 25
   1447	0587  E8 FB3D			 call PRINT_STRING
   1448
   1449	058A  33 C0			 xor ax, ax
   1450	058C  A0 0004r			 mov al, time
   1451	058F  BE 000Cr			 mov si, offset	time_buffer
   1452	0592  83 C6 01			 add si, time_buffer_len - 1
   1453	0595  B9 0002			 mov cx, 2
   1454	0598  E8 FF80			 call CONVERT_UINT16
   1455
   1456	059B  BD 000Cr			 mov bp, offset	time_buffer
   1457	059E  B9 0002			 mov cx, time_buffer_len
   1458	05A1  B3 02			 mov bl, 02H ; green
   1459	05A3  32 F6			 xor dh, dh
   1460	05A5  B2 20			 mov dl, 32
   1461	05A7  E8 FB1D			 call PRINT_STRING
   1462
   1463	05AA  5A			 pop dx
   1464	05AB  59			 pop cx
   1465	05AC  5B			 pop bx
   1466	05AD  5D			 pop bp
   1467
   1468	05AE  C3			 ret
   1469	05AF			     endp
   1470
   1471	05AF			     UPDATE_TIME proc
   1472	05AF  50			 push ax
   1473
   1474	05B0  8A 26 0003r		 mov ah, timeout
   1475	05B4  FE C4			 inc ah
   1476	05B6  80 FC 64			 cmp ah, 100
   1477	05B9  75 21			 jne SAVE_TIMEOUT
   1478
   1479	05BB  8A 26 0004r		 mov ah, time
   1480	05BF  FE CC			 dec ah
   1481	05C1  75 13			 jnz SAVE_TIME
   1482
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 27
MAIN.ASM



   1483	05C3  8A 26 0002r		 mov ah, sector
   1484	05C7  FE C4			 inc ah
   1485	05C9  88 26 0002r		 mov sector, ah
   1486
   1487	05CD  E8 FD33			 call RENDER_SECTOR
   1488	05D0  E8 00DE			 call RESET
   1489
   1490	05D3  EB 0B 90			 jmp END_TIME
   1491
   1492	05D6			     SAVE_TIME:
   1493	05D6  88 26 0004r		 mov time, ah
   1494	05DA  32 E4			 xor ah, ah
   1495
   1496	05DC			     SAVE_TIMEOUT:
   1497	05DC  88 26 0003r		 mov timeout, ah
   1498
   1499	05E0			     END_TIME:
   1500	05E0  58			 pop ax
   1501	05E1  C3			 ret
   1502	05E2			     endp
   1503
   1504	05E2			     SHOOT proc
   1505	05E2  56			 push si
   1506	05E3  53			 push bx
   1507	05E4  51			 push cx
   1508
   1509					 ; Find	a shot that was	not fired yet
   1510	05E5  33 C9			 xor cx, cx
   1511	05E7  8A 0E 0010r		 mov cl, shot_count
   1512	05EB  BE 0017r			 mov si, offset	shot_array_shoot
   1513	05EE  03 F1			 add si, cx
   1514	05F0  4E			 dec si
   1515
   1516	05F1			     FIND_SHOT:
   1517	05F1  8A 1C			 mov bl, [si]
   1518	05F3  80 FB 00			 cmp bl, 0
   1519	05F6  74 08			 je FOUND_SHOT
   1520	05F8  4E			 dec si
   1521	05F9  E2 F6			 loop FIND_SHOT
   1522
   1523	05FB  83 F9 00			 cmp cx, 0
   1524	05FE  74 06			 je END_SHOOT
   1525
   1526	0600			     FOUND_SHOT:
   1527	0600  E8 0007			 call RESET_SHOT
   1528	0603  C6 04 01			 mov byte ptr [si], 1 ;	Set shot as fired
   1529
   1530	0606			     END_SHOOT:
   1531	0606  59			 pop cx
   1532	0607  5B			 pop bx
   1533	0608  5E			 pop si
   1534	0609  C3			 ret
   1535	060A			     endp
   1536
   1537				     ; CX = shot id
   1538	060A			     RESET_SHOT	proc
   1539	060A  51			 push cx
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 28
MAIN.ASM



   1540	060B  56			 push si
   1541	060C  57			 push di
   1542	060D  53			 push bx
   1543
   1544	060E  49			 dec cx	; Get shot index
   1545	060F  51			 push cx
   1546	0610  D1 E1			 shl cx, 1 ; Multiply index by 2 (for word)
   1547	0612  BE 0011r			 mov si, offset	shot_array_pos ; Get shot position array
   1548	0615  03 F1			 add si, cx ; Find shot	in array
   1549
   1550	0617  8B 3C			 mov di, [si] ;	Set DI to shot position
   1551	0619  E8 FAD7			 call CLEAR_SPRITE ; Clear shot
   1552
   1553	061C  8B 1E 1EA0r		 mov bx, ship_pos
   1554	0620  83 C3 0F			 add bx, 15
   1555	0623  89 1C			 mov [si], bx
   1556
   1557	0625  BE 0017r			 mov si, offset	shot_array_shoot ; Get shot fired array
   1558	0628  59			 pop cx
   1559	0629  03 F1			 add si, cx ; Find shot	in array
   1560	062B  C6 04 00			 mov byte ptr [si], 0 ;	Set shot as not	fired
   1561
   1562	062E  5B			 pop bx
   1563	062F  5F			 pop di
   1564	0630  5E			 pop si
   1565	0631  59			 pop cx
   1566	0632  C3			 ret
   1567	0633			     endp
   1568
   1569	0633			     UPDATE_SHOT proc
   1570	0633  57			 push di
   1571	0634  56			 push si
   1572	0635  50			 push ax
   1573	0636  53			 push bx
   1574	0637  51			 push cx
   1575	0638  52			 push dx
   1576
   1577	0639  33 C9			 xor cx, cx
   1578	063B  8A 0E 0010r		 mov cl, shot_count
   1579	063F			     SINGLE_SHOT:
   1580	063F  8B EC			 mov bp, sp
   1581	0641  51			 push cx ; [bp - 2]
   1582
   1583					 ; Find	shot index
   1584	0642  49			 dec cx
   1585	0643  BE 0017r			 mov si, offset	shot_array_shoot
   1586	0646  03 F1			 add si, cx
   1587	0648  80 3C 01			 cmp byte ptr [si], 1
   1588	064B  75 36			 jne NO_UPDATE
   1589
   1590					 ; Clear shot
   1591	064D  D1 E1			 shl cx, 1 ; Multiply index by 2 (for word array)
   1592	064F  BE 0011r			 mov si, offset	shot_array_pos
   1593	0652  03 F1			 add si, cx
   1594	0654  8B 3C			 mov di, [si]
   1595	0656  E8 FA9A			 call CLEAR_SPRITE
   1596
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 29
MAIN.ASM



   1597					 ; Reset shot
   1598	0659  33 D2			 xor dx, dx
   1599	065B  8B C7			 mov ax, di
   1600	065D  05 000F			 add ax, 15
   1601	0660  BB 0140			 mov bx, 320
   1602	0663  F7 F3			 div bx
   1603	0665  83 FA 00			 cmp dx, 0
   1604	0668  75 09			 jne MOVE_SHOT
   1605	066A  8B 4E FE			 mov cx, [bp - 2]
   1606	066D  E8 FF9A			 call RESET_SHOT
   1607	0670  EB 11 90			 jmp NO_UPDATE
   1608
   1609	0673			     MOVE_SHOT:
   1610					 ; Move	shot
   1611	0673  33 C0			 xor ax, ax
   1612	0675  BB 0003			 mov bx, 3
   1613	0678  E8 FA25			 call MOVE_SPRITE
   1614
   1615					 ; Render shot
   1616	067B  8B 04			 mov ax, [si]
   1617	067D  BE 1F68r			 mov si, offset	shot
   1618	0680  E8 FA90			 call RENDER_SPRITE
   1619
   1620	0683			     NO_UPDATE:
   1621	0683  59			 pop cx
   1622	0684  E2 B9			 loop SINGLE_SHOT
   1623
   1624	0686  8B E5			 mov sp, bp
   1625
   1626	0688  5A			 pop dx
   1627	0689  59			 pop cx
   1628	068A  5B			 pop bx
   1629	068B  58			 pop ax
   1630	068C  5E			 pop si
   1631	068D  5F			 pop di
   1632	068E  C3			 ret
   1633	068F			     endp
   1634
   1635	068F			     RESET_TIME	proc
   1636	068F  50			 push ax
   1637
   1638	0690  32 E4			 xor ah, ah
   1639	0692  88 26 0003r		 mov timeout, ah
   1640	0696  B4 3C			 mov ah, 60
   1641	0698  88 26 0004r		 mov time, ah
   1642
   1643	069C  58			 pop ax
   1644	069D			     endp
   1645
   1646	069D			     RESET_RERENDERS proc
   1647	069D  50			 push ax
   1648
   1649	069E  B4 01			 mov ah, 1
   1650	06A0  C6 06 001Ar 01		 mov rerender_ship, 1
   1651	06A5  C6 06 001Br 01		 mov rerender_allies, 1
   1652	06AA  C6 06 001Cr 01		 mov rerender_score, 1
   1653
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 30
MAIN.ASM



   1654	06AF  58			 pop ax
   1655	06B0  C3			 ret
   1656	06B1			     endp
   1657
   1658	06B1			     RESET proc	; Contains all procedures for reseting values
   1659	06B1  E8 FE29			 call RESET_SHIP
   1660
   1661	06B4  51			 push cx
   1662	06B5  33 C9			 xor cx, cx
   1663	06B7  8A 0E 1F3Fr		 mov cl, enemies_count
   1664	06BB			     ENEMIES_RESET:
   1665	06BB  E8 FCA3			 call RESET_ENEMY
   1666	06BE  E2 FB			 loop ENEMIES_RESET
   1667	06C0  59			 pop cx
   1668
   1669	06C1  E8 FFCB			 call RESET_TIME
   1670	06C4  E8 FFD6			 call RESET_RERENDERS
   1671	06C7  C3			 ret
   1672	06C8			     endp
   1673
   1674	06C8			     UPDATE proc ; Contains all	procedures for updating	game state
   1675	06C8  E8 FE37			 call UPDATE_SHIP
   1676	06CB  E8 FEE1			 call UPDATE_TIME
   1677	06CE  E8 FF62			 call UPDATE_SHOT
   1678	06D1  51			 push cx
   1679	06D2  33 C9			 xor cx, cx
   1680	06D4  8A 0E 1F3Fr		 mov cl, enemies_count
   1681	06D8			     ENEMIES_UPDATE:
   1682	06D8  E8 FCBA			 call UPDATE_ENEMY
   1683	06DB  E2 FB			 loop ENEMIES_UPDATE
   1684	06DD  59			 pop cx
   1685
   1686	06DE  C3			 ret
   1687	06DF			     endp
   1688
   1689	06DF			     RENDER proc ; Contains all	procedures for rendering game objects
   1690	06DF  50			 push ax
   1691	06E0  E8 FE94			 call RENDER_TIME
   1692	06E3  E8 FDA7			 call RENDER_TERRAIN
   1693
   1694					 ; should re-render ship?
   1695	06E6  A0 001Ar			 mov al, rerender_ship
   1696	06E9  3C 00			 cmp al, 0
   1697	06EB  74 08			 je SKIP_2_ALLIES
   1698	06ED  E8 FDF4			 call RENDER_SHIP
   1699	06F0  C6 06 001Ar 00		 mov rerender_ship, 0
   1700
   1701	06F5			     SKIP_2_ALLIES:
   1702					 ; should re-render allies?
   1703	06F5  A0 001Br			 mov al, rerender_allies
   1704	06F8  3C 01			 cmp al, 1
   1705	06FA  75 08			 jne SKIP_2_SCORE
   1706	06FC  E8 FAD4			 call RENDER_ALLY_SHIPS
   1707	06FF  C6 06 001Br 00		 mov rerender_allies, 0
   1708
   1709	0704			     SKIP_2_SCORE:
   1710					 ; should re-render score?
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 31
MAIN.ASM



   1711	0704  A0 001Cr			 mov al, rerender_score
   1712	0707  3C 01			 cmp al, 1
   1713	0709  75 08			 jne END_RENDER
   1714	070B  E8 FE34			 call RENDER_SCORE
   1715	070E  C6 06 001Cr 00		 mov rerender_score, 0
   1716
   1717	0713			     END_RENDER:
   1718	0713  58			 pop ax
   1719	0714  C3			 ret
   1720	0715			     endp
   1721
   1722	0715			     END_GAME proc
   1723					 ; Back	to text	mode
   1724	0715  32 E4			 xor ah, ah
   1725	0717  B0 03			 mov al, 3h
   1726	0719  CD 10			 int 10h
   1727
   1728					 ; Ends	program
   1729	071B  B4 4C			 mov ah, 4ch
   1730	071D  32 C0			 xor al, al
   1731	071F  CD 21			 int 21h
   1732	0721  C3			 ret
   1733	0722			     endp
   1734
   1735	0722			     THROTTLE proc
   1736	0722  50			 push ax
   1737	0723  51			 push cx
   1738	0724  52			 push dx
   1739
   1740	0725  33 C9			 xor cx, cx
   1741	0727  BA 2710			 mov dx, 2710H
   1742	072A  B4 86			 mov ah, 86H
   1743	072C  CD 15			 int 15h
   1744
   1745	072E  5A			 pop dx
   1746	072F  59			 pop cx
   1747	0730  58			 pop ax
   1748	0731  C3			 ret
   1749	0732			     endp
   1750
   1751	0732			     SYSTIME_SEED proc
   1752	0732  50			 push ax
   1753	0733  51			 push cx
   1754	0734  52			 push dx
   1755
   1756	0735  33 C0			 xor ax, ax
   1757	0737  CD 1A			 int 1AH
   1758	0739  89 16 001Dr		 mov seed, dx
   1759
   1760	073D  5A			 pop dx
   1761	073E  59			 pop cx
   1762	073F  58			 pop ax
   1763	0740  C3			 ret
   1764	0741			     endp
   1765
   1766	0741			     MAIN proc
   1767	0741  B8 0000s			 mov AX, @data
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 32
MAIN.ASM



   1768	0744  8E D8			 mov DS, AX
   1769	0746  B8 A000			 mov AX, 0A000H
   1770	0749  8E C0			 mov ES, AX
   1771	074B  33 FF			 xor DI, DI
   1772
   1773	074D  E8 FFE2			 call SYSTIME_SEED
   1774
   1775					 ; Define o modo de video
   1776	0750  32 E4			 xor ah, ah
   1777	0752  32 FF			 xor bh, bh
   1778	0754  B0 13			 mov al, 13h
   1779	0756  CD 10			 int 10h
   1780
   1781					 ; Exibe título e botões do menu
   1782	0758  E8 F933			 call PRINT_TITLE_MENU
   1783	075B  E8 F9E1			 call PRINT_BUTTONS
   1784	075E  E8 FA15			 call RESET_CROSS_SHIP_POS
   1785
   1786	0761			     MENU_LOOP:
   1787	0761  E8 FA21			 call CROSS_SHIPS
   1788
   1789					 ; Recebe entrada do usuário
   1790	0764  B4 01			 mov ah, 1H
   1791	0766  CD 16			 int 16H
   1792	0768  74 F7			 jz MENU_LOOP
   1793
   1794					 ; Chama a função de navegação
   1795	076A  E8 F893			 call HANDLE_INPUT
   1796
   1797					 ; Condição para iniciar o jogo
   1798	076D  80 FC 1C			 cmp ah, 1CH
   1799	0770  74 06			 je SELECT_OPTION
   1800
   1801					 ; Retorno ao loop do menu
   1802	0772  32 E4			 xor ah, ah
   1803	0774  CD 16			 int 16H
   1804	0776  EB E9			 jmp MENU_LOOP
   1805
   1806	0778			     SELECT_OPTION:
   1807	0778  32 E4			 xor ah, ah
   1808	077A  CD 16			 int 16H
   1809
   1810	077C  8A 26 0000r		 mov ah, menu
   1811	0780  80 FC 01			 cmp ah, 1
   1812	0783  74 14			 je FINISH
   1813
   1814	0785  E8 FB7B			 call RENDER_SECTOR
   1815
   1816	0788  E8 FF26			 call RESET
   1817	078B  E8 FD56			 call RENDER_SHIP
   1818
   1819	078E			     GAME_LOOP:
   1820	078E  E8 FF91			 call THROTTLE
   1821	0791  E8 FF34			 call UPDATE
   1822	0794  E8 FF48			 call RENDER
   1823
   1824	0797  EB F5			 jmp GAME_LOOP
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 33
MAIN.ASM



   1825
   1826	0799			     FINISH:
   1827	0799  E8 FF79			 CALL END_GAME
   1828
   1829	079C  C3			 ret
   1830	079D			     endp
   1831
   1832				     end MAIN
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 34
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/12/24"
??FILENAME			  Text	 "MAIN	  "
??TIME				  Text	 "02:07:26"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
AFTER_CLEAR			  Near	 _TEXT:0209
ALIEN_SHIP			  Byte	 DGROUP:1EB6
ALIEN_SHIP_POS			  Word	 DGROUP:1F3D
ALLIES_COUNT			  Byte	 DGROUP:1EB5
ALLIES_DB			  Byte	 DGROUP:1EB4
ALLIES_POS_VEC			  Word	 DGROUP:1EA4
ARROW_DOWN			  Near	 _TEXT:0016
ARROW_UP			  Near	 _TEXT:000D
BTN_INICIAR			  Byte	 DGROUP:0475
BTN_INICIAR_LENGTH		  Number 0051
BTN_SAIR			  Byte	 DGROUP:04C6
BTN_SAIR_LENGTH			  Number 0051
CHANGE_SPRITE_COLOR		  Near	 _TEXT:00DC
CHECK_COLLISION			  Near	 _TEXT:02A7
CHECK_DIRECTION			  Near	 _TEXT:00B5
CHECK_EOS			  Near	 _TEXT:044F
CHECK_SHIP_COLLISION		  Near	 _TEXT:0401
CHECK_SHOTS_COLLISION		  Near	 _TEXT:03C1
CHECK_X_IN_RANGE		  Near	 _TEXT:02DD
CHECK_Y_IN_RANGE		  Near	 _TEXT:02C3
CLEAR_LINE			  Near	 _TEXT:00FF
CLEAR_SCREEN			  Near	 _TEXT:0217
CLEAR_SPRITE			  Near	 _TEXT:00F3
CONTINUE_COLLISION		  Near	 _TEXT:0420
CONVERT_UINT16			  Near	 _TEXT:051B
CROSS_SHIPS			  Near	 _TEXT:0185
DRAW_LINE			  Near	 _TEXT:012B
END_COLLISION			  Near	 _TEXT:02FC
END_CONTROLS			  Near	 _TEXT:0088
END_CONVERSION			  Near	 _TEXT:053C
END_ENEMY_UPDATE		  Near	 _TEXT:0484
END_GAME			  Near	 _TEXT:0715
END_HANDLE			  Near	 _TEXT:0026
END_POS_UPDATE			  Near	 _TEXT:01D2
END_RENDER			  Near	 _TEXT:0713
END_SHIP_UPDATE			  Near	 _TEXT:0516
END_SHOOT			  Near	 _TEXT:0606
END_TIME			  Near	 _TEXT:05E0
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 35
Symbol Table



ENEMIES_COUNT			  Byte	 DGROUP:1F3F
ENEMIES_POS			  Word	 DGROUP:1F40
ENEMIES_RESET			  Near	 _TEXT:06BB
ENEMIES_UPDATE			  Near	 _TEXT:06D8
EXIT_BTN			  Near	 _TEXT:0167
FIND_SHOT			  Near	 _TEXT:05F1
FINISH				  Near	 _TEXT:0799
FIRE				  Near	 _TEXT:0085
FOUND_SHOT			  Near	 _TEXT:0600
GAME_LOOP			  Near	 _TEXT:078E
GAME_OVER			  Byte	 DGROUP:02E8
GAME_OVER_LEN			  Number 00E7
HANDLE_CONTROLS			  Near	 _TEXT:0027
HANDLE_INPUT			  Near	 _TEXT:0000
IS_SHIP_COLLIDING		  Byte	 DGROUP:1EA3
LOOP_DIV			  Near	 _TEXT:0523
MAIN				  Near	 _TEXT:0741
MENU				  Byte	 DGROUP:0000
MENU_LOOP			  Near	 _TEXT:0761
MOVE_ALIEN_SHIP			  Near	 _TEXT:01A9
MOVE_DOWN			  Near	 _TEXT:0068
MOVE_NEGATIVE			  Near	 _TEXT:00BF
MOVE_SHOT			  Near	 _TEXT:0673
MOVE_SPRITE			  Near	 _TEXT:00A0
MOVE_UP				  Near	 _TEXT:004B
MOVE_Y_AXIS			  Near	 _TEXT:00AC
NO_CLEAR			  Near	 _TEXT:0203
NO_UPDATE			  Near	 _TEXT:0683
PIXEL_LOOP			  Near	 _TEXT:00E3
PRINT_BUTTONS			  Near	 _TEXT:013F
PRINT_STRING			  Near	 _TEXT:00C7
PRINT_TITLE_MENU		  Near	 _TEXT:008E
RANDOM_UINT16			  Near	 _TEXT:0265
RANDOM_UINT8_RANGE		  Near	 _TEXT:0275
RENDER				  Near	 _TEXT:06DF
RENDER_ALLY_SHIPS		  Near	 _TEXT:01D3
RENDER_BUTTONS			  Near	 _TEXT:001C
RENDER_ENEMY			  Near	 _TEXT:04C4
RENDER_SCORE			  Near	 _TEXT:0542
RENDER_SECTOR			  Near	 _TEXT:0303
RENDER_SHIP			  Near	 _TEXT:04E4
RENDER_SINGLE			  Near	 _TEXT:01E3
RENDER_SPRITE			  Near	 _TEXT:0113
RENDER_TERRAIN			  Near	 _TEXT:048D
RENDER_TIME			  Near	 _TEXT:0577
RERENDER_ALLIES			  Byte	 DGROUP:001B
RERENDER_SCORE			  Byte	 DGROUP:001C
RERENDER_SHIP			  Byte	 DGROUP:001A
RESET				  Near	 _TEXT:06B1
RESET_CROSS_SHIP_POS		  Near	 _TEXT:0176
RESET_ENEMY			  Near	 _TEXT:0361
RESET_POS			  Near	 _TEXT:01CF
RESET_RERENDERS			  Near	 _TEXT:069D
RESET_SHIP			  Near	 _TEXT:04DD
RESET_SHIP_COLLISION		  Near	 _TEXT:044A
RESET_SHOT			  Near	 _TEXT:060A
RESET_TIME			  Near	 _TEXT:068F
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 36
Symbol Table



SAVE_POS			  Near	 _TEXT:00C1
SAVE_TIME			  Near	 _TEXT:05D6
SAVE_TIMEOUT			  Near	 _TEXT:05DC
SCORE				  Word	 DGROUP:0005
SCORE_BUFFER			  Byte	 DGROUP:0007
SCORE_BUFFER_LEN		  Number 0005
SCORE_STR			  Byte	 DGROUP:0114
SCORE_STR_LEN			  Number 0006
SCREEN				  Byte	 DGROUP:0001
SECTOR				  Byte	 DGROUP:0002
SECTOR_LEN			  Number 0098
SECTOR_ONE			  Byte	 DGROUP:0120
SECTOR_THREE			  Byte	 DGROUP:0250
SECTOR_TWO			  Byte	 DGROUP:01B8
SECTOR_VEC			  Word	 DGROUP:046F
SEED				  Word	 DGROUP:001D
SELECT_OPTION			  Near	 _TEXT:0778
SHIP				  Byte	 DGROUP:1E19
SHIP_COLOR			  Byte	 DGROUP:1EA2
SHIP_POS			  Word	 DGROUP:1EA0
SHIP_SPEED			  Word	 DGROUP:000E
SHOOT				  Near	 _TEXT:05E2
SHOT				  Byte	 DGROUP:1F68
SHOT_ARRAY_POS			  Word	 DGROUP:0011
SHOT_ARRAY_SHOOT		  Byte	 DGROUP:0017
SHOT_COUNT			  Byte	 DGROUP:0010
SHOW_GAME_OVER			  Near	 _TEXT:028D
SHOW_YOU_WIN			  Near	 _TEXT:022F
SINGLE_SHOT			  Near	 _TEXT:063F
SKIP_2_ALLIES			  Near	 _TEXT:06F5
SKIP_2_SCORE			  Near	 _TEXT:0704
SKIP_POS_UPDATE			  Near	 _TEXT:04B7
SKIP_REPLACE			  Near	 _TEXT:00EB
SKIP_SHOT			  Near	 _TEXT:03FF
SKIP_X_MAX			  Near	 _TEXT:02E8
SKIP_X_MIN			  Near	 _TEXT:02F6
SKIP_Y_MAX			  Near	 _TEXT:02CB
SKIP_Y_MIN			  Near	 _TEXT:02D9
START_BTN			  Near	 _TEXT:014D
STRING				  Byte	 DGROUP:001F
STRING_LENGTH			  Number 00F5
SUM_POINTS			  Near	 _TEXT:0317
SYSTIME_SEED			  Near	 _TEXT:0732
TERRAIN				  Byte	 DGROUP:0517
TERRAIN_POS			  Word	 DGROUP:1E17
THROTTLE			  Near	 _TEXT:0722
TIME				  Byte	 DGROUP:0004
TIMEOUT				  Byte	 DGROUP:0003
TIME_BUFFER			  Byte	 DGROUP:000C
TIME_BUFFER_LEN			  Number 0002
TIME_STR			  Byte	 DGROUP:011A
TIME_STR_LEN			  Number 0006
UPDATE				  Near	 _TEXT:06C8
UPDATE_ENEMY			  Near	 _TEXT:0395
UPDATE_SHIP			  Near	 _TEXT:0502
UPDATE_SHOT			  Near	 _TEXT:0633
UPDATE_TIME			  Near	 _TEXT:05AF
Turbo Assembler	 Version 4.1	    12/12/24 02:07:27	    Page 37
Symbol Table



YOU_WIN				  Byte	 DGROUP:03CF
YOU_WIN_LEN			  Number 00A0

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0400 Para	  Stack	  STACK
  _DATA				  16  1FEF Word	  Public  DATA
_TEXT				  16  079D Word	  Public  CODE
