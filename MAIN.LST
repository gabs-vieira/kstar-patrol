Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 1
MAIN.ASM



      1	0000			     .model small
      2	0000			     .stack
      3
      4	0000			     .data
      5	0000  00			 menu db 0
      6					 ; 0 - Menu
      7					 ; 1 - Setor
      8					 ; 2 - Jogo
      9					 ; 3 - Game Over
     10	0001  00			 screen	db 0
     11	0002  01			 sector	db 1
     12	0003  00			 timeout db 0
     13	0004  3C			 time db 60
     14	0005  0000			 score dw 0
     15
     16	0007  3C			 sector_time db	60
     17
     18	0008  30 30 30 30 30		 score_buffer db '00000'
     19	      =0005			 score_buffer_len equ $-score_buffer
     20
     21	000D  30 30			 time_buffer db	'00'
     22	      =0002			 time_buffer_len equ $-time_buffer
     23
     24	000F  0005			 ship_speed dw 5
     25
     26	0011  03			 shot_count db 3
     27	0012  23BE 23BE	23BE		 shot_array_pos	dw 305*30,305*30,305*30
     28	0018  00 00 00			 shot_array_shoot db 0,0,0
     29
     30					 ; Re-renders
     31	001B  01			 rerender_ship db 1
     32	001C  01			 rerender_allies db 1
     33	001D  01			 rerender_score	db 1
     34
     35					 ; For pseudo random number generation
     36	001E  0000			 seed dw 0
     37
     38					 ; Strings para	o título e botões
     39	0020  07*(20) 20 5F 20 20 +	 string	 db 7 dup(" ")," _  __	 ___ _		  ",13,10
     40	      5F 5F 20 20 20 5F	5F+
     41	      5F 20 5F 20 20 20	20+
     42	      20 20 20 20 20 20	20+
     43	      20 0D 0A
     44	0043  07*(20) 7C 20 7C 2F +		 db 7 dup(" "),"| |/ /__/ __| |_ __ _ _	_ ",13,10
     45	      20 2F 5F 5F 2F 20	5F+
     46	      5F 7C 20 7C 5F 20	5F+
     47	      5F 20 5F 20 5F 20	5F+
     48	      20 0D 0A
     49	0066  07*(20) 7C 20 27 20 +		 db 7 dup(" "),"| ' <___\__ \  _/ _` | '_|",13,10
     50	      3C 5F 5F 5F 5C 5F	5F+
     51	      20 5C 20 20 5F 2F	20+
     52	      5F 60 20 7C 20 27	5F+
     53	      7C 0D 0A
     54	0089  07*(20) 7C 5F 7C 5C +		 db 7 dup(" "),"|_|\_\	|___/\__\__,_|_|  ",13,10
     55	      5F 5C 20 20 7C 5F	5F+
     56	      5F 2F 5C 5F 5F 5C	5F+
     57	      5F 2C 5F 7C 5F 7C	20+
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 2
MAIN.ASM



     58	      20 0D 0A
     59	00AC  07*(20) 7C 20 5F 20 +		 db 7 dup(" "),"| _ \__	_| |_ _	_ ___| |  ",13,10
     60	      5C 5F 5F 20 5F 7C	20+
     61	      7C 5F 20 5F 20 5F	20+
     62	      5F 5F 5F 7C 20 7C	20+
     63	      20 0D 0A
     64	00CF  07*(20) 7C 20 20 5F +		 db 7 dup(" "),"|  _/ _` |  _| '_/ _ \ |  ",13,10
     65	      2F 20 5F 60 20 7C	20+
     66	      20 5F 7C 20 27 5F	2F+
     67	      20 5F 20 5C 20 7C	20+
     68	      20 0D 0A
     69	00F2  07*(20) 7C 5F 7C 20 +		 db 7 dup(" "),"|_| \__,_|\__|_| \___/_|  ",13,10
     70	      5C 5F 5F 2C 5F 7C	5C+
     71	      5F 5F 7C 5F 7C 20	5C+
     72	      5F 5F 5F 2F 5F 7C	20+
     73	      20 0D 0A
     74
     75	      =00F5			 string_length equ $-string
     76
     77	0115  53 43 4F 52 45 3A		 score_str db "SCORE:"
     78	      =0006			 score_str_len equ $-score_str
     79
     80	011B  54 45 4D 50 4F 3A		 time_str db "TEMPO:"
     81	      =0006			 time_str_len equ $-time_str
     82
     83	0121  05*(20) 20 5F 5F 5F +	 sector_one  db	5 dup("	"), " ___	_	       _    ",13,10
     84	      20 20 20 20 20 20	20+
     85	      5F 20 20 20 20 20	20+
     86	      20 20 20 20 20 20	20+
     87	      20 5F 20 20 20 20	0D+
     88	      0A
     89	0147  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   /	|   ",13,10
     90	      7C 20 5F 5F 5F 20	7C+
     91	      20 7C 5F 20 5F 5F	5F+
     92	      20 5F 20 5F 20 20	20+
     93	      2F 20 7C 20 20 20	0D+
     94	      0A
     95	016D  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|  |	|   ",13,10
     96	      5C 2F 20 2D 5F 29	7C+
     97	      20 20 5F 2F 20 5F	20+
     98	      5C 20 27 5F 7C 20	20+
     99	      7C 20 7C 20 20 20	0D+
    100	      0A
    101	0193  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    |_|   ",13,10
    102	      2F 5C 5F 5F 5F 5C	20+
    103	      5C 5F 5F 5C 5F 5F	5F+
    104	      2F 5F 7C 20 20 20	20+
    105	      7C 5F 7C 20 20 20	0D+
    106	      0A
    107
    108	01B9  05*(20) 20 5F 5F 5F +	 sector_two  db	5 dup("	"), " ___	_	       ___  ",13,10
    109	      20 20 20 20 20 20	20+
    110	      5F 20 20 20 20 20	20+
    111	      20 20 20 20 20 20	20+
    112	      20 5F 5F 5F 20 20	0D+
    113	      0A
    114	01DF  05*(20) 2F 20 5F 5F +		     db	5 dup("	"), "/ __| ___ | |_ ___	_ _   |_  ) ",13,10
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 3
MAIN.ASM



    115	      7C 20 5F 5F 5F 20	7C+
    116	      20 7C 5F 20 5F 5F	5F+
    117	      20 5F 20 5F 20 20	20+
    118	      7C 5F 20 20 29 20	0D+
    119	      0A
    120	0205  05*(20) 5C 5F 5F 20 +		     db	5 dup("	"), "\__ \/ -_)|  _/ _ \ '_|   / /  ",13,10
    121	      5C 2F 20 2D 5F 29	7C+
    122	      20 20 5F 2F 20 5F	20+
    123	      5C 20 27 5F 7C 20	20+
    124	      20 2F 20 2F 20 20	0D+
    125	      0A
    126	022B  05*(20) 7C 5F 5F 5F +		     db	5 dup("	"), "|___/\___\	\__\___/_|    /___| ",13,10
    127	      2F 5C 5F 5F 5F 5C	20+
    128	      5C 5F 5F 5C 5F 5F	5F+
    129	      2F 5F 7C 20 20 20	20+
    130	      2F 5F 5F 5F 7C 20	0D+
    131	      0A
    132
    133	0251  05*(20) 20 5F 5F 5F +	 sector_three	 db 5 dup(" "),	" ___	    _		   ____	",13,10
    134	      20 20 20 20 20 20	20+
    135	      5F 20 20 20 20 20	20+
    136	      20 20 20 20 20 20	20+
    137	      20 5F 5F 5F 5F 20	0D+
    138	      0A
    139	0277  05*(20) 2F 20 5F 5F +			 db 5 dup(" "),	"/ __| ___ | |_	___ _ _	  |__ /	",13,10
    140	      7C 20 5F 5F 5F 20	7C+
    141	      20 7C 5F 20 5F 5F	5F+
    142	      20 5F 20 5F 20 20	20+
    143	      7C 5F 5F 20 2F 20	0D+
    144	      0A
    145	029D  05*(20) 5C 5F 5F 20 +			 db 5 dup(" "),	"\__ \/	-_)|  _/ _ \ '_|   |_ \	",13,10
    146	      5C 2F 20 2D 5F 29	7C+
    147	      20 20 5F 2F 20 5F	20+
    148	      5C 20 27 5F 7C 20	20+
    149	      20 7C 5F 20 5C 20	0D+
    150	      0A
    151	02C3  05*(20) 7C 5F 5F 5F +			 db 5 dup(" "),	"|___/\___\ \__\___/_|	  |___/	",13,10
    152	      2F 5C 5F 5F 5F 5C	20+
    153	      5C 5F 5F 5C 5F 5F	5F+
    154	      2F 5F 7C 20 20 20	20+
    155	      7C 5F 5F 5F 2F 20	0D+
    156	      0A
    157
    158	      =0098			 sector_len equ	$-sector_three
    159
    160	02E9  0A*(20) 20 20 5F 5F +	 game_over   db	10 dup(" "), "	___		   ",13,10
    161	      5F 20 20 20 20 20	20+
    162	      20 20 20 20 20 20	20+
    163	      20 20 20 0D 0A
    164	030A  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / __|__ _ _ __  ___ ",13,10
    165	      5F 7C 5F 5F 20 5F	20+
    166	      5F 20 5F 5F 20 20	5F+
    167	      5F 5F 20 0D 0A
    168	032B  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_ / _`	| '  \/	-_)",13,10
    169	      20 2F 20 5F 60 20	7C+
    170	      20 27 20 20 5C 2F	20+
    171	      2D 5F 29 0D 0A
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 4
MAIN.ASM



    172	034C  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___\__,_|_|_|_\___|",13,10
    173	      5F 5C 5F 5F 2C 5F	7C+
    174	      5F 7C 5F 7C 5F 5C	5F+
    175	      5F 5F 7C 0D 0A
    176	036D  0A*(20) 20 2F 20 5F +		     db	10 dup(" "), " / _ \__ _____ _ _   ",13,10
    177	      20 5C 5F 5F 20 5F	5F+
    178	      5F 5F 5F 20 5F 20	5F+
    179	      20 20 20 0D 0A
    180	038E  0A*(20) 7C 20 28 5F +		     db	10 dup(" "), "|	(_) \ V	/ -_) '_|  ",13,10
    181	      29 20 5C 20 56 20	2F+
    182	      20 2D 5F 29 20 27	5F+
    183	      7C 20 20 0D 0A
    184	03AF  0A*(20) 20 5C 5F 5F +		     db	10 dup(" "), " \___/ \_/\___|_|	   ",13,10
    185	      5F 2F 20 5C 5F 2F	5C+
    186	      5F 5F 5F 7C 5F 7C	20+
    187	      20 20 20 0D 0A
    188
    189	      =00E7			 game_over_len equ $-game_over
    190
    191	03D0  20 5F 5F 20 20 20	5F+	 you_win db " __   __		       _	 _ ",13,10
    192	      5F 20 20 20 20 20	20+
    193	      20 20 20 20 20 20	20+
    194	      20 20 20 20 20 5F	20+
    195	      20 20 20 20 20 20	20+
    196	      20 5F 20 0D 0A
    197	03F8  20 5C 20 5C 20 2F	20+		 db " \	\ / /__	_ _  __	___ __|	|___ _ _| |",13,10
    198	      2F 5F 5F 20 5F 20	5F+
    199	      20 20 5F 5F 20 5F	5F+
    200	      5F 20 5F 5F 7C 20	7C+
    201	      5F 5F 5F 20 5F 20	5F+
    202	      7C 20 7C 0D 0A
    203	0420  20 20 5C 20 56 20	2F+		 db "  \ V / -_) ' \/ _/ -_) _`	/ _ \ '_|_|",13,10
    204	      20 2D 5F 29 20 27	20+
    205	      5C 2F 20 5F 2F 20	2D+
    206	      5F 29 20 5F 60 20	2F+
    207	      20 5F 20 5C 20 27	5F+
    208	      7C 5F 7C 0D 0A
    209	0448  20 20 20 5C 5F 2F	5C+		 db "	\_/\___|_||_\__\___\__,_\___/_|	(_)",13,10
    210	      5F 5F 5F 7C 5F 7C	7C+
    211	      5F 5C 5F 5F 5C 5F	5F+
    212	      5F 5C 5F 5F 2C 5F	5C+
    213	      5F 5F 5F 2F 5F 7C	20+
    214	      28 5F 29 0D 0A
    215
    216	      =00A0			 you_win_len equ $-you_win
    217
    218	0470  0121r 01B9r 0251r		 sector_vec dw offset sector_one, offset sector_two, offset sector_three
    219
    220	0476  0E*(20) DA C4 C4 C4 +	 btn_iniciar db	 14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    221	      C4 C4 C4 C4 C4 C4	BF+
    222	      0D 0A
    223	0491  0E*(20) B3 20 49 4E +		      db 14 dup(" "),179," INICIAR ",179,10,13
    224	      49 43 49 41 52 20	B3+
    225	      0A 0D
    226	04AC  0E*(20) C0 C4 C4 C4 +		      db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    227	      C4 C4 C4 C4 C4 C4	D9+
    228	      0D 0A
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 5
MAIN.ASM



    229
    230	      =0051			 btn_iniciar_length equ	$-btn_iniciar
    231
    232	04C7  0E*(20) DA C4 C4 C4 +	 btn_sair db  14 dup(" "),218,196,196,196,196,196,196,196,196,196,191,13,10
    233	      C4 C4 C4 C4 C4 C4	BF+
    234	      0D 0A
    235	04E2  0E*(20) B3 20 20 53 +		   db 14 dup(" "),179,"	 SAIR	",179,10,13
    236	      41 49 52 20 20 20	B3+
    237	      0A 0D
    238	04FD  0E*(20) C0 C4 C4 C4 +		   db 14 dup(" "),192,196,196,196,196,196,196,196,196,196,217,13,10
    239	      C4 C4 C4 C4 C4 C4	D9+
    240	      0D 0A
    241
    242	      =0051			 btn_sair_length equ $-btn_sair
    243
    244	0518  0140*(00)			 terrain db 320	dup(0)
    245	0658  0140*(00)			     db	320 dup(0)
    246	0798  A8*(00) 03*(06) 95* +	     db	168 dup(0),3 dup (6),149 dup(0)
    247	      (00)
    248	08D8  A6*(00) 06*(06) 94* +	     db	166 dup(0),6 dup (6),148 dup(0)
    249	      (00)
    250	0A18  22*(00) 04*(06) 07* +	     db	34 dup(0),4 dup	(6),7 dup(0),6 dup (6),63 dup(0),2 dup (6),25 dup(0),6 dup (6),18   +
    251	      (00) 06*(06) 3F*(00)+  dup(0),8 dup (6),87 dup(0),9 dup (6),51 dup(0)
    252	      02*(06) 19*(00) 06* +
    253	      (06) 12*(00) 08*(06)+
    254	      57*(00) 09*(06) 33* +
    255	      (00)
    256	0B58  21*(00) 06*(06) 05* +	     db	33 dup(0),6 dup	(6),5 dup(0),9 dup (6),37 dup(0),9 dup (6),12 dup(0),7 dup (6),20   +
    257	      (00) 09*(06) 25*(00)+  dup(0),10 dup (6),17 dup(0),9 dup (6),15 dup(0),5 dup (6),40 dup(0),5 dup (6),19 dup(0),11	dup +
    258	      09*(06) 0C*(00) 07* +  (6),15 dup(0),4 dup (6),32	dup(0)
    259	      (06) 14*(00) 0A*(06)+
    260	      11*(00) 09*(06) 0F* +
    261	      (00) 05*(06) 28*(00)+
    262	      05*(06) 13*(00) 0B* +
    263	      (06) 0F*(00) 04*(06)+
    264	      20*(00)
    265	0C98  0C*(00) 04*(06) 10* +	     db	12 dup(0),4 dup	(6),16 dup(0),7	dup (6),4 dup(0),11 dup	(6),17 dup(0),3	dup (6),15  +
    266	      (00) 07*(06) 04*(00)+  dup(0),11 dup (6),10 dup(0),10 dup	(6),15 dup(0),14 dup (6),15 dup(0),11 dup (6),13 dup(0),7   +
    267	      0B*(06) 11*(00) 03* +  dup (6),8 dup(0),6	dup (6),23 dup(0),9 dup	(6),15 dup(0),15 dup (6),12 dup(0),7 dup (6),30	dup +
    268	      (06) 0F*(00) 0B*(06)+  (0)
    269	      0A*(00) 0A*(06) 0F* +
    270	      (00) 0E*(06) 0F*(00)+
    271	      0B*(06) 0D*(00) 07* +
    272	      (06) 08*(00) 06*(06)+
    273	      17*(00) 09*(06) 0F* +
    274	      (00) 0F*(06) 0C*(00)+
    275	      07*(06) 1E*(00)
    276	0DD8  0B*(0B) 07*(06) 0E* +	     db	11 dup(0BH),7 dup (6),14 dup(0BH),23 dup (6),16	dup(0BH),3 dup (6),15 dup(0BH),11   +
    277	      (0B) 17*(06) 10*(0B)+  dup (6),9 dup(0BH),11 dup (6),13 dup(0BH),17 dup (6),14 dup(0BH),12 dup (6),11 dup(0BH),9 dup  +
    278	      03*(06) 0F*(0B) 0B* +  (6),5 dup(0BH),9 dup (6),20 dup(0BH),12 dup (6),13	dup(0BH),17 dup	(6),10 dup(0BH),9 dup (6),29+
    279	      (06) 09*(0B) 0B*(06)+  dup(0BH)
    280	      0D*(0B) 11*(06) 0E* +
    281	      (0B) 0C*(06) 0B*(0B)+
    282	      09*(06) 05*(0B) 09* +
    283	      (06) 14*(0B) 0C*(06)+
    284	      0D*(0B) 11*(06) 0A* +
    285	      (0B) 09*(06) 1D*(0B)
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 6
MAIN.ASM



    286	0F18  01*(06) 09*(0B) 0A* +	     db	1 dup (6),9 dup(0BH),10	dup (6),10 dup(0BH),26 dup (6),15 dup(0BH),5 dup (6),12	dup +
    287	      (06) 0A*(0B) 1A*(06)+  (0BH),34 dup (6),8	dup(0BH),21 dup	(6),12 dup(0BH),14 dup (6),9 dup(0BH),11 dup (6),2 dup(0BH),+
    288	      0F*(0B) 05*(06) 0C* +  13	dup (6),16 dup(0BH),17 dup (6),8 dup(0BH),20 dup (6),8 dup(0BH),11 dup (6),8 dup(0BH),3	dup +
    289	      (0B) 22*(06) 08*(0B)+  (6),8 dup(0BH),6 dup (6),2	dup(0BH),1 dup (6)
    290	      15*(06) 0C*(0B) 0E* +
    291	      (06) 09*(0B) 0B*(06)+
    292	      02*(0B) 0D*(06) 10* +
    293	      (0B) 11*(06) 08*(0B)+
    294	      14*(06) 08*(0B) 0B* +
    295	      (06) 08*(0B) 03*(06)+
    296	      08*(0B) 06*(06) 02* +
    297	      (0B) 01*(06)
    298	1058  02*(06) 07*(0B) 0C* +	     db	2 dup (6),7 dup(0BH),12	dup (6),8 dup(0BH),31 dup (6),10 dup(0BH),6 dup	(6),10 dup  +
    299	      (06) 08*(0B) 1F*(06)+  (0BH),65 dup (6),11 dup(0BH),17 dup (6),7 dup(0BH),28 dup (6),12 dup(0BH),49 dup (6),5 dup	    +
    300	      0A*(0B) 06*(06) 0A* +  (0BH),13 dup (6),5	dup(0BH),7 dup (6),4 dup(0BH),11 dup (6)
    301	      (0B) 41*(06) 0B*(0B)+
    302	      11*(06) 07*(0B) 1C* +
    303	      (06) 0C*(0B) 31*(06)+
    304	      05*(0B) 0D*(06) 05* +
    305	      (0B) 07*(06) 04*(0B)+
    306	      0B*(06)
    307	1198  03*(06) 05*(0B) 0E* +	     db	3 dup (6),5 dup(0BH),14	dup (6),4 dup(0BH),36 dup (6),6	dup(0BH),10 dup	(6),6 dup   +
    308	      (06) 04*(0B) 24*(06)+  (0BH),68 dup (6),9	dup(0BH),19 dup	(6),5 dup(0BH),109 dup (6),3 dup(0BH),8	dup (6),3 dup(0BH), +
    309	      06*(0B) 0A*(06) 06* +  12	dup (6)
    310	      (0B) 44*(06) 09*(0B)+
    311	      13*(06) 05*(0B) 6D* +
    312	      (06) 03*(0B) 08*(06)+
    313	      03*(0B) 0C*(06)
    314	12D8  3F*(06) 04*(0B) 0B* +	     db	63 dup (6),4 dup(0BH),11 dup (6),4 dup(0BH),71 dup (6),7 dup(0BH),23 dup (6),1 dup  +
    315	      (06) 04*(0B) 47*(06)+  (0BH),122 dup (6),1 dup(0BH),13 dup (6)
    316	      07*(0B) 17*(06) 01* +
    317	      (0B) 7A*(06) 01*(0B)+
    318	      0D*(06)
    319	1418  0140*(06)			     db	320 dup	(6)
    320	1558  0140*(06)			     db	320 dup	(6)
    321	1698  0140*(06)			     db	320 dup	(6)
    322	17D8  0140*(06)			     db	320 dup	(6)
    323	1918  0140*(06)			     db	320 dup	(6)
    324	1A58  0140*(06)			     db	320 dup	(6)
    325	1B98  0140*(06)			     db	320 dup	(6)
    326	1CD8  0140*(06)			     db	320 dup	(6)
    327
    328	1E18  E100			 terrain_pos dw	320 * 180
    329
    330	1E1A  0F 0F 0F 0F 0F 0F	0F+	 ship	     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    331	      0F 0F 0F 0F 0F 00	00+
    332	      00
    333	1E29  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    334	      00 00 00 00 00 00	00+
    335	      00
    336	1E38  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    337	      00 00 00 00 00 00	00+
    338	      00
    339	1E47  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    340	      0F 00 00 00 00 00	00+
    341	      00
    342	1E56  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,15,15,15,15,15,15,15
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 7
MAIN.ASM



    343	      0F 0F 0F 0F 0F 0F	0F+
    344	      0F
    345	1E65  00 00 0F 0F 0F 0F	0F+		     db	0,0,15,15,15,15,15,15,0,0,0,0,0,0,0
    346	      0F 00 00 00 00 00	00+
    347	      00
    348	1E74  00 00 0F 0F 0F 0F	00+		     db	0,0,15,15,15,15,0,0,0,0,0,0,0,0,0
    349	      00 00 00 00 00 00	00+
    350	      00
    351	1E83  00 00 0F 0F 00 00	00+		     db	0,0,15,15,0,0,0,0,0,0,0,0,0,0,0
    352	      00 00 00 00 00 00	00+
    353	      00
    354	1E92  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,15,15,15,0,0,0
    355	      0F 0F 0F 0F 0F 00	00+
    356	      00
    357
    358	1EA1  0000			 ship_pos dw 0
    359	1EA3  0F			 ship_color db 0FH
    360	1EA4  00			 is_ship_colliding db 0
    361
    362	1EA5  1900 3200	4B00 6400 +	 allies_pos_vec	dw 320 * 20, 320 * 40, 320 * 60, 320 * 80, 320 * 100, 320 * 120, 320 * 140, +
    363	      7D00 9600	AF00 C800    320 * 160
    364
    365					 ; each	bit represents an ally ship
    366	1EB5  08			 allies_count db 8
    367
    368	1EB6  00 00 00 00 00 00	00+	 alien_ship  db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    369	      00 09 09 09 09 09	09+
    370	      09
    371	1EC5  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    372	      00 09 09 00 00 00	00+
    373	      00
    374	1ED4  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    375	      00 00 00 00 00 00	00+
    376	      00
    377	1EE3  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    378	      09 00 00 00 00 00	00+
    379	      00
    380	1EF2  09 09 09 09 09 09	09+		     db	9,9,9,9,9,9,9,9,9,9,9,9,0,0,0
    381	      09 09 09 09 09 00	00+
    382	      00
    383	1F01  00 00 00 00 09 09	09+		     db	0,0,0,0,9,9,9,9,0,0,0,0,0,0,0
    384	      09 00 00 00 00 00	00+
    385	      00
    386	1F10  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    387	      00 00 00 00 00 00	00+
    388	      00
    389	1F1F  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,0,0,0,0,0
    390	      00 09 09 00 00 00	00+
    391	      00
    392	1F2E  00 00 00 00 00 00	00+		     db	0,0,0,0,0,0,0,0,9,9,9,9,9,9,9
    393	      00 09 09 09 09 09	09+
    394	      09
    395
    396	1F3D  0000			 alien_ship_pos	dw 0
    397
    398	1F3F  05			 enemies_count db 5
    399	1F40  14*(23BE)			 enemies_pos dw	20 dup(305*30)
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 8
MAIN.ASM



    400
    401	1F68  0F 0F 0F 0F 0F 0F	0F+	 shot	     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    402	      0F 0F 00 00 00 00	00+
    403	      00
    404	1F77  0F*(00)				     db	15 dup (0)
    405	1F86  0F*(00)				     db	15 dup (0)
    406	1F95  0F*(00)				     db	15 dup (0)
    407	1FA4  00 00 00 00 00 00	0F+		     db	0,0,0,0,0,0,15,15,15,15,15,15,15,15,15
    408	      0F 0F 0F 0F 0F 0F	0F+
    409	      0F
    410	1FB3  0F*(00)				     db	15 dup (0)
    411	1FC2  0F*(00)				     db	15 dup (0)
    412	1FD1  0F*(00)				     db	15 dup (0)
    413	1FE0  0F 0F 0F 0F 0F 0F	0F+		     db	15,15,15,15,15,15,15,15,15,0,0,0,0,0,0
    414	      0F 0F 00 00 00 00	00+
    415	      00
    416
    417	1FEF			     .code
    418				     ; Procedimento para navegação no	menu usando as setas
    419	0000			     HANDLE_INPUT PROC
    420	0000  80 FC 48			 cmp ah, 48H
    421	0003  74 08			 je ARROW_UP
    422
    423	0005  80 FC 50			 cmp ah, 50H
    424	0008  74 0C			 je ARROW_DOWN
    425
    426	000A  EB 1A 90			 jmp END_HANDLE
    427
    428	000D			     ARROW_UP:
    429	000D  32 E4			 xor ah, ah
    430	000F  88 26 0000r		 mov menu, ah
    431
    432	0013  EB 07 90			 jmp RENDER_BUTTONS
    433
    434	0016			     ARROW_DOWN:
    435	0016  B4 01			 mov ah, 1
    436	0018  88 26 0000r		 mov menu, ah
    437
    438	001C			     RENDER_BUTTONS:
    439	001C  80 3E 0001r 00		 cmp screen, 0
    440	0021  75 03			 jne END_HANDLE
    441	0023  E8 0119			 call PRINT_BUTTONS
    442
    443	0026			     END_HANDLE:
    444	0026  C3			 ret
    445	0027			     ENDP
    446
    447
    448
    449				     ; Proc para controle da nave
    450	0027			     HANDLE_CONTROLS proc
    451	0027  56			 push si
    452	0028  57			 push di
    453	0029  50			 push ax
    454	002A  53			 push bx
    455	002B  51			 push cx
    456
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 9
MAIN.ASM



    457	002C  BE 1EA1r			 mov si, offset	ship_pos
    458	002F  8B 3C			 mov di, [si]
    459
    460	0031  80 FC 48			 cmp ah, 48H
    461	0034  74 15			 je MOVE_UP
    462
    463	0036  80 FC 50			 cmp ah, 50H
    464	0039  74 2D			 je MOVE_DOWN
    465
    466	003B  80 FC 39			 cmp ah, 39H
    467	003E  74 45			 je FIRE
    468
    469	0040  3C 71			 cmp al, 'q'
    470	0042  75 44			 jne END_CONTROLS
    471
    472	0044  33 C0			 xor ax, ax
    473	0046  CD 16			 int 16h
    474	0048  E8 076D			 call END_GAME
    475
    476	004B			     MOVE_UP:
    477	004B  B0 01			 mov al, 1
    478	004D  E8 00A3			 call CLEAR_SPRITE
    479
    480	0050  8B 1E 1EA1r		 mov bx, [ship_pos]
    481	0054  81 FB 192F		 cmp bx, 320 * 20 + 47
    482	0058  72 2E			 jb END_CONTROLS
    483	005A  74 2C			 je END_CONTROLS
    484
    485	005C  B4 01			 mov ah, 1
    486	005E  8B 1E 000Fr		 mov bx, ship_speed
    487	0062  E8 003B			 call MOVE_SPRITE
    488	0065  EB 21 90			 jmp END_CONTROLS
    489
    490	0068			     MOVE_DOWN:
    491	0068  B0 01			 mov al, 1
    492	006A  E8 0086			 call CLEAR_SPRITE
    493
    494	006D  8B 1E 1EA1r		 mov bx, [ship_pos]
    495	0071  81 FB C82F		 cmp bx, 320 * 160 + 47
    496	0075  74 11			 je END_CONTROLS
    497	0077  77 0F			 ja END_CONTROLS
    498
    499	0079  32 E4			 xor ah, ah
    500	007B  8B 1E 000Fr		 mov bx, ship_speed
    501	007F  E8 001E			 call MOVE_SPRITE
    502	0082  EB 04 90			 jmp END_CONTROLS
    503
    504	0085			     FIRE:
    505	0085  E8 05FB			 call SHOOT
    506
    507	0088			     END_CONTROLS:
    508	0088  59			 pop cx
    509	0089  5B			 pop bx
    510	008A  58			 pop ax
    511	008B  5F			 pop di
    512	008C  5E			 pop si
    513	008D  C3			 ret
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 10
MAIN.ASM



    514	008E			     endp
    515
    516	008E			     PRINT_TITLE_MENU proc
    517	008E  8C D8			 mov ax, ds
    518	0090  8E C0			 mov es, ax
    519
    520	0092  BD 0020r			 mov bp, offset	string
    521	0095  B9 00F5			 mov cx, string_length ; tamanho
    522	0098  B3 02			 mov bl, 02H ; Cor verde (se bit 1 de AL estiver limpo,	usamos BL)
    523	009A  33 D2			 xor dx, dx ;linha / coluna
    524	009C  E8 0028			 call PRINT_STRING
    525
    526	009F  C3			 ret
    527	00A0			     endp
    528
    529				     ; AL = axis (0 is X, 1 is Y)
    530				     ; AH = direction (0 is positive, 1	is negative)
    531				     ; SI = position pointer
    532				     ; BX = increment
    533	00A0			     MOVE_SPRITE proc
    534	00A0  56			 push si
    535	00A1  50			 push ax
    536	00A2  53			 push bx
    537
    538	00A3  8B 0C			 mov cx, [si]
    539	00A5  3C 00			 cmp al, 0
    540	00A7  75 03			 jne MOVE_Y_AXIS
    541	00A9  EB 0A 90			 jmp CHECK_DIRECTION
    542
    543	00AC			     MOVE_Y_AXIS:
    544	00AC  50			 push ax
    545	00AD  B8 0140			 mov ax, 320
    546	00B0  F7 E3			 mul bx
    547	00B2  8B D8			 mov bx, ax
    548	00B4  58			 pop ax
    549
    550	00B5			     CHECK_DIRECTION:
    551	00B5  80 FC 00			 cmp ah, 0
    552	00B8  75 05			 jne MOVE_NEGATIVE
    553	00BA  03 CB			 add cx, bx
    554	00BC  EB 03 90			 jmp SAVE_POS
    555
    556	00BF			     MOVE_NEGATIVE:
    557	00BF  2B CB			 sub cx, bx
    558
    559	00C1			     SAVE_POS:
    560	00C1  89 0C			 mov [si], cx
    561
    562	00C3  5B			 pop bx
    563	00C4  58			 pop ax
    564	00C5  5E			 pop si
    565	00C6  C3			 ret
    566	00C7			     endp
    567
    568	00C7			     PRINT_STRING PROC
    569	00C7  50			 push AX
    570	00C8  53			 push BX
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 11
MAIN.ASM



    571	00C9  1E			 push DS
    572	00CA  06			 push ES
    573	00CB  56			 push SI
    574	00CC  55			 push BP
    575
    576					 ; Configura os	parâmetros para a função 13h
    577	00CD  B4 13			 mov ah, 13h	     ; Função	para escrever string com atributos de cor
    578	00CF  B0 01			 mov al, 1	     ; Modo: atualiza cursor após a escrita
    579							     ; AL = 1 -> modo de atualização de cursor
    580	00D1  32 FF			 xor bh, bh	      ;	Página	de vídeo 0
    581	00D3  CD 10			 int 10h	     ; Chamada de interrupção	para exibir a string
    582
    583	00D5  5D			 pop BP
    584	00D6  5E			 pop SI
    585	00D7  07			 pop ES
    586	00D8  1F			 pop DS
    587	00D9  5B			 pop BX
    588	00DA  58			 pop AX
    589	00DB  C3			 ret
    590	00DC			     ENDP
    591
    592				     ; SI = sprite pointer
    593				     ; BL = color
    594	00DC			     CHANGE_SPRITE_COLOR proc
    595	00DC  50			 push ax
    596	00DD  53			 push bx
    597	00DE  51			 push cx
    598	00DF  56			 push si
    599
    600	00E0  B9 0087			 mov cx, 15*9
    601
    602	00E3			     PIXEL_LOOP:
    603	00E3  8A 04			 mov al, [si]
    604	00E5  3C 00			 cmp al, 0
    605	00E7  74 02			 jz SKIP_REPLACE
    606	00E9  88 1C			 mov [si], bl
    607
    608	00EB			     SKIP_REPLACE:
    609	00EB  46			 inc si
    610	00EC  E2 F5			 loop PIXEL_LOOP
    611
    612	00EE  5E			 pop si
    613	00EF  59			 pop cx
    614	00F0  5B			 pop bx
    615	00F1  58			 pop ax
    616	00F2  C3			 ret
    617	00F3			     endp
    618
    619				     ; DI = sprite position
    620	00F3			     CLEAR_SPRITE proc
    621	00F3  50			 push ax
    622	00F4  51			 push cx
    623	00F5  57			 push di
    624	00F6  06			 push es
    625
    626	00F7  B8 A000			 mov ax, 0A000H
    627	00FA  8E C0			 mov es, ax
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 12
MAIN.ASM



    628	00FC  B9 0009			 mov cx, 9
    629
    630	00FF			     CLEAR_LINE:
    631	00FF  51			 push cx
    632	0100  B9 000F			 mov cx, 15
    633	0103  33 C0			 xor ax, ax
    634	0105  F3> AA			 rep stosb
    635	0107  81 C7 0131		 add di, 305
    636	010B  59			 pop cx
    637	010C  E2 F1			 loop CLEAR_LINE
    638
    639	010E  07			 pop es
    640	010F  5F			 pop di
    641	0110  59			 pop cx
    642	0111  58			 pop ax
    643	0112  C3			 ret
    644	0113			     endp
    645
    646				     ; AX = sprite position
    647				     ; SI = sprite pointer
    648	0113			     RENDER_SPRITE proc
    649	0113  53			 push bx
    650	0114  51			 push cx
    651	0115  52			 push dx
    652	0116  57			 push di
    653	0117  06			 push es
    654	0118  1E			 push ds
    655	0119  50			 push ax
    656
    657	011A  B8 0000s			 mov ax, @data
    658	011D  8E D8			 mov ds, ax
    659
    660	011F  B8 A000			 mov ax, 0A000h
    661	0122  8E C0			 mov es, ax
    662
    663	0124  58			 pop ax
    664	0125  8B F8			 mov di, ax
    665	0127  BA 0009			 mov dx, 9
    666	012A  50			 push ax
    667
    668	012B			     DRAW_LINE:
    669	012B  B9 000F			 mov cx, 15
    670	012E  F3> A4			 rep movsb
    671	0130  81 C7 0131		 add di, 320 - 15
    672	0134  4A			 dec dx
    673	0135  75 F4			 jnz DRAW_LINE
    674
    675	0137  58			 pop ax
    676	0138  1F			 pop ds
    677	0139  07			 pop es
    678	013A  5F			 pop di
    679	013B  5A			 pop dx
    680	013C  59			 pop cx
    681	013D  5B			 pop bx
    682	013E  C3		     ret
    683	013F			     endp
    684
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 13
MAIN.ASM



    685				     ; Procedimento para exibir	os botões INICIAR e SAIR
    686	013F			     PRINT_BUTTONS proc
    687	013F  50			 push ax
    688	0140  B3 0F			 mov bl, 0FH
    689	0142  8A 26 0000r		 mov ah, menu
    690	0146  80 FC 00			 cmp ah, 0
    691	0149  75 02			 jne START_BTN
    692	014B  B3 0C			 mov bl, 0CH
    693
    694	014D			     START_BTN:
    695					 ; Exibe o botão INICIAR
    696	014D  BD 0476r			 mov bp, offset	btn_iniciar
    697	0150  B9 0051			 mov cx, btn_iniciar_length ; tamanho
    698	0153  32 D2			 xor dl, dl ; coluna
    699	0155  B6 12			 mov dh, 18 ; linha
    700	0157  E8 FF6D			 call PRINT_STRING
    701
    702	015A  B3 0F			 mov bl, 0FH
    703	015C  8A 26 0000r		 mov ah, menu
    704	0160  80 FC 01			 cmp ah, 1
    705	0163  75 02			 jne EXIT_BTN
    706	0165  B3 0C			 mov bl, 0CH
    707
    708	0167			     EXIT_BTN:
    709	0167  BD 04C7r			 mov bp, offset	btn_sair
    710	016A  B9 0051			 mov cx, btn_sair_length
    711	016D  32 D2			 xor dl, dl ; coluna
    712	016F  B6 15			 mov dh, 21 ; linha
    713	0171  E8 FF53			 call PRINT_STRING
    714
    715	0174  58			 pop ax
    716	0175  C3			 ret
    717	0176			     endp
    718
    719	0176			     RESET_CROSS_SHIP_POS proc
    720	0176  50			 push ax
    721
    722	0177  B8 7D00			 mov ax, 100 * 320
    723	017A  A3 1EA1r			 mov ship_pos, ax
    724	017D  05 0131			 add ax, 305
    725	0180  A3 1F3Dr			 mov alien_ship_pos, ax
    726
    727	0183  58			 pop ax
    728	0184  C3			 ret
    729	0185			     endp
    730
    731	0185			     CROSS_SHIPS proc
    732	0185  A1 1EA1r			 mov ax, ship_pos
    733	0188  8B F8			 mov di, ax
    734	018A  E8 FF66			 call CLEAR_SPRITE
    735
    736	018D  3D 7E31			 cmp ax, 101*320-15
    737	0190  74 17			 je MOVE_ALIEN_SHIP
    738
    739	0192  FF 06 1EA1r		 inc ship_pos
    740	0196  40			 inc ax
    741	0197  BE 1E1Ar			 mov si, offset	ship
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 14
MAIN.ASM



    742	019A  E8 FF76			 call RENDER_SPRITE
    743
    744	019D  33 C9			 xor cx, cx
    745	019F  BA 2710			 mov dx, 2710H
    746	01A2  B4 86			 mov ah, 86H
    747	01A4  CD 15			 int 15h
    748	01A6  EB 2A 90			 jmp END_POS_UPDATE
    749
    750	01A9			     MOVE_ALIEN_SHIP:
    751	01A9  A1 1F3Dr			 mov ax, alien_ship_pos
    752	01AC  8B F8			 mov di, ax
    753
    754	01AE  50			 push ax
    755	01AF  3D 7D00			 cmp ax, 100*320
    756	01B2  58			 pop ax
    757
    758	01B3  74 1A			 je RESET_POS
    759	01B5  E8 FF3B			 call CLEAR_SPRITE
    760
    761	01B8  FF 0E 1F3Dr		 dec alien_ship_pos
    762	01BC  48			 dec ax
    763	01BD  BE 1EB6r			 mov si, offset	alien_ship
    764	01C0  E8 FF50			 call RENDER_SPRITE
    765
    766	01C3  33 C9			 xor cx, cx
    767	01C5  BA 2710			 mov dx, 2710H
    768	01C8  B4 86			 mov ah, 86H
    769	01CA  CD 15			 int 15h
    770	01CC  EB 04 90			 jmp END_POS_UPDATE
    771
    772	01CF			     RESET_POS:
    773	01CF  E8 FFA4			 call RESET_CROSS_SHIP_POS
    774
    775	01D2			     END_POS_UPDATE:
    776	01D2  C3			 ret
    777	01D3			     endp
    778
    779
    780				     ; CX = ally id
    781	01D3			     KILL_ALLY proc
    782	01D3  57			 push di
    783	01D4  53			 push bx
    784	01D5  51			 push cx
    785
    786	01D6  49			 dec cx	; ally index
    787	01D7  BB 1EA5r			 mov bx, offset	allies_pos_vec
    788	01DA  D1 E1			 shl cx, 1
    789	01DC  03 D9			 add bx, cx
    790
    791	01DE  8B 3F			 mov di, [bx]
    792	01E0  E8 FF10			 call CLEAR_SPRITE
    793	01E3  C7 07 0000		 mov word ptr [bx], 0
    794
    795	01E7  59			 pop cx
    796	01E8  5B			 pop bx
    797	01E9  5F			 pop di
    798	01EA  C3			 ret
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 15
MAIN.ASM



    799	01EB			     endp
    800
    801				     ; DI = position of	object to check	collision against
    802				     ; CX = enemy id
    803	01EB			     CHECK_ALLIES_COLLISION proc
    804	01EB  55			 push bp
    805	01EC  56			 push si
    806	01ED  53			 push bx
    807
    808	01EE  8B EC			 mov bp, sp
    809	01F0  51			 push cx ; [bp - 2]
    810
    811	01F1  B9 0001			 mov cx, 1
    812	01F4  BB 1EA5r			 mov bx, offset	allies_pos_vec
    813	01F7			     CHECK_SINGLE_COLLISION:
    814	01F7  51			 push cx ; [bp - 4]
    815
    816	01F8  8B 37			 mov si, [bx]
    817	01FA  E8 00DF			 call CHECK_COLLISION
    818	01FD  80 F9 01			 cmp cl, 1
    819	0200  75 0C			 jne SKIP_ALLY
    820
    821	0202  8B 4E FC			 mov cx, [bp - 4]
    822	0205  E8 FFCB			 call KILL_ALLY
    823
    824	0208  8B 4E FE			 mov cx, [bp - 2]
    825	020B  E8 01B9			 call RESET_ENEMY
    826
    827	020E			     SKIP_ALLY:
    828	020E  59			 pop cx
    829	020F  83 C3 02			 add bx, 2
    830	0212  41			 inc cx
    831	0213  83 F9 09			 cmp cx, 9
    832	0216  75 DF			 jne CHECK_SINGLE_COLLISION
    833
    834	0218  59			 pop cx
    835	0219  8B E5			 mov sp, bp
    836	021B  5B			 pop bx
    837	021C  5E			 pop si
    838	021D  5D			 pop bp
    839	021E  C3			 ret
    840	021F			     endp
    841
    842
    843	021F			     RENDER_ALLY_SHIPS proc
    844	021F  56			 push si
    845	0220  57			 push di
    846	0221  52			 push dx
    847	0222  51			 push cx
    848	0223  53			 push bx
    849	0224  50			 push ax
    850
    851	0225  B9 0008			 mov cx, 8
    852	0228  BF 1EA5r			 mov di, offset	allies_pos_vec
    853
    854	022B			     RENDER_SINGLE:
    855	022B  8B 05			 mov ax, [di]
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 16
MAIN.ASM



    856	022D  3D 0000			 cmp ax, 0
    857	0230  74 0E			 je AFTER_CLEAR
    858
    859	0232  BE 1E1Ar			 mov si, offset	ship
    860
    861					 ; get color based on iteration
    862	0235  8A D9			 mov bl, cl
    863	0237  80 C3 06			 add bl, 6
    864
    865	023A  E8 FE9F			 call CHANGE_SPRITE_COLOR
    866	023D  E8 FED3			 call RENDER_SPRITE
    867
    868	0240			     AFTER_CLEAR:
    869	0240  83 C7 02			 add di, 2
    870	0243  E2 E6			 loop RENDER_SINGLE
    871
    872	0245  58			 pop ax
    873	0246  5B			 pop bx
    874	0247  59			 pop cx
    875	0248  5A			 pop dx
    876	0249  5F			 pop di
    877	024A  5E			 pop si
    878	024B  C3			 ret
    879	024C			     endp
    880
    881	024C			     CLEAR_SCREEN proc
    882	024C  50			 push ax
    883	024D  51			 push cx
    884	024E  06			 push es
    885	024F  57			 push di
    886
    887	0250  B8 A000			 mov ax,0A000h
    888	0253  8E C0			 mov es,ax
    889	0255  33 FF			 xor di, di
    890	0257  B9 7D00			 mov cx, 32000d
    891	025A  FC			 cld
    892	025B  33 C0			 xor ax, ax
    893	025D  F3> AB			 rep stosw
    894
    895	025F  5F			 pop di
    896	0260  07			 pop es
    897	0261  59			 pop cx
    898	0262  58			 pop ax
    899	0263  C3			 ret
    900	0264			     endp
    901
    902	0264			     SHOW_YOU_WIN proc
    903	0264  E8 FFE5			 call CLEAR_SCREEN
    904
    905	0267  BD 03D0r			 mov bp, offset	you_win
    906	026A  B9 00A0			 mov cx, you_win_len
    907	026D  B3 0A			 mov bl, 0AH
    908	026F  32 D2			 xor dl, dl
    909	0271  B6 07			 mov dh, 7
    910	0273  E8 FE51			 call PRINT_STRING
    911
    912	0276  B3 0F			 mov bl, 0FH ; color = white
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 17
MAIN.ASM



    913
    914	0278  BD 0115r			 mov bp, offset	score_str
    915	027B  B9 0006			 mov cx, score_str_len
    916	027E  B2 0C			 mov dl, 12
    917	0280  B6 0D			 mov dh, 13
    918	0282  E8 FE42			 call PRINT_STRING
    919
    920	0285  BD 0008r			 mov bp, offset	score_buffer
    921	0288  B9 0005			 mov cx, score_buffer_len
    922	028B  B2 14			 mov dl, 20
    923	028D  B6 0D			 mov dh, 13
    924	028F  E8 FE35			 call PRINT_STRING
    925
    926	0292  33 C0			 xor ax, ax
    927	0294  CD 16			 int 16h
    928	0296  E8 054B			 call MAIN
    929
    930	0299  C3			 ret
    931	029A			     endp
    932
    933				     ; This proc uses LCG to generate a	random number.
    934				     ; returns in AX a random 16 bit unsigned integer
    935	029A			     RANDOM_UINT16 proc
    936	029A  52			 push dx
    937
    938	029B  B8 9A75			 mov ax, 39541
    939	029E  F7 26 001Er		 mul seed
    940	02A2  05 3F83			 add ax, 16259
    941	02A5  A3 001Er			 mov seed, ax
    942
    943	02A8  5A			 pop dx
    944	02A9  C3			 ret
    945	02AA			     endp
    946
    947				     ; AH = range upper	boundary (max 255)
    948				     ; return random 8 bit unsigned interger to	AL, between 0 and 254
    949	02AA			     RANDOM_UINT8_RANGE	proc
    950	02AA  53			 push bx
    951	02AB  51			 push cx
    952	02AC  52			 push dx
    953	02AD  50			 push ax
    954
    955	02AE  33 C9			 xor cx, cx
    956	02B0  8A CC			 mov cl, ah
    957
    958	02B2  E8 FFE5			 call RANDOM_UINT16
    959
    960	02B5  33 D2			 xor dx, dx
    961	02B7  8B D9			 mov bx, cx
    962	02B9  F7 F3			 div bx
    963
    964	02BB  58			 pop ax
    965
    966	02BC  8A C2			 mov al, dl
    967
    968	02BE  5A			 pop dx
    969	02BF  59			 pop cx
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 18
MAIN.ASM



    970	02C0  5B			 pop bx
    971	02C1  C3			 ret
    972	02C2			     endp
    973
    974	02C2			     SHOW_GAME_OVER proc
    975	02C2  E8 FF87			 call CLEAR_SCREEN
    976
    977	02C5  BD 02E9r			 mov bp, offset	game_over
    978	02C8  B9 00E7			 mov cx, game_over_len
    979	02CB  B3 0C			 mov bl, 0CH
    980	02CD  32 D2			 xor dl, dl ; coluna
    981	02CF  B6 08			 mov dh, 8 ; linha
    982	02D1  E8 FDF3			 call PRINT_STRING
    983
    984	02D4  33 C0			 xor ax, ax
    985	02D6  CD 16			 int 16h
    986	02D8  E8 0509			 call MAIN
    987	02DB  C3			 ret
    988	02DC			     endp
    989
    990				     ; SI = first position
    991				     ; DI = second position
    992				     ; return CL = 1 if	positions collide
    993	02DC			     CHECK_COLLISION proc
    994	02DC  55			 push bp
    995	02DD  50			 push ax
    996	02DE  53			 push bx
    997	02DF  52			 push dx
    998
    999	02E0  8B EC			 mov bp, sp
   1000
   1001	02E2  33 D2			 xor dx, dx
   1002	02E4  32 C9			 xor cl, cl
   1003	02E6  BB 0140			 mov bx, 320
   1004
   1005	02E9  8B C6			 mov ax, si
   1006	02EB  33 D2			 xor dx, dx
   1007	02ED  F7 F3			 div bx
   1008
   1009	02EF  52			 push dx ; value of X1 - [bp-2]
   1010	02F0  50			 push ax ; value of Y1 - [bp-4]
   1011
   1012	02F1  8B C7			 mov ax, di
   1013	02F3  33 D2			 xor dx, dx
   1014	02F5  F7 F3			 div bx
   1015
   1016	02F7  52			 push dx ; value of X2 - [bp-6]
   1017
   1018	02F8			     CHECK_Y_IN_RANGE:
   1019	02F8  05 0009			 add ax, 9
   1020	02FB  73 03			 jnc SKIP_Y_MAX
   1021	02FD  B8 FFFF			 mov ax, 0FFFFH
   1022
   1023	0300			     SKIP_Y_MAX:
   1024	0300  8B 56 FC			 mov dx, [bp - 4]
   1025	0303  3B D0			 cmp dx, ax
   1026	0305  77 2A			 ja END_COLLISION
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 19
MAIN.ASM



   1027
   1028	0307  2D 0012			 sub ax, 18
   1029	030A  73 02			 jnc SKIP_Y_MIN
   1030	030C  33 C0			 xor ax, ax
   1031
   1032	030E			     SKIP_Y_MIN:
   1033	030E  3B D0			 cmp dx, ax
   1034	0310  72 1F			 jb END_COLLISION
   1035
   1036	0312			     CHECK_X_IN_RANGE:
   1037	0312  8B 46 FE			 mov ax, [bp - 2]
   1038	0315  05 000F			 add ax, 15
   1039	0318  73 03			 jnc SKIP_X_MAX
   1040	031A  B8 FFFF			 mov ax, 0FFFFH
   1041
   1042	031D			     SKIP_X_MAX:
   1043	031D  8B 56 FA			 mov dx, [bp - 6]
   1044	0320  3B D0			 cmp dx, ax
   1045	0322  77 0D			 ja END_COLLISION
   1046
   1047	0324  2D 001E			 sub ax, 30
   1048	0327  73 02			 jnc SKIP_X_MIN
   1049	0329  33 C0			 xor ax, ax
   1050
   1051	032B			     SKIP_X_MIN:
   1052	032B  3B D0			 cmp dx, ax
   1053	032D  72 02			 jb END_COLLISION
   1054
   1055	032F  B1 01			 mov cl, 1
   1056
   1057	0331			     END_COLLISION:
   1058
   1059	0331  8B E5			 mov sp, bp
   1060
   1061	0333  5A			 pop dx
   1062	0334  5B			 pop bx
   1063	0335  58			 pop ax
   1064	0336  5D			 pop bp
   1065	0337  C3			 ret
   1066	0338			     endp
   1067
   1068	0338			     RENDER_SECTOR proc
   1069	0338  50			 push ax
   1070	0339  53			 push bx
   1071	033A  51			 push cx
   1072	033B  52			 push dx
   1073	033C  55			 push bp
   1074
   1075	033D  E8 FF0C			 call CLEAR_SCREEN
   1076
   1077					 ; Print Sector
   1078	0340  33 C0			 xor ax, ax
   1079	0342  A0 0002r			 mov al, sector
   1080
   1081	0345  3C 04			 cmp al, 4
   1082	0347  75 03			 jne SUM_POINTS
   1083	0349  E8 FF18			 call SHOW_YOU_WIN
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 20
MAIN.ASM



   1084
   1085	034C			     SUM_POINTS:
   1086	034C  FE C8			 dec al	; number vector	index
   1087
   1088	034E  BB 03E8			 mov bx, 1000
   1089	0351  F7 E3			 mul bx
   1090	0353  33 DB			 xor bx, bx
   1091	0355  8A 1E 1EB5r		 mov bl, allies_count
   1092	0359  F7 E3			 mul bx
   1093	035B  01 06 0005r		 add score, ax
   1094
   1095	035F  33 C0			 xor ax, ax
   1096	0361  A0 0002r			 mov al, sector
   1097	0364  FE C8			 dec al	; number vector	index
   1098	0366  D0 E0			 shl al, 1 ; multiply by 2 (since num_vec values are dw)
   1099	0368  BB 0470r			 mov bx, offset	sector_vec ; get the vector
   1100	036B  03 D8			 add bx, ax ; add the index to the vector ptr
   1101	036D  8B 2F			 mov bp, [bx] ;	set BP to base address of number
   1102	036F  B9 0098			 mov cx, sector_len
   1103	0372  32 D2			 xor dl, dl; line
   1104	0374  B6 0A			 mov dh, 10
   1105
   1106	0376  B4 06			 mov ah, 6 ; random value from 0 to 5
   1107	0378  E8 FF2F			 call RANDOM_UINT8_RANGE
   1108	037B  8A D8			 mov bl, al
   1109	037D  80 C3 09			 add bl, 9H
   1110	0380  E8 FD44			 call PRINT_STRING
   1111
   1112					 ; Wait	4s
   1113	0383  B9 003D			 mov cx, 3DH
   1114	0386  BA 0900			 mov dx, 900H
   1115	0389  B4 86			 mov ah, 86H
   1116	038B  CD 15			 int 15h
   1117
   1118	038D  E8 FEBC			 call CLEAR_SCREEN
   1119
   1120	0390  5D			 pop bp
   1121	0391  5A			 pop dx
   1122	0392  59			 pop cx
   1123	0393  5B			 pop bx
   1124	0394  58			 pop ax
   1125	0395  C3			 ret
   1126	0396			     endp
   1127
   1128	0396			     RESET_ALLIES proc
   1129	0396  56			 push si
   1130	0397  50			 push ax
   1131	0398  53			 push bx
   1132	0399  51			 push cx
   1133	039A  52			 push dx
   1134
   1135	039B  B9 0008			 mov cx, 8
   1136	039E  8B D9			 mov bx, cx
   1137	03A0  4B			 dec bx
   1138	03A1  D1 E3			 shl bx, 1
   1139
   1140	03A3  BE 1EA5r			 mov si, offset	allies_pos_vec
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 21
MAIN.ASM



   1141	03A6  03 F3			 add si, bx
   1142	03A8			     LOOP_RESET_ALLY:
   1143
   1144	03A8  33 D2			 xor dx, dx
   1145	03AA  B8 0014			 mov ax, 20
   1146	03AD  F7 E1			 mul cx
   1147	03AF  33 D2			 xor dx, dx
   1148
   1149	03B1  BB 0140			 mov bx, 320
   1150	03B4  F7 E3			 mul bx
   1151
   1152	03B6  89 04			 mov word ptr [si], ax
   1153
   1154	03B8  83 EE 02			 sub si, 2
   1155	03BB  E2 EB			 loop LOOP_RESET_ALLY
   1156
   1157	03BD  5A			 pop dx
   1158	03BE  59			 pop cx
   1159	03BF  5B			 pop bx
   1160	03C0  58			 pop ax
   1161	03C1  5E			 pop si
   1162	03C2			     endp
   1163
   1164	03C2			     RESET_SECTOR proc
   1165	03C2  C6 06 0002r 01		 mov sector, 1
   1166	03C7			     endp
   1167
   1168				     ; CX = enemy id
   1169	03C7			     RESET_ENEMY proc
   1170	03C7  56			 push si
   1171	03C8  57			 push di
   1172	03C9  50			 push ax
   1173	03CA  53			 push bx
   1174	03CB  51			 push cx
   1175	03CC  52			 push dx
   1176
   1177	03CD  BE 1F40r			 mov si, offset	enemies_pos
   1178	03D0  49			 dec cx
   1179	03D1  D1 E1			 shl cx, 1
   1180	03D3  03 F1			 add si, cx
   1181	03D5  8B 3C			 mov di, [si]
   1182	03D7  E8 FD19			 call CLEAR_SPRITE
   1183
   1184	03DA  33 D2			 xor dx, dx
   1185	03DC  B8 0140			 mov ax, 320
   1186
   1187	03DF  50			 push ax
   1188
   1189	03E0  B4 8C			 mov ah, 140
   1190	03E2  E8 FEC5			 call RANDOM_UINT8_RANGE
   1191	03E5  33 DB			 xor bx, bx
   1192	03E7  8A D8			 mov bl, al
   1193	03E9  80 C3 14			 add bl, 20
   1194
   1195	03EC  58			 pop ax
   1196
   1197	03ED  F7 E3			 mul bx
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 22
MAIN.ASM



   1198	03EF  05 010E			 add ax, 270
   1199	03F2  89 04			 mov [si], ax
   1200
   1201	03F4  5A			 pop dx
   1202	03F5  59			 pop cx
   1203	03F6  5B			 pop bx
   1204	03F7  58			 pop ax
   1205	03F8  5F			 pop di
   1206	03F9  5E			 pop si
   1207	03FA  C3			 ret
   1208	03FB			     endp
   1209
   1210				     ; Returns:	CX = live ally id, 0 if	none
   1211	03FB			     FIND_ALLY_ALIVE proc
   1212	03FB  56			 push si
   1213	03FC  53			 push bx
   1214
   1215	03FD  B9 0001			 mov cx, 1
   1216	0400  BE 1EA5r			 mov si, offset	allies_pos_vec
   1217
   1218	0403			     CHECK_ALIVE:
   1219	0403  83 3C 00			 cmp word ptr [si], 0
   1220	0406  75 0B			 jne FOUND_ALIVE
   1221
   1222	0408  83 C6 02			 add si, 2
   1223	040B  41			 inc cx
   1224	040C  83 F9 09			 cmp cx, 9
   1225	040F  75 F2			 jne CHECK_ALIVE
   1226
   1227	0411  33 C9			 xor cx, cx
   1228
   1229	0413			     FOUND_ALIVE:
   1230
   1231	0413  5B			 pop bx
   1232	0414  5E			 pop si
   1233	0415  C3			 ret
   1234	0416			     endp
   1235
   1236				     ; CX = enemy id
   1237	0416			     UPDATE_ENEMY proc
   1238	0416  55			 push bp
   1239	0417  56			 push si
   1240	0418  57			 push di
   1241	0419  50			 push ax
   1242	041A  53			 push bx
   1243	041B  51			 push cx
   1244
   1245	041C  8B EC			 mov bp, sp
   1246	041E  51			 push cx ; [bp - 2] = enemy ID
   1247
   1248	041F  B8 0100			 mov ax, 0100H
   1249	0422  BE 1F40r			 mov si, offset	enemies_pos
   1250	0425  49			 dec cx
   1251	0426  D1 E1			 shl cx, 1
   1252	0428  03 F1			 add si, cx
   1253
   1254	042A  56			 push si ; [bp - 4]
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 23
MAIN.ASM



   1255	042B  51			 push cx
   1256
   1257	042C  8B 3C			 mov di, [si]
   1258	042E  8B 4E FE			 mov cx, [bp - 2]
   1259	0431  E8 FDB7			 call CHECK_ALLIES_COLLISION
   1260
   1261	0434  59			 pop cx
   1262
   1263	0435  8B 3C			 mov di, [si]
   1264	0437  E8 FCB9			 call CLEAR_SPRITE
   1265	043A  BB 0001			 mov bx, 1
   1266	043D  E8 FC60			 call MOVE_SPRITE
   1267
   1268	0440  8B 4E FE			 mov cx, [bp - 2]
   1269	0443  E8 0109			 call RENDER_ENEMY
   1270
   1271	0446  33 C9			 xor cx, cx
   1272	0448  8A 0E 0011r		 mov cl, shot_count
   1273
   1274	044C			     CHECK_SHOTS_COLLISION:
   1275	044C  51			 push cx
   1276	044D  49			 dec cx
   1277	044E  BE 0018r			 mov si, offset	shot_array_shoot
   1278	0451  03 F1			 add si, cx
   1279	0453  8A 3C			 mov bh, [si]
   1280	0455  80 FF 00			 cmp bh, 0
   1281	0458  59			 pop cx
   1282	0459  74 2F			 je SKIP_SHOT
   1283
   1284	045B  51			 push cx
   1285	045C  49			 dec cx
   1286	045D  D1 E1			 shl cx, 1
   1287	045F  BE 0012r			 mov si, offset	shot_array_pos
   1288	0462  03 F1			 add si, cx
   1289	0464  8B 34			 mov si, [si]
   1290	0466  8B 5E FC			 mov bx, [bp - 4]
   1291	0469  8B 3F			 mov di, [bx]
   1292
   1293	046B  E8 FE6E			 call CHECK_COLLISION
   1294	046E  80 F9 01			 cmp cl, 1
   1295	0471  59			 pop cx
   1296
   1297	0472  75 16			 jne SKIP_SHOT
   1298	0474  C6 06 001Dr 01		 mov rerender_score, 1
   1299	0479  83 06 0005r 64		 add score, 100
   1300	047E  E8 FC72			 call CLEAR_SPRITE
   1301	0481  E8 0227			 call RESET_SHOT
   1302
   1303	0484  8B 4E FE			 mov cx, [bp - 2]
   1304	0487  E8 FF3D			 call RESET_ENEMY
   1305
   1306	048A			     SKIP_SHOT:
   1307	048A  E2 C0			 loop CHECK_SHOTS_COLLISION
   1308
   1309
   1310	048C			     CHECK_SHIP_COLLISION:
   1311	048C  8B 36 1EA1r		 mov si, ship_pos
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 24
MAIN.ASM



   1312	0490  E8 FE49			 call CHECK_COLLISION
   1313	0493  80 F9 01			 cmp cl, 1
   1314	0496  75 3D			 jne RESET_SHIP_COLLISION
   1315
   1316	0498  8A 26 1EA4r		 mov ah, is_ship_colliding
   1317	049C  80 FC 01			 cmp ah, 1
   1318	049F  74 6E			 je END_ENEMY_UPDATE
   1319
   1320	04A1  E8 FF57			 call FIND_ALLY_ALIVE
   1321	04A4  83 F9 00			 cmp cx, 0
   1322	04A7  75 03			 jne CONTINUE_COLLISION
   1323	04A9  E8 FE16			 call SHOW_GAME_OVER
   1324
   1325	04AC			     CONTINUE_COLLISION:
   1326	04AC  C6 06 1EA4r 01		 mov is_ship_colliding,	1
   1327
   1328	04B1  E8 FD1F			 call KILL_ALLY
   1329	04B4  B5 0F			 mov ch, 0FH
   1330	04B6  2A E9			 sub ch, cl
   1331	04B8  8A CD			 mov cl, ch
   1332	04BA  88 0E 1EA3r		 mov ship_color, cl
   1333
   1334	04BE  C6 06 001Cr 01		 mov rerender_allies, 1
   1335	04C3  C6 06 001Br 01		 mov rerender_ship, 1
   1336	04C8  8B 4E FE			 mov cx, [bp - 2]
   1337	04CB  E8 FEF9			 call RESET_ENEMY
   1338	04CE  FE 0E 1EB5r		 dec allies_count
   1339	04D2  EB 3B 90			 jmp END_ENEMY_UPDATE
   1340
   1341	04D5			     RESET_SHIP_COLLISION:
   1342	04D5  C6 06 1EA4r 00		 mov is_ship_colliding,	0
   1343
   1344	04DA			     CHECK_EOS:	; end of screen
   1345	04DA  33 D2			 xor dx, dx
   1346	04DC  8B C7			 mov ax, di
   1347	04DE  BB 0140			 mov bx, 320
   1348	04E1  F7 F3			 div bx
   1349	04E3  83 FA 00			 cmp dx, 0
   1350	04E6  75 27			 jne END_ENEMY_UPDATE
   1351	04E8  8B 4E FE			 mov cx, [bp - 2]
   1352	04EB  E8 FED9			 call RESET_ENEMY
   1353	04EE  C6 06 001Cr 01		 mov rerender_allies, 1
   1354	04F3  C6 06 001Dr 01		 mov rerender_score, 1
   1355	04F8  33 D2			 xor dx, dx
   1356	04FA  B8 000A			 mov ax, 10
   1357	04FD  8A 16 0002r		 mov dl, sector
   1358	0501  F7 E2			 mul dx
   1359	0503  29 06 0005r		 sub score, ax
   1360	0507  73 06			 jnc END_ENEMY_UPDATE
   1361	0509  C7 06 0005r 0000		 mov score, 0
   1362
   1363	050F			     END_ENEMY_UPDATE:
   1364
   1365	050F  8B E5			 mov sp, bp
   1366
   1367	0511  59			 pop cx
   1368	0512  5B			 pop bx
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 25
MAIN.ASM



   1369	0513  58			 pop ax
   1370	0514  5F			 pop di
   1371	0515  5E			 pop si
   1372	0516  5D			 pop bp
   1373	0517  C3			 ret
   1374	0518			     endp
   1375
   1376	0518			     RENDER_TERRAIN proc
   1377	0518  53			 push bx
   1378	0519  51			 push cx
   1379	051A  52			 push dx
   1380	051B  57			 push di
   1381	051C  06			 push es
   1382	051D  1E			 push ds
   1383	051E  50			 push ax
   1384
   1385	051F  B8 0000s			 mov ax, @data
   1386	0522  8E D8			 mov ds, ax
   1387
   1388	0524  B8 A000			 mov ax, 0A000h
   1389	0527  8E C0			 mov es, ax
   1390
   1391	0529  BE 0518r			 mov si, offset	terrain
   1392	052C  8B 3E 1E18r		 mov di, terrain_pos
   1393	0530  FF 0E 1E18r		 dec terrain_pos
   1394					 ; mov bx, terrain_pos
   1395	0534  81 3E 1E18r E0FF		 cmp terrain_pos, 320*180 - 1
   1396	053A  75 06			 jnz SKIP_POS_UPDATE
   1397	053C  C7 06 1E18r E23F		 mov terrain_pos, 320*181 - 1
   1398
   1399	0542			     SKIP_POS_UPDATE:
   1400	0542  B9 1900			 mov cx, 320*20
   1401	0545  F3> A4			 rep movsb
   1402
   1403	0547  58			 pop ax
   1404	0548  1F			 pop ds
   1405	0549  07			 pop es
   1406	054A  5F			 pop di
   1407	054B  5A			 pop dx
   1408	054C  59			 pop cx
   1409	054D  5B			 pop bx
   1410	054E  C3			 ret
   1411	054F			     endp
   1412
   1413				     ; CX = enemy id
   1414	054F			     RENDER_ENEMY proc
   1415	054F  56			 push si
   1416	0550  50			 push ax
   1417	0551  53			 push bx
   1418	0552  51			 push cx
   1419
   1420	0553  BB 1F40r			 mov bx, offset	enemies_pos
   1421	0556  49			 dec cx
   1422	0557  D1 E1			 shl cx, 1
   1423	0559  03 D9			 add bx, cx
   1424	055B  8B 07			 mov ax, [bx]
   1425	055D  BE 1EB6r			 mov si, offset	alien_ship
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 26
MAIN.ASM



   1426	0560  E8 FBB0			 call RENDER_SPRITE
   1427
   1428	0563  59			 pop cx
   1429	0564  5B			 pop bx
   1430	0565  58			 pop ax
   1431	0566  5E			 pop si
   1432	0567  C3			 ret
   1433	0568			     endp
   1434
   1435	0568			     RESET_SHIP_COLOR proc
   1436	0568  56			 push si
   1437	0569  53			 push bx
   1438
   1439	056A  BB 000F			 mov bx, 0FH
   1440	056D  88 1E 1EA3r		 mov ship_color, bl
   1441	0571  BE 1E1Ar			 mov si, offset	ship
   1442	0574  E8 FB65			 call CHANGE_SPRITE_COLOR
   1443
   1444	0577  5B			 pop bx
   1445	0578  5E			 pop si
   1446	0579  C3			 ret
   1447	057A			     endp
   1448
   1449	057A			     RESET_SHIP	proc
   1450	057A  56			 push si
   1451	057B  53			 push bx
   1452
   1453	057C  C7 06 1EA1r 76E9		 mov ship_pos, 320 * 95	+ 41 ; Ship stating position
   1454
   1455	0582  5B			 pop bx
   1456	0583  5E			 pop si
   1457	0584  C3			 ret
   1458	0585			     endp
   1459
   1460	0585			     RENDER_SHIP proc
   1461	0585  56			 push si
   1462	0586  57			 push di
   1463	0587  53			 push bx
   1464	0588  50			 push ax
   1465
   1466	0589  A1 1EA1r			 mov ax, ship_pos
   1467	058C  8B F8			 mov di, ax
   1468	058E  E8 FB62			 call CLEAR_SPRITE
   1469
   1470	0591  BE 1E1Ar			 mov si, offset	ship
   1471	0594  8A 1E 1EA3r		 mov bl, ship_color ; white
   1472	0598  E8 FB41			 call CHANGE_SPRITE_COLOR
   1473	059B  E8 FB75			 call RENDER_SPRITE
   1474
   1475	059E  58			 pop ax
   1476	059F  5B			 pop bx
   1477	05A0  5F			 pop di
   1478	05A1  5E			 pop si
   1479	05A2  C3			 ret
   1480	05A3			     endp
   1481
   1482	05A3			     UPDATE_SHIP proc
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 27
MAIN.ASM



   1483	05A3  56			 push si
   1484	05A4  57			 push di
   1485	05A5  50			 push ax
   1486	05A6  53			 push bx
   1487
   1488	05A7  B4 01			 mov ah, 1H
   1489	05A9  CD 16			 int 16H
   1490	05AB  74 0A			 jz END_SHIP_UPDATE
   1491
   1492	05AD  E8 FA77			 call HANDLE_CONTROLS
   1493	05B0  32 E4			 xor ah, ah
   1494	05B2  CD 16			 int 16H
   1495
   1496	05B4  E8 FFCE			 call RENDER_SHIP
   1497
   1498	05B7			     END_SHIP_UPDATE:
   1499
   1500	05B7  5B			 pop bx
   1501	05B8  58			 pop ax
   1502	05B9  5F			 pop di
   1503	05BA  5E			 pop si
   1504	05BB  C3			 ret
   1505	05BC			     endp
   1506
   1507				     ; AX = uint16 value to output
   1508				     ; SI = offset of end off string buffer
   1509				     ; CX = number of digits to	write
   1510	05BC			     CONVERT_UINT16 proc
   1511	05BC  56			 push si
   1512	05BD  50			 push ax
   1513	05BE  53			 push bx
   1514	05BF  51			 push cx
   1515	05C0  52			 push dx
   1516
   1517	05C1  BB 000A			 mov bx, 10
   1518
   1519	05C4			     LOOP_DIV:
   1520	05C4  33 D2			 xor dx, dx
   1521	05C6  F7 F3			 div bx
   1522
   1523	05C8  80 C2 30			 add dl, '0'
   1524	05CB  88 14			 mov byte ptr ds:[si], dl
   1525	05CD  4E			 dec si
   1526
   1527	05CE  3D 0000			 cmp ax, 0
   1528	05D1  49			 dec cx
   1529	05D2  75 F0			 jnz LOOP_DIV
   1530
   1531	05D4  83 F9 00			 cmp cx, 0
   1532	05D7  74 04			 je END_CONVERSION
   1533
   1534	05D9  B2 30			 mov dl, '0'
   1535	05DB  88 14			 mov byte ptr ds:[si], dl
   1536
   1537	05DD			     END_CONVERSION:
   1538	05DD  5A			 pop dx
   1539	05DE  59			 pop cx
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 28
MAIN.ASM



   1540	05DF  5B			 pop bx
   1541	05E0  58			 pop ax
   1542	05E1  5E			 pop si
   1543	05E2  C3			 ret
   1544	05E3			     endp
   1545
   1546	05E3			     RENDER_SCORE proc
   1547	05E3  56			 push si
   1548	05E4  55			 push bp
   1549	05E5  50			 push ax
   1550	05E6  53			 push bx
   1551	05E7  51			 push cx
   1552	05E8  52			 push dx
   1553
   1554	05E9  BD 0115r			 mov bp, offset	score_str
   1555	05EC  B9 0006			 mov cx, score_str_len
   1556	05EF  B3 0F			 mov bl, 0FH ; white
   1557	05F1  33 D2			 xor dx, dx
   1558	05F3  E8 FAD1			 call PRINT_STRING
   1559
   1560	05F6  A1 0005r			 mov ax, score
   1561	05F9  BE 0008r			 mov si, offset	score_buffer
   1562	05FC  83 C6 04			 add si, score_buffer_len - 1
   1563	05FF  B9 0005			 mov cx, score_buffer_len
   1564	0602  E8 FFB7			 call CONVERT_UINT16
   1565
   1566	0605  BD 0008r			 mov bp, offset	score_buffer
   1567	0608  B3 02			 mov bl, 02H ; green
   1568	060A  32 F6			 xor dh, dh
   1569	060C  B2 08			 mov dl, 8
   1570	060E  E8 FAB6			 call PRINT_STRING
   1571
   1572	0611  5A			 pop dx
   1573	0612  59			 pop cx
   1574	0613  5B			 pop bx
   1575	0614  58			 pop ax
   1576	0615  5D			 pop bp
   1577	0616  5E			 pop si
   1578
   1579	0617  C3			 ret
   1580	0618			     endp
   1581
   1582	0618			     RENDER_TIME proc
   1583	0618  55			 push bp
   1584	0619  53			 push bx
   1585	061A  51			 push cx
   1586	061B  52			 push dx
   1587
   1588	061C  BD 011Br			 mov bp, offset	time_str
   1589	061F  B9 0006			 mov cx, time_str_len
   1590	0622  B3 0F			 mov bl, 0FH ; white
   1591	0624  32 F6			 xor dh, dh
   1592	0626  B2 19			 mov dl, 25
   1593	0628  E8 FA9C			 call PRINT_STRING
   1594
   1595	062B  33 C0			 xor ax, ax
   1596	062D  A0 0004r			 mov al, time
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 29
MAIN.ASM



   1597	0630  BE 000Dr			 mov si, offset	time_buffer
   1598	0633  83 C6 01			 add si, time_buffer_len - 1
   1599	0636  B9 0002			 mov cx, 2
   1600	0639  E8 FF80			 call CONVERT_UINT16
   1601
   1602	063C  BD 000Dr			 mov bp, offset	time_buffer
   1603	063F  B9 0002			 mov cx, time_buffer_len
   1604	0642  B3 02			 mov bl, 02H ; green
   1605	0644  32 F6			 xor dh, dh
   1606	0646  B2 20			 mov dl, 32
   1607	0648  E8 FA7C			 call PRINT_STRING
   1608
   1609	064B  5A			 pop dx
   1610	064C  59			 pop cx
   1611	064D  5B			 pop bx
   1612	064E  5D			 pop bp
   1613
   1614	064F  C3			 ret
   1615	0650			     endp
   1616
   1617	0650			     UPDATE_TIME proc
   1618	0650  50			 push ax
   1619
   1620	0651  8A 26 0003r		 mov ah, timeout
   1621	0655  FE C4			 inc ah
   1622	0657  80 FC 64			 cmp ah, 100
   1623	065A  75 21			 jne SAVE_TIMEOUT
   1624
   1625	065C  8A 26 0004r		 mov ah, time
   1626	0660  FE CC			 dec ah
   1627	0662  75 13			 jnz SAVE_TIME
   1628
   1629	0664  8A 26 0002r		 mov ah, sector
   1630	0668  FE C4			 inc ah
   1631	066A  88 26 0002r		 mov sector, ah
   1632
   1633	066E  E8 FCC7			 call RENDER_SECTOR
   1634	0671  E8 00E0			 call RESET
   1635
   1636	0674  EB 0B 90			 jmp END_TIME
   1637
   1638	0677			     SAVE_TIME:
   1639	0677  88 26 0004r		 mov time, ah
   1640	067B  32 E4			 xor ah, ah
   1641
   1642	067D			     SAVE_TIMEOUT:
   1643	067D  88 26 0003r		 mov timeout, ah
   1644
   1645	0681			     END_TIME:
   1646	0681  58			 pop ax
   1647	0682  C3			 ret
   1648	0683			     endp
   1649
   1650	0683			     SHOOT proc
   1651	0683  56			 push si
   1652	0684  53			 push bx
   1653	0685  51			 push cx
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 30
MAIN.ASM



   1654
   1655					 ; Find	a shot that was	not fired yet
   1656	0686  33 C9			 xor cx, cx
   1657	0688  8A 0E 0011r		 mov cl, shot_count
   1658	068C  BE 0018r			 mov si, offset	shot_array_shoot
   1659	068F  03 F1			 add si, cx
   1660	0691  4E			 dec si
   1661
   1662	0692			     FIND_SHOT:
   1663	0692  8A 1C			 mov bl, [si]
   1664	0694  80 FB 00			 cmp bl, 0
   1665	0697  74 08			 je FOUND_SHOT
   1666	0699  4E			 dec si
   1667	069A  E2 F6			 loop FIND_SHOT
   1668
   1669	069C  83 F9 00			 cmp cx, 0
   1670	069F  74 06			 je END_SHOOT
   1671
   1672	06A1			     FOUND_SHOT:
   1673	06A1  E8 0007			 call RESET_SHOT
   1674	06A4  C6 04 01			 mov byte ptr [si], 1 ;	Set shot as fired
   1675
   1676	06A7			     END_SHOOT:
   1677	06A7  59			 pop cx
   1678	06A8  5B			 pop bx
   1679	06A9  5E			 pop si
   1680	06AA  C3			 ret
   1681	06AB			     endp
   1682
   1683				     ; CX = shot id
   1684	06AB			     RESET_SHOT	proc
   1685	06AB  51			 push cx
   1686	06AC  56			 push si
   1687	06AD  57			 push di
   1688	06AE  53			 push bx
   1689
   1690	06AF  49			 dec cx	; Get shot index
   1691	06B0  51			 push cx
   1692	06B1  D1 E1			 shl cx, 1 ; Multiply index by 2 (for word)
   1693	06B3  BE 0012r			 mov si, offset	shot_array_pos ; Get shot position array
   1694	06B6  03 F1			 add si, cx ; Find shot	in array
   1695
   1696	06B8  8B 3C			 mov di, [si] ;	Set DI to shot position
   1697	06BA  E8 FA36			 call CLEAR_SPRITE ; Clear shot
   1698
   1699	06BD  8B 1E 1EA1r		 mov bx, ship_pos
   1700	06C1  83 C3 0F			 add bx, 15
   1701	06C4  89 1C			 mov [si], bx
   1702
   1703	06C6  BE 0018r			 mov si, offset	shot_array_shoot ; Get shot fired array
   1704	06C9  59			 pop cx
   1705	06CA  03 F1			 add si, cx ; Find shot	in array
   1706	06CC  C6 04 00			 mov byte ptr [si], 0 ;	Set shot as not	fired
   1707
   1708	06CF  5B			 pop bx
   1709	06D0  5F			 pop di
   1710	06D1  5E			 pop si
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 31
MAIN.ASM



   1711	06D2  59			 pop cx
   1712	06D3  C3			 ret
   1713	06D4			     endp
   1714
   1715	06D4			     UPDATE_SHOT proc
   1716	06D4  57			 push di
   1717	06D5  56			 push si
   1718	06D6  50			 push ax
   1719	06D7  53			 push bx
   1720	06D8  51			 push cx
   1721	06D9  52			 push dx
   1722
   1723	06DA  33 C9			 xor cx, cx
   1724	06DC  8A 0E 0011r		 mov cl, shot_count
   1725	06E0			     SINGLE_SHOT:
   1726	06E0  8B EC			 mov bp, sp
   1727	06E2  51			 push cx ; [bp - 2]
   1728
   1729					 ; Find	shot index
   1730	06E3  49			 dec cx
   1731	06E4  BE 0018r			 mov si, offset	shot_array_shoot
   1732	06E7  03 F1			 add si, cx
   1733	06E9  80 3C 01			 cmp byte ptr [si], 1
   1734	06EC  75 36			 jne NO_UPDATE
   1735
   1736					 ; Clear shot
   1737	06EE  D1 E1			 shl cx, 1 ; Multiply index by 2 (for word array)
   1738	06F0  BE 0012r			 mov si, offset	shot_array_pos
   1739	06F3  03 F1			 add si, cx
   1740	06F5  8B 3C			 mov di, [si]
   1741	06F7  E8 F9F9			 call CLEAR_SPRITE
   1742
   1743					 ; Reset shot
   1744	06FA  33 D2			 xor dx, dx
   1745	06FC  8B C7			 mov ax, di
   1746	06FE  05 000F			 add ax, 15
   1747	0701  BB 0140			 mov bx, 320
   1748	0704  F7 F3			 div bx
   1749	0706  83 FA 00			 cmp dx, 0
   1750	0709  75 09			 jne MOVE_SHOT
   1751	070B  8B 4E FE			 mov cx, [bp - 2]
   1752	070E  E8 FF9A			 call RESET_SHOT
   1753	0711  EB 11 90			 jmp NO_UPDATE
   1754
   1755	0714			     MOVE_SHOT:
   1756					 ; Move	shot
   1757	0714  33 C0			 xor ax, ax
   1758	0716  BB 0003			 mov bx, 3
   1759	0719  E8 F984			 call MOVE_SPRITE
   1760
   1761					 ; Render shot
   1762	071C  8B 04			 mov ax, [si]
   1763	071E  BE 1F68r			 mov si, offset	shot
   1764	0721  E8 F9EF			 call RENDER_SPRITE
   1765
   1766	0724			     NO_UPDATE:
   1767	0724  59			 pop cx
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 32
MAIN.ASM



   1768	0725  E2 B9			 loop SINGLE_SHOT
   1769
   1770	0727  8B E5			 mov sp, bp
   1771
   1772	0729  5A			 pop dx
   1773	072A  59			 pop cx
   1774	072B  5B			 pop bx
   1775	072C  58			 pop ax
   1776	072D  5E			 pop si
   1777	072E  5F			 pop di
   1778	072F  C3			 ret
   1779	0730			     endp
   1780
   1781	0730			     RESET_TIME	proc
   1782	0730  50			 push ax
   1783
   1784	0731  32 E4			 xor ah, ah
   1785	0733  88 26 0003r		 mov timeout, ah
   1786	0737  8A 26 0007r		 mov ah, sector_time
   1787	073B  88 26 0004r		 mov time, ah
   1788
   1789	073F  58			 pop ax
   1790	0740			     endp
   1791
   1792	0740			     RESET_RERENDERS proc
   1793	0740  50			 push ax
   1794
   1795	0741  B4 01			 mov ah, 1
   1796	0743  C6 06 001Br 01		 mov rerender_ship, 1
   1797	0748  C6 06 001Cr 01		 mov rerender_allies, 1
   1798	074D  C6 06 001Dr 01		 mov rerender_score, 1
   1799
   1800	0752  58			 pop ax
   1801	0753  C3			 ret
   1802	0754			     endp
   1803
   1804	0754			     RESET proc	; Contains all procedures for reseting values
   1805	0754  E8 FE23			 call RESET_SHIP
   1806
   1807	0757  51			 push cx
   1808	0758  33 C9			 xor cx, cx
   1809	075A  8A 0E 1F3Fr		 mov cl, enemies_count
   1810	075E			     ENEMIES_RESET:
   1811	075E  E8 FC66			 call RESET_ENEMY
   1812	0761  E2 FB			 loop ENEMIES_RESET
   1813	0763  59			 pop cx
   1814
   1815	0764  E8 FFC9			 call RESET_TIME
   1816	0767  E8 FFD6			 call RESET_RERENDERS
   1817	076A  C3			 ret
   1818	076B			     endp
   1819
   1820	076B			     UPDATE proc ; Contains all	procedures for updating	game state
   1821	076B  E8 FE35			 call UPDATE_SHIP
   1822	076E  E8 FEDF			 call UPDATE_TIME
   1823	0771  E8 FF60			 call UPDATE_SHOT
   1824	0774  51			 push cx
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 33
MAIN.ASM



   1825	0775  33 C9			 xor cx, cx
   1826	0777  8A 0E 1F3Fr		 mov cl, enemies_count
   1827	077B			     ENEMIES_UPDATE:
   1828	077B  E8 FC98			 call UPDATE_ENEMY
   1829	077E  E2 FB			 loop ENEMIES_UPDATE
   1830	0780  59			 pop cx
   1831
   1832	0781  C3			 ret
   1833	0782			     endp
   1834
   1835	0782			     RENDER proc ; Contains all	procedures for rendering game objects
   1836	0782  50			 push ax
   1837	0783  E8 FE92			 call RENDER_TIME
   1838	0786  E8 FD8F			 call RENDER_TERRAIN
   1839
   1840					 ; should re-render ship?
   1841	0789  A0 001Br			 mov al, rerender_ship
   1842	078C  3C 00			 cmp al, 0
   1843	078E  74 08			 je SKIP_2_ALLIES
   1844	0790  E8 FDF2			 call RENDER_SHIP
   1845	0793  C6 06 001Br 00		 mov rerender_ship, 0
   1846
   1847	0798			     SKIP_2_ALLIES:
   1848					 ; should re-render allies?
   1849	0798  A0 001Cr			 mov al, rerender_allies
   1850	079B  3C 01			 cmp al, 1
   1851	079D  75 08			 jne SKIP_2_SCORE
   1852	079F  E8 FA7D			 call RENDER_ALLY_SHIPS
   1853	07A2  C6 06 001Cr 00		 mov rerender_allies, 0
   1854
   1855	07A7			     SKIP_2_SCORE:
   1856					 ; should re-render score?
   1857	07A7  A0 001Dr			 mov al, rerender_score
   1858	07AA  3C 01			 cmp al, 1
   1859	07AC  75 08			 jne END_RENDER
   1860	07AE  E8 FE32			 call RENDER_SCORE
   1861	07B1  C6 06 001Dr 00		 mov rerender_score, 0
   1862
   1863	07B6			     END_RENDER:
   1864	07B6  58			 pop ax
   1865	07B7  C3			 ret
   1866	07B8			     endp
   1867
   1868	07B8			     END_GAME proc
   1869					 ; Back	to text	mode
   1870	07B8  32 E4			 xor ah, ah
   1871	07BA  B0 03			 mov al, 3h
   1872	07BC  CD 10			 int 10h
   1873
   1874					 ; Ends	program
   1875	07BE  B4 4C			 mov ah, 4ch
   1876	07C0  32 C0			 xor al, al
   1877	07C2  CD 21			 int 21h
   1878	07C4  C3			 ret
   1879	07C5			     endp
   1880
   1881	07C5			     THROTTLE proc
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 34
MAIN.ASM



   1882	07C5  50			 push ax
   1883	07C6  51			 push cx
   1884	07C7  52			 push dx
   1885
   1886	07C8  33 C9			 xor cx, cx
   1887	07CA  BA 2710			 mov dx, 2710H
   1888	07CD  B4 86			 mov ah, 86H
   1889	07CF  CD 15			 int 15h
   1890
   1891	07D1  5A			 pop dx
   1892	07D2  59			 pop cx
   1893	07D3  58			 pop ax
   1894	07D4  C3			 ret
   1895	07D5			     endp
   1896
   1897	07D5			     SYSTIME_SEED proc
   1898	07D5  50			 push ax
   1899	07D6  51			 push cx
   1900	07D7  52			 push dx
   1901
   1902	07D8  33 C0			 xor ax, ax
   1903	07DA  CD 1A			 int 1AH
   1904	07DC  89 16 001Er		 mov seed, dx
   1905
   1906	07E0  5A			 pop dx
   1907	07E1  59			 pop cx
   1908	07E2  58			 pop ax
   1909	07E3  C3			 ret
   1910	07E4			     endp
   1911
   1912	07E4			     MAIN proc
   1913	07E4  B8 0000s			 mov AX, @data
   1914	07E7  8E D8			 mov DS, AX
   1915	07E9  B8 A000			 mov AX, 0A000H
   1916	07EC  8E C0			 mov ES, AX
   1917	07EE  33 FF			 xor DI, DI
   1918
   1919	07F0  E8 FFE2			 call SYSTIME_SEED
   1920
   1921					 ; Define o modo de video
   1922	07F3  32 E4			 xor ah, ah
   1923	07F5  32 FF			 xor bh, bh
   1924	07F7  B0 13			 mov al, 13h
   1925	07F9  CD 10			 int 10h
   1926
   1927					 ; Exibe título e botões do menu
   1928	07FB  E8 F890			 call PRINT_TITLE_MENU
   1929	07FE  E8 F93E			 call PRINT_BUTTONS
   1930	0801  E8 F972			 call RESET_CROSS_SHIP_POS
   1931	0804  E8 FB8F			 call RESET_ALLIES
   1932	0807  E8 FD5E			 call RESET_SHIP_COLOR
   1933					 ; call	RESET_SHIP
   1934	080A  E8 FBB5			 call RESET_SECTOR
   1935
   1936	080D			     MENU_LOOP:
   1937	080D  E8 F975			 call CROSS_SHIPS
   1938
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 35
MAIN.ASM



   1939					 ; Recebe entrada do usuário
   1940	0810  B4 01			 mov ah, 1H
   1941	0812  CD 16			 int 16H
   1942	0814  74 F7			 jz MENU_LOOP
   1943
   1944					 ; Chama a função de navegação
   1945	0816  E8 F7E7			 call HANDLE_INPUT
   1946
   1947					 ; Condição para iniciar o jogo
   1948	0819  80 FC 1C			 cmp ah, 1CH
   1949	081C  74 06			 je SELECT_OPTION
   1950
   1951					 ; Retorno ao loop do menu
   1952	081E  32 E4			 xor ah, ah
   1953	0820  CD 16			 int 16H
   1954	0822  EB E9			 jmp MENU_LOOP
   1955
   1956	0824			     SELECT_OPTION:
   1957	0824  32 E4			 xor ah, ah
   1958	0826  CD 16			 int 16H
   1959
   1960	0828  8A 26 0000r		 mov ah, menu
   1961	082C  80 FC 01			 cmp ah, 1
   1962	082F  74 11			 je FINISH
   1963
   1964	0831  E8 FB04			 call RENDER_SECTOR
   1965
   1966	0834  E8 FF1D			 call RESET
   1967
   1968	0837			     GAME_LOOP:
   1969	0837  E8 FF8B			 call THROTTLE
   1970	083A  E8 FF2E			 call UPDATE
   1971	083D  E8 FF42			 call RENDER
   1972
   1973	0840  EB F5			 jmp GAME_LOOP
   1974
   1975	0842			     FINISH:
   1976	0842  E8 FF73			 CALL END_GAME
   1977
   1978	0845  C3			 ret
   1979	0846			     endp
   1980
   1981				     end MAIN
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 36
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/12/24"
??FILENAME			  Text	 "MAIN	  "
??TIME				  Text	 "17:40:35"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
AFTER_CLEAR			  Near	 _TEXT:0240
ALIEN_SHIP			  Byte	 DGROUP:1EB6
ALIEN_SHIP_POS			  Word	 DGROUP:1F3D
ALLIES_COUNT			  Byte	 DGROUP:1EB5
ALLIES_POS_VEC			  Word	 DGROUP:1EA5
ARROW_DOWN			  Near	 _TEXT:0016
ARROW_UP			  Near	 _TEXT:000D
BTN_INICIAR			  Byte	 DGROUP:0476
BTN_INICIAR_LENGTH		  Number 0051
BTN_SAIR			  Byte	 DGROUP:04C7
BTN_SAIR_LENGTH			  Number 0051
CHANGE_SPRITE_COLOR		  Near	 _TEXT:00DC
CHECK_ALIVE			  Near	 _TEXT:0403
CHECK_ALLIES_COLLISION		  Near	 _TEXT:01EB
CHECK_COLLISION			  Near	 _TEXT:02DC
CHECK_DIRECTION			  Near	 _TEXT:00B5
CHECK_EOS			  Near	 _TEXT:04DA
CHECK_SHIP_COLLISION		  Near	 _TEXT:048C
CHECK_SHOTS_COLLISION		  Near	 _TEXT:044C
CHECK_SINGLE_COLLISION		  Near	 _TEXT:01F7
CHECK_X_IN_RANGE		  Near	 _TEXT:0312
CHECK_Y_IN_RANGE		  Near	 _TEXT:02F8
CLEAR_LINE			  Near	 _TEXT:00FF
CLEAR_SCREEN			  Near	 _TEXT:024C
CLEAR_SPRITE			  Near	 _TEXT:00F3
CONTINUE_COLLISION		  Near	 _TEXT:04AC
CONVERT_UINT16			  Near	 _TEXT:05BC
CROSS_SHIPS			  Near	 _TEXT:0185
DRAW_LINE			  Near	 _TEXT:012B
END_COLLISION			  Near	 _TEXT:0331
END_CONTROLS			  Near	 _TEXT:0088
END_CONVERSION			  Near	 _TEXT:05DD
END_ENEMY_UPDATE		  Near	 _TEXT:050F
END_GAME			  Near	 _TEXT:07B8
END_HANDLE			  Near	 _TEXT:0026
END_POS_UPDATE			  Near	 _TEXT:01D2
END_RENDER			  Near	 _TEXT:07B6
END_SHIP_UPDATE			  Near	 _TEXT:05B7
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 37
Symbol Table



END_SHOOT			  Near	 _TEXT:06A7
END_TIME			  Near	 _TEXT:0681
ENEMIES_COUNT			  Byte	 DGROUP:1F3F
ENEMIES_POS			  Word	 DGROUP:1F40
ENEMIES_RESET			  Near	 _TEXT:075E
ENEMIES_UPDATE			  Near	 _TEXT:077B
EXIT_BTN			  Near	 _TEXT:0167
FIND_ALLY_ALIVE			  Near	 _TEXT:03FB
FIND_SHOT			  Near	 _TEXT:0692
FINISH				  Near	 _TEXT:0842
FIRE				  Near	 _TEXT:0085
FOUND_ALIVE			  Near	 _TEXT:0413
FOUND_SHOT			  Near	 _TEXT:06A1
GAME_LOOP			  Near	 _TEXT:0837
GAME_OVER			  Byte	 DGROUP:02E9
GAME_OVER_LEN			  Number 00E7
HANDLE_CONTROLS			  Near	 _TEXT:0027
HANDLE_INPUT			  Near	 _TEXT:0000
IS_SHIP_COLLIDING		  Byte	 DGROUP:1EA4
KILL_ALLY			  Near	 _TEXT:01D3
LOOP_DIV			  Near	 _TEXT:05C4
LOOP_RESET_ALLY			  Near	 _TEXT:03A8
MAIN				  Near	 _TEXT:07E4
MENU				  Byte	 DGROUP:0000
MENU_LOOP			  Near	 _TEXT:080D
MOVE_ALIEN_SHIP			  Near	 _TEXT:01A9
MOVE_DOWN			  Near	 _TEXT:0068
MOVE_NEGATIVE			  Near	 _TEXT:00BF
MOVE_SHOT			  Near	 _TEXT:0714
MOVE_SPRITE			  Near	 _TEXT:00A0
MOVE_UP				  Near	 _TEXT:004B
MOVE_Y_AXIS			  Near	 _TEXT:00AC
NO_UPDATE			  Near	 _TEXT:0724
PIXEL_LOOP			  Near	 _TEXT:00E3
PRINT_BUTTONS			  Near	 _TEXT:013F
PRINT_STRING			  Near	 _TEXT:00C7
PRINT_TITLE_MENU		  Near	 _TEXT:008E
RANDOM_UINT16			  Near	 _TEXT:029A
RANDOM_UINT8_RANGE		  Near	 _TEXT:02AA
RENDER				  Near	 _TEXT:0782
RENDER_ALLY_SHIPS		  Near	 _TEXT:021F
RENDER_BUTTONS			  Near	 _TEXT:001C
RENDER_ENEMY			  Near	 _TEXT:054F
RENDER_SCORE			  Near	 _TEXT:05E3
RENDER_SECTOR			  Near	 _TEXT:0338
RENDER_SHIP			  Near	 _TEXT:0585
RENDER_SINGLE			  Near	 _TEXT:022B
RENDER_SPRITE			  Near	 _TEXT:0113
RENDER_TERRAIN			  Near	 _TEXT:0518
RENDER_TIME			  Near	 _TEXT:0618
RERENDER_ALLIES			  Byte	 DGROUP:001C
RERENDER_SCORE			  Byte	 DGROUP:001D
RERENDER_SHIP			  Byte	 DGROUP:001B
RESET				  Near	 _TEXT:0754
RESET_ALLIES			  Near	 _TEXT:0396
RESET_CROSS_SHIP_POS		  Near	 _TEXT:0176
RESET_ENEMY			  Near	 _TEXT:03C7
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 38
Symbol Table



RESET_POS			  Near	 _TEXT:01CF
RESET_RERENDERS			  Near	 _TEXT:0740
RESET_SECTOR			  Near	 _TEXT:03C2
RESET_SHIP			  Near	 _TEXT:057A
RESET_SHIP_COLLISION		  Near	 _TEXT:04D5
RESET_SHIP_COLOR		  Near	 _TEXT:0568
RESET_SHOT			  Near	 _TEXT:06AB
RESET_TIME			  Near	 _TEXT:0730
SAVE_POS			  Near	 _TEXT:00C1
SAVE_TIME			  Near	 _TEXT:0677
SAVE_TIMEOUT			  Near	 _TEXT:067D
SCORE				  Word	 DGROUP:0005
SCORE_BUFFER			  Byte	 DGROUP:0008
SCORE_BUFFER_LEN		  Number 0005
SCORE_STR			  Byte	 DGROUP:0115
SCORE_STR_LEN			  Number 0006
SCREEN				  Byte	 DGROUP:0001
SECTOR				  Byte	 DGROUP:0002
SECTOR_LEN			  Number 0098
SECTOR_ONE			  Byte	 DGROUP:0121
SECTOR_THREE			  Byte	 DGROUP:0251
SECTOR_TIME			  Byte	 DGROUP:0007
SECTOR_TWO			  Byte	 DGROUP:01B9
SECTOR_VEC			  Word	 DGROUP:0470
SEED				  Word	 DGROUP:001E
SELECT_OPTION			  Near	 _TEXT:0824
SHIP				  Byte	 DGROUP:1E1A
SHIP_COLOR			  Byte	 DGROUP:1EA3
SHIP_POS			  Word	 DGROUP:1EA1
SHIP_SPEED			  Word	 DGROUP:000F
SHOOT				  Near	 _TEXT:0683
SHOT				  Byte	 DGROUP:1F68
SHOT_ARRAY_POS			  Word	 DGROUP:0012
SHOT_ARRAY_SHOOT		  Byte	 DGROUP:0018
SHOT_COUNT			  Byte	 DGROUP:0011
SHOW_GAME_OVER			  Near	 _TEXT:02C2
SHOW_YOU_WIN			  Near	 _TEXT:0264
SINGLE_SHOT			  Near	 _TEXT:06E0
SKIP_2_ALLIES			  Near	 _TEXT:0798
SKIP_2_SCORE			  Near	 _TEXT:07A7
SKIP_ALLY			  Near	 _TEXT:020E
SKIP_POS_UPDATE			  Near	 _TEXT:0542
SKIP_REPLACE			  Near	 _TEXT:00EB
SKIP_SHOT			  Near	 _TEXT:048A
SKIP_X_MAX			  Near	 _TEXT:031D
SKIP_X_MIN			  Near	 _TEXT:032B
SKIP_Y_MAX			  Near	 _TEXT:0300
SKIP_Y_MIN			  Near	 _TEXT:030E
START_BTN			  Near	 _TEXT:014D
STRING				  Byte	 DGROUP:0020
STRING_LENGTH			  Number 00F5
SUM_POINTS			  Near	 _TEXT:034C
SYSTIME_SEED			  Near	 _TEXT:07D5
TERRAIN				  Byte	 DGROUP:0518
TERRAIN_POS			  Word	 DGROUP:1E18
THROTTLE			  Near	 _TEXT:07C5
TIME				  Byte	 DGROUP:0004
Turbo Assembler	 Version 4.1	    12/12/24 17:40:36	    Page 39
Symbol Table



TIMEOUT				  Byte	 DGROUP:0003
TIME_BUFFER			  Byte	 DGROUP:000D
TIME_BUFFER_LEN			  Number 0002
TIME_STR			  Byte	 DGROUP:011B
TIME_STR_LEN			  Number 0006
UPDATE				  Near	 _TEXT:076B
UPDATE_ENEMY			  Near	 _TEXT:0416
UPDATE_SHIP			  Near	 _TEXT:05A3
UPDATE_SHOT			  Near	 _TEXT:06D4
UPDATE_TIME			  Near	 _TEXT:0650
YOU_WIN				  Byte	 DGROUP:03D0
YOU_WIN_LEN			  Number 00A0

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0400 Para	  Stack	  STACK
  _DATA				  16  1FEF Word	  Public  DATA
_TEXT				  16  0846 Word	  Public  CODE
